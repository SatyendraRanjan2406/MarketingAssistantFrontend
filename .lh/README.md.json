{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1755587604298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755588677014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,116 +1,1 @@\n-# AI Marketing Assistant\n-\n-A React-based marketing intelligence platform with AI-powered campaign analysis and optimization recommendations.\n-\n-## Features\n-\n-- **Advanced Analytics & Insights**: Real-time performance optimization\n-- **Automated Campaign Management**: AI-driven campaign analysis\n-- **Multi-Platform Support**: Google Ads and Meta Ads integration\n-- **User Authentication**: Secure signup, login, and logout functionality\n-\n-## Authentication\n-\n-The application integrates with a Django backend API for user authentication.\n-\n-### API Endpoints\n-\n-#### Signup\n-```bash\n-POST http://localhost:8000/accounts/signup/\n-Content-Type: application/x-www-form-urlencoded\n-\n-username=john_doe&first_name=John&last_name=Doe&email=john@example.com&password1=SecurePass123&password2=SecurePass123&company_name=Acme%20Corp\n-```\n-\n-#### Login\n-```bash\n-POST http://localhost:8000/accounts/signin/\n-Content-Type: application/x-www-form-urlencoded\n-\n-username=john_doe&password=SecurePass123\n-```\n-\n-#### Logout\n-```bash\n-GET http://localhost:8000/accounts/signout/\n-Cookie: sessionid=YOUR_SESSION_ID_HERE\n-```\n-\n-### API Responses\n-\n-#### Successful Signup/Login\n-```json\n-{\n-  \"success\": true,\n-  \"message\": \"Account created successfully! Welcome to Marketing Assistant.\",\n-  \"redirect_url\": \"/accounts/dashboard/\"\n-}\n-```\n-\n-#### Validation Errors\n-```json\n-{\n-  \"success\": false,\n-  \"errors\": {\n-    \"username\": [\"This field is required.\"],\n-    \"password\": [\"This field is required.\"]\n-  }\n-}\n-```\n-\n-## Project Structure\n-\n-```\n-src/\n-├── components/          # React components\n-│   ├── LoginScreen.tsx # Authentication forms\n-│   ├── Header.tsx      # Navigation with logout\n-│   ├── Dashboard.tsx   # Main dashboard\n-│   └── ...\n-├── services/           # API services\n-│   ├── api.ts         # Axios interceptor\n-│   └── authService.ts # Authentication service\n-├── types/             # TypeScript interfaces\n-│   └── index.ts       # Type definitions\n-└── App.tsx            # Main application\n-```\n-\n-## Getting Started\n-\n-1. **Install Dependencies**\n-   ```bash\n-   npm install\n-   ```\n-\n-2. **Start Development Server**\n-   ```bash\n-   npm run dev\n-   ```\n-\n-3. **Build for Production**\n-   ```bash\n-   npm run build\n-   ```\n-\n-## Backend Requirements\n-\n-- Django backend running on `http://localhost:8000`\n-- Session-based authentication\n-- CORS configured for frontend domain\n-- User model with required fields (username, first_name, last_name, email, company_name)\n-\n-## Features\n-\n-- **Form Validation**: Client-side and server-side validation\n-- **Error Handling**: Comprehensive error display and handling\n-- **Session Management**: Automatic session handling with cookies\n-- **Responsive Design**: Mobile-friendly UI with Tailwind CSS\n-- **Type Safety**: Full TypeScript support\n-\n-## Security Features\n-\n-- CSRF protection through Django backend\n-- Secure password handling\n-- Session-based authentication\n-- Automatic logout on authentication errors\n+mar-cutting\n"
                },
                {
                    "date": 1756037131236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,122 @@\n-mar-cutting\n+# Marketing Assistant UI - Google Ads Chatbot Integration\n+\n+This project integrates with a Google Ads chatbot API to provide AI-powered advertising insights and optimization recommendations.\n+\n+## Features\n+\n+- **Google Ads Chatbot**: AI-powered chat interface for Google Ads analysis\n+- **Session Management**: Automatic chat session creation and management\n+- **Real-time Responses**: Live integration with backend chatbot API\n+- **Action Items**: Interactive buttons for quick actions and recommendations\n+- **Platform Support**: Support for both Google Ads and Meta Ads platforms\n+\n+## Google Ads Chatbot Integration\n+\n+The chatbot integrates with the following API endpoints:\n+\n+### 1. Create Chat Session\n+- **Endpoint**: `POST /google-ads-new/api/chat/sessions/create/`\n+- **Purpose**: Creates a new chat session for the user\n+- **Request Body**: `{ \"title\": \"Session Title\" }`\n+- **Response**: Returns a session ID for subsequent messages\n+\n+### 2. Send Chat Message\n+- **Endpoint**: `POST /google-ads-new/api/chat/message/`\n+- **Purpose**: Sends user messages and receives AI responses\n+- **Request Body**: `{ \"message\": \"User message\", \"session_id\": \"session_id\" }`\n+- **Response**: AI-generated response with blocks, actions, and intent analysis\n+\n+## Response Format\n+\n+The chatbot returns responses in the following format:\n+\n+```json\n+{\n+  \"success\": true,\n+  \"session_id\": \"session_id\",\n+  \"response\": {\n+    \"blocks\": [\n+      {\n+        \"type\": \"text\",\n+        \"content\": \"Response text content\",\n+        \"style\": \"paragraph\"\n+      },\n+      {\n+        \"type\": \"actions\",\n+        \"items\": [\n+          {\n+            \"id\": \"action_id\",\n+            \"label\": \"Action Label\"\n+          }\n+        ]\n+      }\n+    ]\n+  },\n+  \"intent\": {\n+    \"action\": \"INTENT_ACTION\",\n+    \"confidence\": 0.95,\n+    \"parameters\": {},\n+    \"requires_auth\": true\n+  }\n+}\n+```\n+\n+## Getting Started\n+\n+1. **Install Dependencies**:\n+   ```bash\n+   npm install\n+   ```\n+\n+2. **Start Development Server**:\n+   ```bash\n+   npm run dev\n+   ```\n+\n+3. **Access the Application**:\n+   - Open your browser to the local development URL\n+   - Navigate to the Google Ads platform\n+   - The chatbot will automatically create a new session\n+   - Start chatting with the AI about your Google Ads performance\n+\n+## API Configuration\n+\n+The application is configured to connect to `http://localhost:8000` by default. Update the `API_BASE_URL` in `src/constants/index.ts` if your backend is running on a different port or host.\n+\n+## Authentication\n+\n+The chatbot requires a valid Bearer token for authentication. The token should be stored in localStorage as `accessToken` and will be automatically included in API requests.\n+\n+## Quick Actions\n+\n+The interface includes predefined quick action buttons:\n+- **Performance Report**: Get comprehensive campaign analysis\n+- **Optimization**: Find improvement opportunities\n+- **Quick Fixes**: Identify immediate issues requiring attention\n+\n+## Error Handling\n+\n+The application includes comprehensive error handling for:\n+- Session creation failures\n+- Message sending errors\n+- Network connectivity issues\n+- Authentication problems\n+\n+## Development\n+\n+- **Frontend**: React + TypeScript + Vite\n+- **Styling**: Tailwind CSS\n+- **HTTP Client**: Axios with automatic token refresh\n+- **Icons**: Lucide React\n+\n+## Build\n+\n+```bash\n+npm run build\n+```\n+\n+## Linting\n+\n+```bash\n+npm run lint\n+```\n"
                },
                {
                    "date": 1756097033909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,12 +4,14 @@\n \n ## Features\n \n - **Google Ads Chatbot**: AI-powered chat interface for Google Ads analysis\n+- **Google AI Chat**: New comprehensive chat interface with rich content support\n - **Session Management**: Automatic chat session creation and management\n - **Real-time Responses**: Live integration with backend chatbot API\n - **Action Items**: Interactive buttons for quick actions and recommendations\n-- **Platform Support**: Support for both Google Ads and Meta Ads platforms\n+- **Platform Support**: Support for Google Ads, Google AI Chat, and Meta Ads platforms\n+- **Rich Content Types**: Support for text, tables, lists, charts, metrics, and actions\n \n ## Google Ads Chatbot Integration\n \n The chatbot integrates with the following API endpoints:\n@@ -25,33 +27,49 @@\n - **Purpose**: Sends user messages and receives AI responses\n - **Request Body**: `{ \"message\": \"User message\", \"session_id\": \"session_id\" }`\n - **Response**: AI-generated response with blocks, actions, and intent analysis\n \n-## Response Format\n+### 3. Get Chat Sessions\n+- **Endpoint**: `GET /google-ads-new/api/chat/sessions/`\n+- **Purpose**: Retrieves all chat sessions for the user\n \n-The chatbot returns responses in the following format:\n+### 4. Get Chat History\n+- **Endpoint**: `GET /google-ads-new/api/chat/sessions/{session_id}/`\n+- **Purpose**: Retrieves chat history for a specific session\n \n+### 5. Delete Session\n+- **Endpoint**: `DELETE /google-ads-new/api/chat/sessions/{session_id}/delete/`\n+- **Purpose**: Deletes a specific chat session\n+\n+### 6. Account Summary\n+- **Endpoint**: `GET /google-ads-new/api/account-summary/`\n+- **Purpose**: Retrieves Google Ads account summary information\n+\n+## Response Format Structure\n+\n+The AI responses follow this structure:\n+\n ```json\n {\n   \"success\": true,\n   \"session_id\": \"session_id\",\n   \"response\": {\n     \"blocks\": [\n       {\n-        \"type\": \"text\",\n-        \"content\": \"Response text content\",\n-        \"style\": \"paragraph\"\n-      },\n-      {\n-        \"type\": \"actions\",\n+        \"type\": \"text|table|list|actions|chart|metric|image\",\n+        \"content\": \"Response content\",\n+        \"style\": \"paragraph|heading|highlight\",\n+        \"title\": \"Block title\",\n         \"items\": [\n           {\n             \"id\": \"action_id\",\n             \"label\": \"Action Label\"\n           }\n         ]\n       }\n-    ]\n+    ],\n+    \"session_id\": null,\n+    \"metadata\": null\n   },\n   \"intent\": {\n     \"action\": \"INTENT_ACTION\",\n     \"confidence\": 0.95,\n@@ -60,8 +78,58 @@\n   }\n }\n ```\n \n+## Content Block Types\n+\n+### Text Block\n+- **Type**: `text`\n+- **Styles**: `paragraph`, `heading`, `highlight`\n+- **Features**: Rich text formatting with different styles\n+\n+### Table Block\n+- **Type**: `table`\n+- **Features**: Sortable columns, responsive design, hover effects\n+\n+### List Block\n+- **Type**: `list`\n+- **Styles**: `dotted`, `numbered`, `bulleted`\n+- **Features**: Multiple list formats for different content types\n+\n+### Action Block\n+- **Type**: `actions`\n+- **Features**: Interactive buttons for user actions\n+- **Examples**: Connect accounts, create campaigns, view reports\n+\n+### Chart Block\n+- **Type**: `chart`\n+- **Chart Types**: `pie`, `bar`, `line`\n+- **Features**: Data visualization with labels and datasets\n+\n+### Metric Block\n+- **Type**: `metric`\n+- **Features**: Key performance indicators with trends\n+- **Trend Indicators**: Up, down, neutral with visual icons\n+\n+## Platform Tabs\n+\n+### 1. Google Ads\n+- Traditional chat interface with session management\n+- Quick action buttons for common queries\n+- Performance analysis and optimization recommendations\n+\n+### 2. Google AI Chat (NEW)\n+- Comprehensive AI chat interface\n+- Support for all content block types\n+- Rich media and interactive elements\n+- Session management and history\n+- Real-time chat with AI responses\n+\n+### 3. Meta Ads\n+- Meta Ads specific chat interface\n+- Campaign analysis and optimization\n+- Performance insights and recommendations\n+\n ## Getting Started\n \n 1. **Install Dependencies**:\n    ```bash\n@@ -74,11 +142,11 @@\n    ```\n \n 3. **Access the Application**:\n    - Open your browser to the local development URL\n-   - Navigate to the Google Ads platform\n-   - The chatbot will automatically create a new session\n-   - Start chatting with the AI about your Google Ads performance\n+   - Navigate between Google Ads, Google AI Chat, and Meta Ads tabs\n+   - The Google AI Chat will automatically create new sessions\n+   - Start chatting with the AI about your advertising performance\n \n ## API Configuration\n \n The application is configured to connect to `http://localhost:8000` by default. Update the `API_BASE_URL` in `src/constants/index.ts` if your backend is running on a different port or host.\n@@ -100,15 +168,17 @@\n - Session creation failures\n - Message sending errors\n - Network connectivity issues\n - Authentication problems\n+- API endpoint failures\n \n ## Development\n \n - **Frontend**: React + TypeScript + Vite\n - **Styling**: Tailwind CSS\n - **HTTP Client**: Axios with automatic token refresh\n - **Icons**: Lucide React\n+- **Chat Components**: Modular block-based rendering system\n \n ## Build\n \n ```bash\n@@ -119,4 +189,35 @@\n \n ```bash\n npm run lint\n ```\n+\n+## Architecture\n+\n+### Components Structure\n+```\n+src/\n+├── components/\n+│   ├── ChatInterface.tsx          # Main chat interface\n+│   ├── AIChatBox.tsx              # New Google AI Chat component\n+│   ├── ChatBlocks/                # Content block components\n+│   │   ├── TextBlock.tsx\n+│   │   ├── TableBlock.tsx\n+│   │   ├── ListBlock.tsx\n+│   │   ├── ActionBlock.tsx\n+│   │   ├── ChartBlock.tsx\n+│   │   ├── MetricBlock.tsx\n+│   │   └── index.ts\n+│   └── Header.tsx                 # Platform switcher\n+├── services/\n+│   ├── api.ts                     # Main API service\n+│   └── chatApi.ts                 # Chat-specific API service\n+└── types/\n+    └── index.ts                   # TypeScript type definitions\n+```\n+\n+### Key Features\n+- **Modular Design**: Each content block type has its own component\n+- **Responsive Layout**: Mobile-first design with responsive breakpoints\n+- **Real-time Updates**: Live chat with automatic scrolling\n+- **Session Persistence**: Chat sessions maintained across page reloads\n+- **Error Recovery**: Graceful error handling with retry mechanisms\n"
                },
                {
                    "date": 1756099904702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,8 +109,29 @@\n - **Type**: `metric`\n - **Features**: Key performance indicators with trends\n - **Trend Indicators**: Up, down, neutral with visual icons\n \n+### Google Ads Analysis Blocks\n+- **Type**: Various analysis types for comprehensive Google Ads insights\n+- **Features**: Specialized analysis components with rich data display\n+\n+#### Available Analysis Types:\n+- **`budget_optimizations`**: Budget optimization recommendations\n+- **`campaign_consistency_analysis`**: Keyword-ad consistency and ad group alignment\n+- **`sitelink_analysis`**: Sitelink presence and optimization analysis\n+- **`landing_page_analysis`**: Landing page URL functionality and keyword relevance\n+- **`duplicate_keyword_analysis`**: Duplicate keywords across campaigns and ad groups\n+- **`keyword_trends_analysis`**: High-potential keywords with increasing search volume\n+- **`auction_insights_analysis`**: Competition and competitor ad strategies\n+- **`search_term_analysis`**: Search terms for negative keyword opportunities\n+- **`ads_showing_time_analysis`**: Hour-of-day performance for bid optimization\n+- **`device_performance_detailed_analysis`**: Device performance for bid adjustments\n+- **`location_performance_analysis`**: City-level performance and optimization\n+- **`landing_page_mobile_analysis`**: Mobile speed score and optimization\n+- **`tcpa_optimizations`**: Target CPA optimization recommendations\n+- **`budget_allocation_optimizations`**: Campaign budget allocation optimization\n+- **`negative_keyword_suggestions`**: Negative keyword exclusion suggestions\n+\n ## Platform Tabs\n \n ### 1. Google Ads\n - Traditional chat interface with session management\n@@ -122,8 +143,13 @@\n - Support for all content block types\n - Rich media and interactive elements\n - Session management and history\n - Real-time chat with AI responses\n+- **Quick Action Buttons**: Pre-built buttons for common Google Ads analysis tasks\n+  - **Optimize Campaign**: Campaign optimization recommendations\n+  - **Check Consistency**: Keyword-ad consistency analysis\n+  - **Check Sitelinks**: Sitelink optimization analysis\n+  - **Keyword Trends**: Keyword performance trend analysis\n \n ### 3. Meta Ads\n - Meta Ads specific chat interface\n - Campaign analysis and optimization\n"
                },
                {
                    "date": 1756108073169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,292 @@\n+# Marketing Assistant UI - Google Ads Chatbot Integration\n+\n+This project integrates with a Google Ads chatbot API to provide AI-powered advertising insights and optimization recommendations.\n+\n+## Features\n+\n+- **Google Ads Chatbot**: AI-powered chat interface for Google Ads analysis\n+- **Google AI Chat**: New comprehensive chat interface with rich content support\n+- **Session Management**: Automatic chat session creation and management\n+- **Real-time Responses**: Live integration with backend chatbot API\n+- **Action Items**: Interactive buttons for quick actions and recommendations\n+- **Platform Support**: Support for Google Ads, Google AI Chat, and Meta Ads platforms\n+- **Rich Content Types**: Support for text, tables, lists, charts, metrics, and actions\n+\n+## Google Ads Chatbot Integration\n+\n+The chatbot integrates with the following API endpoints:\n+\n+### 1. Create Chat Session\n+- **Endpoint**: `POST /google-ads-new/api/chat/sessions/create/`\n+- **Purpose**: Creates a new chat session for the user\n+- **Request Body**: `{ \"title\": \"Session Title\" }`\n+- **Response**: Returns a session ID for subsequent messages\n+\n+### 2. Send Chat Message\n+- **Endpoint**: `POST /google-ads-new/api/chat/message/`\n+- **Purpose**: Sends user messages and receives AI responses\n+- **Request Body**: `{ \"message\": \"User message\", \"session_id\": \"session_id\" }`\n+- **Response**: AI-generated response with blocks, actions, and intent analysis\n+\n+### 3. Get Chat Sessions\n+- **Endpoint**: `GET /google-ads-new/api/chat/sessions/`\n+- **Purpose**: Retrieves all chat sessions for the user\n+\n+### 4. Get Chat History\n+- **Endpoint**: `GET /google-ads-new/api/chat/sessions/{session_id}/`\n+- **Purpose**: Retrieves chat history for a specific session\n+\n+### 5. Delete Session\n+- **Endpoint**: `DELETE /google-ads-new/api/chat/sessions/{session_id}/delete/`\n+- **Purpose**: Deletes a specific chat session\n+\n+### 6. Account Summary\n+- **Endpoint**: `GET /google-ads-new/api/account-summary/`\n+- **Purpose**: Retrieves Google Ads account summary information\n+\n+## Response Format Structure\n+\n+The AI responses follow this structure:\n+\n+```json\n+{\n+  \"success\": true,\n+  \"session_id\": \"session_id\",\n+  \"response\": {\n+    \"blocks\": [\n+      {\n+        \"type\": \"text|table|list|actions|chart|metric|image\",\n+        \"content\": \"Response content\",\n+        \"style\": \"paragraph|heading|highlight\",\n+        \"title\": \"Block title\",\n+        \"items\": [\n+          {\n+            \"id\": \"action_id\",\n+            \"label\": \"Action Label\"\n+          }\n+        ]\n+      }\n+    ],\n+    \"session_id\": null,\n+    \"metadata\": null\n+  },\n+  \"intent\": {\n+    \"action\": \"INTENT_ACTION\",\n+    \"confidence\": 0.95,\n+    \"parameters\": {},\n+    \"requires_auth\": true\n+  }\n+}\n+```\n+\n+## RAG Response Format\n+\n+For RAG-enhanced responses, the structure includes additional metadata:\n+\n+```json\n+{\n+  \"success\": true,\n+  \"response\": {\n+    \"rag_enhanced_response\": {\n+      \"response_type\": \"rag\",\n+      \"blocks\": [\n+        {\n+          \"type\": \"text\",\n+          \"content\": \"Based on Google Ads best practices...\",\n+          \"style\": \"heading\"\n+        },\n+        {\n+          \"type\": \"chart\",\n+          \"content\": { \"type\": \"pie\", \"data\": [...] }\n+        }\n+      ],\n+      \"rag_metadata\": {\n+        \"context_used\": true,\n+        \"context_sources\": [\"google_ads_best_practices.md\"],\n+        \"selection_reason\": \"RAG selected due to knowledge-based query\"\n+      }\n+    }\n+  }\n+}\n+```\n+\n+## Content Block Types\n+\n+### Text Block\n+- **Type**: `text`\n+- **Styles**: `paragraph`, `heading`, `highlight`\n+- **Features**: Rich text formatting with different styles\n+\n+### Table Block\n+- **Type**: `table`\n+- **Features**: Sortable columns, responsive design, hover effects\n+\n+### List Block\n+- **Type**: `list`\n+- **Styles**: `dotted`, `numbered`, `bulleted`\n+- **Features**: Multiple list formats for different content types\n+\n+### Action Block\n+- **Type**: `actions`\n+- **Features**: Interactive buttons for user actions\n+- **Examples**: Connect accounts, create campaigns, view reports\n+\n+### Chart Block\n+- **Type**: `chart`\n+- **Chart Types**: `pie`, `bar`, `line`\n+- **Features**: Data visualization with labels and datasets\n+\n+### Metric Block\n+- **Type**: `metric`\n+- **Features**: Key performance indicators with trends\n+- **Trend Indicators**: Up, down, neutral with visual icons\n+\n+### Google Ads Analysis Blocks\n+- **Type**: Various analysis types for comprehensive Google Ads insights\n+- **Features**: Specialized analysis components with rich data display\n+\n+#### Available Analysis Types:\n+- **`budget_optimizations`**: Budget optimization recommendations\n+- **`campaign_consistency_analysis`**: Keyword-ad consistency and ad group alignment\n+- **`sitelink_analysis`**: Sitelink presence and optimization analysis\n+- **`landing_page_analysis`**: Landing page URL functionality and keyword relevance\n+- **`duplicate_keyword_analysis`**: Duplicate keywords across campaigns and ad groups\n+- **`keyword_trends_analysis`**: High-potential keywords with increasing search volume\n+- **`auction_insights_analysis`**: Competition and competitor ad strategies\n+- **`search_term_analysis`**: Search terms for negative keyword opportunities\n+- **`ads_showing_time_analysis`**: Hour-of-day performance for bid optimization\n+- **`device_performance_detailed_analysis`**: Device performance for bid adjustments\n+- **`location_performance_analysis`**: City-level performance and optimization\n+- **`landing_page_mobile_analysis`**: Mobile speed score and optimization\n+- **`tcpa_optimizations`**: Target CPA optimization recommendations\n+- **`budget_allocation_optimizations`**: Campaign budget allocation optimization\n+- **`negative_keyword_suggestions`**: Negative keyword exclusion suggestions\n+\n+### RAG Enhanced Responses\n+- **Type**: `rag_enhanced_response`\n+- **Features**: Knowledge base integration with AI responses\n+- **Benefits**: Enhanced accuracy, context-aware responses, source attribution\n+- **Metadata**: Context usage, source documents, selection reasoning\n+\n+## Platform Tabs\n+\n+### 1. Google Ads\n+- Traditional chat interface with session management\n+- Quick action buttons for common queries\n+- Performance analysis and optimization recommendations\n+\n+### 2. Google AI Chat (NEW)\n+- Comprehensive AI chat interface\n+- Support for all content block types\n+- Rich media and interactive elements\n+- Session management and history\n+- Real-time chat with AI responses\n+- **Quick Action Buttons**: Pre-built buttons for common Google Ads analysis tasks\n+  - **Optimize Campaign**: Campaign optimization recommendations\n+  - **Check Consistency**: Keyword-ad consistency analysis\n+  - **Check Sitelinks**: Sitelink optimization analysis\n+  - **Keyword Trends**: Keyword performance trend analysis\n+\n+### 3. Meta Ads\n+- Meta Ads specific chat interface\n+- Campaign analysis and optimization\n+- Performance insights and recommendations\n+\n+## Getting Started\n+\n+1. **Install Dependencies**:\n+   ```bash\n+   npm install\n+   ```\n+\n+2. **Start Development Server**:\n+   ```bash\n+   npm run dev\n+   ```\n+\n+3. **Access the Application**:\n+   - Open your browser to the local development URL\n+   - Navigate between Google Ads, Google AI Chat, and Meta Ads tabs\n+   - The Google AI Chat will automatically create new sessions\n+   - Start chatting with the AI about your advertising performance\n+\n+## API Configuration\n+\n+The application is configured to connect to `http://localhost:8000` by default. Update the `API_BASE_URL` in `src/constants/index.ts` if your backend is running on a different port or host.\n+\n+## Authentication\n+\n+The chatbot requires a valid Bearer token for authentication. The token should be stored in localStorage as `accessToken` and will be automatically included in API requests.\n+\n+## Quick Actions\n+\n+The interface includes predefined quick action buttons:\n+- **Performance Report**: Get comprehensive campaign analysis\n+- **Optimization**: Find improvement opportunities\n+- **Quick Fixes**: Identify immediate issues requiring attention\n+\n+## Error Handling\n+\n+The application includes comprehensive error handling for:\n+- Session creation failures\n+- Message sending errors\n+- Network connectivity issues\n+- Authentication problems\n+- API endpoint failures\n+\n+## Development\n+\n+- **Frontend**: React + TypeScript + Vite\n+- **Styling**: Tailwind CSS\n+- **HTTP Client**: Axios with automatic token refresh\n+- **Icons**: Lucide React\n+- **Chat Components**: Modular block-based rendering system\n+- **RAG Testing**: Built-in testing panel for RAG functionality validation\n+\n+## Build\n+\n+```bash\n+npm run build\n+```\n+\n+## Linting\n+\n+```bash\n+npm run lint\n+```\n+\n+## Architecture\n+\n+### Components Structure\n+```\n+src/\n+├── components/\n+│   ├── ChatInterface.tsx          # Main chat interface\n+│   ├── AIChatBox.tsx              # New Google AI Chat component with RAG support\n+│   ├── AnalysisBlock.tsx          # RAG and analysis block renderer\n+│   ├── RAGTestPanel.tsx           # RAG functionality testing panel\n+│   ├── ChatBlocks/                # Content block components\n+│   │   ├── TextBlock.tsx\n+│   │   ├── TableBlock.tsx\n+│   │   ├── ListBlock.tsx\n+│   │   ├── ActionBlock.tsx\n+│   │   ├── ChartBlock.tsx\n+│   │   ├── MetricBlock.tsx\n+│   │   └── index.ts\n+│   └── Header.tsx                 # Platform switcher\n+├── services/\n+│   ├── api.ts                     # Main API service\n+│   └── chatApi.ts                 # Chat-specific API service\n+└── types/\n+    └── index.ts                   # TypeScript type definitions with RAG types\n+```\n+\n+### Key Features\n+- **Modular Design**: Each content block type has its own component\n+- **Responsive Layout**: Mobile-first design with responsive breakpoints\n+- **Real-time Updates**: Live chat with automatic scrolling\n+- **Session Persistence**: Chat sessions maintained across page reloads\n+- **Error Recovery**: Graceful error handling with retry mechanisms\n+- **RAG Integration**: Knowledge base enhanced AI responses\n+- **Analysis Blocks**: Comprehensive Google Ads analysis components\n+- **Testing Tools**: Built-in RAG testing and validation\n\\ No newline at end of file\n"
                }
            ],
            "date": 1755587604298,
            "name": "Commit-0",
            "content": "# AI Marketing Assistant\n\nA React-based marketing intelligence platform with AI-powered campaign analysis and optimization recommendations.\n\n## Features\n\n- **Advanced Analytics & Insights**: Real-time performance optimization\n- **Automated Campaign Management**: AI-driven campaign analysis\n- **Multi-Platform Support**: Google Ads and Meta Ads integration\n- **User Authentication**: Secure signup, login, and logout functionality\n\n## Authentication\n\nThe application integrates with a Django backend API for user authentication.\n\n### API Endpoints\n\n#### Signup\n```bash\nPOST http://localhost:8000/accounts/signup/\nContent-Type: application/x-www-form-urlencoded\n\nusername=john_doe&first_name=John&last_name=Doe&email=john@example.com&password1=SecurePass123&password2=SecurePass123&company_name=Acme%20Corp\n```\n\n#### Login\n```bash\nPOST http://localhost:8000/accounts/signin/\nContent-Type: application/x-www-form-urlencoded\n\nusername=john_doe&password=SecurePass123\n```\n\n#### Logout\n```bash\nGET http://localhost:8000/accounts/signout/\nCookie: sessionid=YOUR_SESSION_ID_HERE\n```\n\n### API Responses\n\n#### Successful Signup/Login\n```json\n{\n  \"success\": true,\n  \"message\": \"Account created successfully! Welcome to Marketing Assistant.\",\n  \"redirect_url\": \"/accounts/dashboard/\"\n}\n```\n\n#### Validation Errors\n```json\n{\n  \"success\": false,\n  \"errors\": {\n    \"username\": [\"This field is required.\"],\n    \"password\": [\"This field is required.\"]\n  }\n}\n```\n\n## Project Structure\n\n```\nsrc/\n├── components/          # React components\n│   ├── LoginScreen.tsx # Authentication forms\n│   ├── Header.tsx      # Navigation with logout\n│   ├── Dashboard.tsx   # Main dashboard\n│   └── ...\n├── services/           # API services\n│   ├── api.ts         # Axios interceptor\n│   └── authService.ts # Authentication service\n├── types/             # TypeScript interfaces\n│   └── index.ts       # Type definitions\n└── App.tsx            # Main application\n```\n\n## Getting Started\n\n1. **Install Dependencies**\n   ```bash\n   npm install\n   ```\n\n2. **Start Development Server**\n   ```bash\n   npm run dev\n   ```\n\n3. **Build for Production**\n   ```bash\n   npm run build\n   ```\n\n## Backend Requirements\n\n- Django backend running on `http://localhost:8000`\n- Session-based authentication\n- CORS configured for frontend domain\n- User model with required fields (username, first_name, last_name, email, company_name)\n\n## Features\n\n- **Form Validation**: Client-side and server-side validation\n- **Error Handling**: Comprehensive error display and handling\n- **Session Management**: Automatic session handling with cookies\n- **Responsive Design**: Mobile-friendly UI with Tailwind CSS\n- **Type Safety**: Full TypeScript support\n\n## Security Features\n\n- CSRF protection through Django backend\n- Secure password handling\n- Session-based authentication\n- Automatic logout on authentication errors\n"
        }
    ]
}