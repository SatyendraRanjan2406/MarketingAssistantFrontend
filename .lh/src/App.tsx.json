{
    "sourceFile": "src/App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1755587604298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755588676947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,25 @@\n-import React, { useState, useEffect } from 'react';\n+import React, { useState } from 'react';\n import LoginScreen from './components/LoginScreen';\n import OnboardingFlow from './components/OnboardingFlow';\n import Dashboard from './components/Dashboard';\n-import authService from './services/authService';\n \n function App() {\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\n   const [hasCompletedOnboarding, setHasCompletedOnboarding] = useState(false);\n \n-  // Check authentication status on component mount\n-  useEffect(() => {\n-    const checkAuth = () => {\n-      const authenticated = authService.isAuthenticated();\n-      setIsAuthenticated(authenticated);\n-    };\n-    \n-    checkAuth();\n-  }, []);\n-\n   const handleLogin = () => {\n     setIsAuthenticated(true);\n   };\n \n-  const handleLogout = () => {\n-    setIsAuthenticated(false);\n-    setHasCompletedOnboarding(false);\n-  };\n-\n   const handleOnboardingComplete = () => {\n     setHasCompletedOnboarding(true);\n   };\n \n   return (\n     <div className=\"min-h-screen bg-gray-50\">\n       {isAuthenticated && hasCompletedOnboarding ? (\n-        <Dashboard onLogout={handleLogout} />\n+        <Dashboard />\n       ) : isAuthenticated ? (\n         <OnboardingFlow onComplete={handleOnboardingComplete} />\n       ) : (\n         <LoginScreen onLogin={handleLogin} />\n"
                },
                {
                    "date": 1755593629468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,58 @@\n-import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\n import LoginScreen from './components/LoginScreen';\n import OnboardingFlow from './components/OnboardingFlow';\n import Dashboard from './components/Dashboard';\n+import authService from './services/authService';\n+import { User } from './types';\n \n function App() {\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\n   const [hasCompletedOnboarding, setHasCompletedOnboarding] = useState(false);\n+  const [currentUser, setCurrentUser] = useState<User | null>(null);\n \n-  const handleLogin = () => {\n+  // Check authentication status on component mount\n+  useEffect(() => {\n+    const checkAuth = () => {\n+      const authenticated = authService.isAuthenticated();\n+      const user = authService.getCurrentUser();\n+      \n+      console.log('Auth check:', { authenticated, user });\n+      \n+      if (authenticated && user) {\n+        setIsAuthenticated(true);\n+        setCurrentUser(user);\n+      }\n+    };\n+    \n+    checkAuth();\n+  }, []);\n+\n+  const handleLogin = (user: User) => {\n+    console.log('Login successful:', user);\n     setIsAuthenticated(true);\n+    setCurrentUser(user);\n   };\n \n+  const handleLogout = () => {\n+    console.log('Logout called');\n+    setIsAuthenticated(false);\n+    setHasCompletedOnboarding(false);\n+    setCurrentUser(null);\n+  };\n+\n   const handleOnboardingComplete = () => {\n+    console.log('Onboarding completed');\n     setHasCompletedOnboarding(true);\n   };\n \n+  // Debug: Show current state\n+  console.log('App state:', { isAuthenticated, hasCompletedOnboarding, currentUser });\n+\n   return (\n     <div className=\"min-h-screen bg-gray-50\">\n       {isAuthenticated && hasCompletedOnboarding ? (\n-        <Dashboard />\n+        <Dashboard onLogout={handleLogout} />\n       ) : isAuthenticated ? (\n         <OnboardingFlow onComplete={handleOnboardingComplete} />\n       ) : (\n         <LoginScreen onLogin={handleLogin} />\n"
                },
                {
                    "date": 1755614546775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import React, { useState, useEffect } from 'react';\n+import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\n import LoginScreen from './components/LoginScreen';\n import OnboardingFlow from './components/OnboardingFlow';\n import Dashboard from './components/Dashboard';\n+import GoogleOAuthCallback from './components/GoogleOAuthCallback';\n import authService from './services/authService';\n import { User } from './types';\n \n function App() {\n@@ -48,17 +50,38 @@\n   // Debug: Show current state\n   console.log('App state:', { isAuthenticated, hasCompletedOnboarding, currentUser });\n \n   return (\n-    <div className=\"min-h-screen bg-gray-50\">\n-      {isAuthenticated && hasCompletedOnboarding ? (\n-        <Dashboard onLogout={handleLogout} />\n-      ) : isAuthenticated ? (\n-        <OnboardingFlow onComplete={handleOnboardingComplete} />\n-      ) : (\n-        <LoginScreen onLogin={handleLogin} />\n-      )}\n-    </div>\n+    <Router>\n+      <div className=\"min-h-screen bg-gray-50\">\n+        <Routes>\n+          {/* OAuth Callback Route - accessible without authentication */}\n+          <Route path=\"/google-oauth/callback\" element={<GoogleOAuthCallback />} />\n+          \n+          {/* Main App Routes */}\n+          <Route path=\"/\" element={\n+            isAuthenticated && hasCompletedOnboarding ? (\n+              <Navigate to=\"/dashboard\" replace />\n+            ) : isAuthenticated ? (\n+              <OnboardingFlow onComplete={handleOnboardingComplete} />\n+            ) : (\n+              <LoginScreen onLogin={handleLogin} />\n+            )\n+          } />\n+          \n+          <Route path=\"/dashboard\" element={\n+            isAuthenticated && hasCompletedOnboarding ? (\n+              <Dashboard onLogout={handleLogout} />\n+            ) : (\n+              <Navigate to=\"/\" replace />\n+            )\n+          } />\n+          \n+          {/* Catch all route - redirect to home */}\n+          <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n+        </Routes>\n+      </div>\n+    </Router>\n   );\n }\n \n export default App;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1755587604298,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport LoginScreen from './components/LoginScreen';\nimport OnboardingFlow from './components/OnboardingFlow';\nimport Dashboard from './components/Dashboard';\nimport authService from './services/authService';\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [hasCompletedOnboarding, setHasCompletedOnboarding] = useState(false);\n\n  // Check authentication status on component mount\n  useEffect(() => {\n    const checkAuth = () => {\n      const authenticated = authService.isAuthenticated();\n      setIsAuthenticated(authenticated);\n    };\n    \n    checkAuth();\n  }, []);\n\n  const handleLogin = () => {\n    setIsAuthenticated(true);\n  };\n\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    setHasCompletedOnboarding(false);\n  };\n\n  const handleOnboardingComplete = () => {\n    setHasCompletedOnboarding(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {isAuthenticated && hasCompletedOnboarding ? (\n        <Dashboard onLogout={handleLogout} />\n      ) : isAuthenticated ? (\n        <OnboardingFlow onComplete={handleOnboardingComplete} />\n      ) : (\n        <LoginScreen onLogin={handleLogin} />\n      )}\n    </div>\n  );\n}\n\nexport default App;"
        }
    ]
}