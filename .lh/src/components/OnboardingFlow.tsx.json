{
    "sourceFile": "src/components/OnboardingFlow.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1755589047787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755593781857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,32 +41,32 @@\n     switch (currentStep) {\n       case 1:\n         return (\n           <div className=\"text-center\">\n-            <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n+            <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6 lg:mb-8\">\n               <Zap className=\"w-10 h-10 text-white\" />\n             </div>\n-            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Welcome to AI Marketing Assistant</h2>\n-            <p className=\"text-lg text-gray-600 mb-8 max-w-2xl mx-auto\">\n+            <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Welcome to AI Marketing Assistant</h2>\n+            <p className=\"text-lg text-gray-600 mb-8 lg:mb-12 max-w-2xl mx-auto\">\n               Transform your advertising performance with AI-powered insights and automated optimization. \n               Let's connect your advertising accounts to get started.\n             </p>\n-            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n-              <div className=\"bg-blue-50 p-6 rounded-xl\">\n+            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 lg:gap-8 max-w-4xl mx-auto\">\n+              <div className=\"bg-blue-50 p-6 lg:p-8 rounded-xl\">\n                 <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                   <Shield className=\"w-6 h-6 text-blue-600\" />\n                 </div>\n                 <h3 className=\"font-semibold text-gray-900 mb-2\">Secure Integration</h3>\n                 <p className=\"text-sm text-gray-600\">Bank-level security with OAuth 2.0 authentication</p>\n               </div>\n-              <div className=\"bg-green-50 p-6 rounded-xl\">\n+              <div className=\"bg-green-50 p-6 lg:p-8 rounded-xl\">\n                 <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                   <Zap className=\"w-6 h-6 text-green-600\" />\n                 </div>\n                 <h3 className=\"font-semibold text-gray-900 mb-2\">Real-time Analysis</h3>\n                 <p className=\"text-sm text-gray-600\">Live campaign monitoring and optimization</p>\n               </div>\n-              <div className=\"bg-purple-50 p-6 rounded-xl\">\n+              <div className=\"bg-purple-50 p-6 lg:p-8 rounded-xl\">\n                 <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                   <CheckCircle className=\"w-6 h-6 text-purple-600\" />\n                 </div>\n                 <h3 className=\"font-semibold text-gray-900 mb-2\">Automated Actions</h3>\n@@ -78,19 +78,19 @@\n \n       case 2:\n         return (\n           <div className=\"max-w-6xl mx-auto\">\n-            <div className=\"text-center mb-8\">\n-              <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Connect Your Advertising Accounts</h2>\n+            <div className=\"text-center mb-8 lg:mb-12\">\n+              <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Connect Your Advertising Accounts</h2>\n               <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n                 Connect both Google Ads and Meta Ads accounts for comprehensive cross-platform optimization and unified insights.\n               </p>\n             </div>\n \n-            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n+            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12\">\n               {/* Google Ads Section */}\n-              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n-                <div className=\"text-center mb-6\">\n+              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n+                <div className=\"text-center mb-6 lg:mb-8\">\n                   <div className=\"w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                     <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"none\">\n                       <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                       <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n@@ -135,10 +135,10 @@\n                 )}\n               </div>\n \n               {/* Meta Ads Section */}\n-              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n-                <div className=\"text-center mb-6\">\n+              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n+                <div className=\"text-center mb-6 lg:mb-8\">\n                   <div className=\"w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                     <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n                       <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                     </svg>\n@@ -182,15 +182,15 @@\n               </div>\n             </div>\n \n             {/* Cross-Platform Benefits */}\n-            <div className=\"mt-8 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl p-6\">\n+            <div className=\"mt-8 lg:mt-12 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl p-6 lg:p-8\">\n               <div className=\"text-center\">\n-                <h4 className=\"text-lg font-semibold text-blue-900 mb-3\">Cross-Platform Benefits</h4>\n-                <p className=\"text-blue-800 mb-4\">\n+                <h4 className=\"text-lg font-semibold text-blue-900 mb-3 lg:mb-4\">Cross-Platform Benefits</h4>\n+                <p className=\"text-blue-800 mb-4 lg:mb-6\">\n                   With both platforms connected, you'll get unified insights and cross-platform optimization recommendations.\n                 </p>\n-                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n+                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 lg:gap-6 text-sm\">\n                   <div className=\"flex items-center space-x-2\">\n                     <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                     <span>Unified dashboard view</span>\n                   </div>\n@@ -210,19 +210,19 @@\n \n       case 3:\n         return (\n           <div className=\"text-center\">\n-            <div className=\"w-20 h-20 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n+            <div className=\"w-20 h-20 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-6 lg:mb-8\">\n               <CheckCircle className=\"w-10 h-10 text-green-600\" />\n             </div>\n-            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Setup Complete!</h2>\n-            <p className=\"text-lg text-gray-600 mb-8 max-w-2xl mx-auto\">\n+            <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Setup Complete!</h2>\n+            <p className=\"text-lg text-gray-600 mb-8 lg:mb-12 max-w-2xl mx-auto\">\n               Your accounts are now connected and we're analyzing your campaign data. \n               You can start getting AI-powered insights and optimizations right away.\n             </p>\n             \n-            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto mb-8\">\n-              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8 max-w-4xl mx-auto mb-8 lg:mb-12\">\n+              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n                 <div className=\"flex items-center space-x-3 mb-4\">\n                   <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"none\">\n                     <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                     <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n@@ -240,9 +240,9 @@\n                   <p>• $45,230 monthly spend</p>\n                 </div>\n               </div>\n \n-              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n+              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n                 <div className=\"flex items-center space-x-3 mb-4\">\n                   <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n                     <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                   </svg>\n@@ -274,12 +274,12 @@\n     }\n   };\n \n   return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4\">\n+    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4 py-8 lg:py-16\">\n       <div className=\"max-w-6xl w-full\">\n         {/* Progress Steps */}\n-        <div className=\"flex items-center justify-center mb-12\">\n+        <div className=\"flex items-center justify-center mb-12 lg:mb-16\">\n           {steps.map((step, index) => (\n             <div key={step.id} className=\"flex items-center\">\n               <div className={`flex items-center space-x-3 ${\n                 currentStep >= step.id ? 'text-blue-600' : 'text-gray-400'\n@@ -311,15 +311,15 @@\n           ))}\n         </div>\n \n         {/* Step Content */}\n-        <div className=\"bg-white rounded-2xl shadow-xl p-8 border border-gray-100\">\n+        <div className=\"bg-white rounded-2xl shadow-xl p-6 lg:p-8 border border-gray-100\">\n           {renderStepContent()}\n         </div>\n \n         {/* Navigation */}\n         {currentStep < 3 && (\n-          <div className=\"flex justify-between mt-8\">\n+          <div className=\"flex justify-between mt-8 lg:mt-12\">\n             <button\n               onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n               disabled={currentStep === 1}\n               className=\"px-6 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n"
                },
                {
                    "date": 1755594235671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useState } from 'react';\n import { CheckCircle, ExternalLink, AlertCircle, ArrowRight, Shield, Zap } from 'lucide-react';\n+import authService from '../services/authService'; // Added import for authService\n \n interface OnboardingFlowProps {\n   onComplete: () => void;\n }\n@@ -10,20 +11,60 @@\n   const [connectedAccounts, setConnectedAccounts] = useState({\n     google: false,\n     meta: false\n   });\n+  const [isConnectingGoogle, setIsConnectingGoogle] = useState(false);\n+  const [isConnectingMeta, setIsConnectingMeta] = useState(false);\n+  const [connectionError, setConnectionError] = useState<string | null>(null);\n \n   const steps = [\n     { id: 1, title: 'Welcome', description: 'Get started with AI Marketing Assistant' },\n     { id: 2, title: 'Connect Accounts', description: 'Link your advertising accounts' },\n     { id: 3, title: 'Setup Complete', description: 'Start optimizing your campaigns' }\n   ];\n \n-  const handleGoogleConnect = () => {\n-    // Simulate OAuth flow\n-    setTimeout(() => {\n-      setConnectedAccounts(prev => ({ ...prev, google: true }));\n-    }, 2000);\n+  const handleGoogleConnect = async () => {\n+    setIsConnectingGoogle(true);\n+    setConnectionError(null);\n+    \n+    try {\n+      const result = await authService.initiateGoogleOAuth();\n+      if (result.success) {\n+        // OAuth window opened successfully\n+        console.log('Google OAuth initiated successfully');\n+        \n+        // Start checking for connection status\n+        const checkConnection = setInterval(async () => {\n+          try {\n+            const status = await authService.checkGoogleOAuthStatus();\n+            if (status.success && status.connected) {\n+              setConnectedAccounts(prev => ({ ...prev, google: true }));\n+              setIsConnectingGoogle(false);\n+              clearInterval(checkConnection);\n+            }\n+          } catch (error) {\n+            console.error('Status check error:', error);\n+          }\n+        }, 2000); // Check every 2 seconds\n+        \n+        // Fallback: if no connection after 30 seconds, stop checking\n+        setTimeout(() => {\n+          clearInterval(checkConnection);\n+          if (!connectedAccounts.google) {\n+            setIsConnectingGoogle(false);\n+            setConnectionError('Connection timeout. Please try again.');\n+          }\n+        }, 30000);\n+        \n+      } else {\n+        setConnectionError(result.error || 'Failed to connect Google Ads');\n+        setIsConnectingGoogle(false);\n+      }\n+    } catch (error) {\n+      console.error('Google OAuth error:', error);\n+      setConnectionError('Failed to connect Google Ads. Please try again.');\n+      setIsConnectingGoogle(false);\n+    }\n   };\n \n   const handleMetaConnect = () => {\n     // Simulate OAuth flow\n@@ -124,15 +165,32 @@\n                     <h4 className=\"font-semibold text-green-900\">Google Ads Connected!</h4>\n                     <p className=\"text-sm text-green-700 mt-1\">3 active accounts with 24 campaigns</p>\n                   </div>\n                 ) : (\n-                  <button\n-                    onClick={handleGoogleConnect}\n-                    className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n-                  >\n-                    <ExternalLink className=\"w-5 h-5\" />\n-                    <span>Connect Google Ads</span>\n-                  </button>\n+                  <div className=\"space-y-3\">\n+                    {connectionError && (\n+                      <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n+                        <p className=\"text-sm text-red-800\">{connectionError}</p>\n+                      </div>\n+                    )}\n+                    <button\n+                      onClick={handleGoogleConnect}\n+                      disabled={isConnectingGoogle}\n+                      className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n+                    >\n+                      {isConnectingGoogle ? (\n+                        <>\n+                          <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n+                          <span>Connecting...</span>\n+                        </>\n+                      ) : (\n+                        <>\n+                          <ExternalLink className=\"w-5 h-5\" />\n+                          <span>Connect Google Ads</span>\n+                        </>\n+                      )}\n+                    </button>\n+                  </div>\n                 )}\n               </div>\n \n               {/* Meta Ads Section */}\n"
                },
                {
                    "date": 1755594522904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,62 @@\n   });\n   const [isConnectingGoogle, setIsConnectingGoogle] = useState(false);\n   const [isConnectingMeta, setIsConnectingMeta] = useState(false);\n   const [connectionError, setConnectionError] = useState<string | null>(null);\n+  const [showNavigationHint, setShowNavigationHint] = useState(true);\n \n+  // Arrow key navigation\n+  React.useEffect(() => {\n+    const handleKeyDown = (event: KeyboardEvent) => {\n+      if (event.key === 'ArrowLeft') {\n+        event.preventDefault();\n+        if (currentStep > 1) {\n+          setCurrentStep(currentStep - 1);\n+          // Show brief visual feedback\n+          setShowNavigationHint(false);\n+          setTimeout(() => setShowNavigationHint(true), 100);\n+        }\n+      } else if (event.key === 'ArrowRight') {\n+        event.preventDefault();\n+        if (currentStep < 3 && canProceed()) {\n+          setCurrentStep(currentStep + 1);\n+          // Show brief visual feedback\n+          setShowNavigationHint(false);\n+          setTimeout(() => setShowNavigationHint(true), 100);\n+        }\n+      } else if (event.key === 'Home') {\n+        event.preventDefault();\n+        setCurrentStep(1);\n+        setShowNavigationHint(false);\n+        setTimeout(() => setShowNavigationHint(true), 100);\n+      } else if (event.key === 'End') {\n+        event.preventDefault();\n+        if (canProceed()) {\n+          setCurrentStep(3);\n+          setShowNavigationHint(false);\n+          setTimeout(() => setShowNavigationHint(true), 100);\n+        }\n+      }\n+    };\n+\n+    // Add event listener\n+    window.addEventListener('keydown', handleKeyDown);\n+\n+    // Cleanup\n+    return () => {\n+      window.removeEventListener('keydown', handleKeyDown);\n+    };\n+  }, [currentStep]);\n+\n+  // Hide navigation hint after 5 seconds\n+  React.useEffect(() => {\n+    const hideHint = setTimeout(() => {\n+      setShowNavigationHint(false);\n+    }, 5000);\n+\n+    return () => clearTimeout(hideHint);\n+  }, []);\n+\n   const steps = [\n     { id: 1, title: 'Welcome', description: 'Get started with AI Marketing Assistant' },\n     { id: 2, title: 'Connect Accounts', description: 'Link your advertising accounts' },\n     { id: 3, title: 'Setup Complete', description: 'Start optimizing your campaigns' }\n@@ -334,8 +387,18 @@\n \n   return (\n     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4 py-8 lg:py-16\">\n       <div className=\"max-w-6xl w-full\">\n+        {/* Navigation Hint */}\n+        {showNavigationHint && (\n+          <div className=\"text-center mb-6\">\n+            <div className=\"inline-flex items-center space-x-2 bg-blue-50 border border-blue-200 rounded-full px-4 py-2 text-sm text-blue-700\">\n+              <span>⌨️</span>\n+              <span>Navigate: <kbd className=\"px-2 py-1 bg-white rounded border border-blue-300 text-xs\">←</kbd> <kbd className=\"px-2 py-1 bg-white rounded border border-blue-300 text-xs\">→</kbd> <kbd className=\"px-2 py-1 bg-white rounded border border-blue-300 text-xs\">Home</kbd> <kbd className=\"px-2 py-1 bg-white rounded border border-blue-300 text-xs\">End</kbd></span>\n+            </div>\n+          </div>\n+        )}\n+\n         {/* Progress Steps */}\n         <div className=\"flex items-center justify-center mb-12 lg:mb-16\">\n           {steps.map((step, index) => (\n             <div key={step.id} className=\"flex items-center\">\n@@ -369,29 +432,34 @@\n           ))}\n         </div>\n \n         {/* Step Content */}\n-        <div className=\"bg-white rounded-2xl shadow-xl p-6 lg:p-8 border border-gray-100\">\n-          {renderStepContent()}\n+        <div className=\"bg-white rounded-2xl shadow-xl p-6 lg:p-8 border border-gray-100 transition-all duration-300 ease-in-out\">\n+          <div className=\"animate-fadeIn\">\n+            {renderStepContent()}\n+          </div>\n         </div>\n \n         {/* Navigation */}\n         {currentStep < 3 && (\n           <div className=\"flex justify-between mt-8 lg:mt-12\">\n             <button\n               onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n               disabled={currentStep === 1}\n-              className=\"px-6 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n+              className=\"px-6 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n             >\n-              Previous\n+              <span>←</span>\n+              <span>Previous</span>\n+              <span className=\"text-xs text-gray-400\">(←)</span>\n             </button>\n             <button\n               onClick={() => setCurrentStep(Math.min(3, currentStep + 1))}\n               disabled={!canProceed()}\n               className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n             >\n               <span>Next</span>\n-              <ArrowRight className=\"w-4 h-4\" />\n+              <span>→</span>\n+              <span className=\"text-xs text-gray-400\">(→)</span>\n             </button>\n           </div>\n         )}\n       </div>\n"
                },
                {
                    "date": 1755614546784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\n import { CheckCircle, ExternalLink, AlertCircle, ArrowRight, Shield, Zap } from 'lucide-react';\n import authService from '../services/authService'; // Added import for authService\n \n interface OnboardingFlowProps {\n@@ -14,60 +14,24 @@\n   });\n   const [isConnectingGoogle, setIsConnectingGoogle] = useState(false);\n   const [isConnectingMeta, setIsConnectingMeta] = useState(false);\n   const [connectionError, setConnectionError] = useState<string | null>(null);\n-  const [showNavigationHint, setShowNavigationHint] = useState(true);\n \n-  // Arrow key navigation\n-  React.useEffect(() => {\n-    const handleKeyDown = (event: KeyboardEvent) => {\n-      if (event.key === 'ArrowLeft') {\n-        event.preventDefault();\n-        if (currentStep > 1) {\n-          setCurrentStep(currentStep - 1);\n-          // Show brief visual feedback\n-          setShowNavigationHint(false);\n-          setTimeout(() => setShowNavigationHint(true), 100);\n-        }\n-      } else if (event.key === 'ArrowRight') {\n-        event.preventDefault();\n-        if (currentStep < 3 && canProceed()) {\n-          setCurrentStep(currentStep + 1);\n-          // Show brief visual feedback\n-          setShowNavigationHint(false);\n-          setTimeout(() => setShowNavigationHint(true), 100);\n-        }\n-      } else if (event.key === 'Home') {\n-        event.preventDefault();\n-        setCurrentStep(1);\n-        setShowNavigationHint(false);\n-        setTimeout(() => setShowNavigationHint(true), 100);\n-      } else if (event.key === 'End') {\n-        event.preventDefault();\n-        if (canProceed()) {\n-          setCurrentStep(3);\n-          setShowNavigationHint(false);\n-          setTimeout(() => setShowNavigationHint(true), 100);\n-        }\n+  // Listen for OAuth success messages from popup window\n+  useEffect(() => {\n+    const handleMessage = (event: MessageEvent) => {\n+      if (event.origin !== window.location.origin) return;\n+      \n+      if (event.data.type === 'GOOGLE_OAUTH_SUCCESS') {\n+        console.log('Google OAuth successful:', event.data);\n+        setConnectedAccounts(prev => ({ ...prev, google: true }));\n+        setIsConnectingGoogle(false);\n+        setConnectionError(null);\n       }\n     };\n \n-    // Add event listener\n-    window.addEventListener('keydown', handleKeyDown);\n-\n-    // Cleanup\n-    return () => {\n-      window.removeEventListener('keydown', handleKeyDown);\n-    };\n-  }, [currentStep]);\n-\n-  // Hide navigation hint after 5 seconds\n-  React.useEffect(() => {\n-    const hideHint = setTimeout(() => {\n-      setShowNavigationHint(false);\n-    }, 5000);\n-\n-    return () => clearTimeout(hideHint);\n+    window.addEventListener('message', handleMessage);\n+    return () => window.removeEventListener('message', handleMessage);\n   }, []);\n \n   const steps = [\n     { id: 1, title: 'Welcome', description: 'Get started with AI Marketing Assistant' },\n@@ -84,31 +48,17 @@\n       if (result.success) {\n         // OAuth window opened successfully\n         console.log('Google OAuth initiated successfully');\n         \n-        // Start checking for connection status\n-        const checkConnection = setInterval(async () => {\n-          try {\n-            const status = await authService.checkGoogleOAuthStatus();\n-            if (status.success && status.connected) {\n-              setConnectedAccounts(prev => ({ ...prev, google: true }));\n-              setIsConnectingGoogle(false);\n-              clearInterval(checkConnection);\n-            }\n-          } catch (error) {\n-            console.error('Status check error:', error);\n-          }\n-        }, 2000); // Check every 2 seconds\n-        \n-        // Fallback: if no connection after 30 seconds, stop checking\n+        // Set a timeout in case the popup doesn't send a message\n         setTimeout(() => {\n-          clearInterval(checkConnection);\n-          if (!connectedAccounts.google) {\n+          if (isConnectingGoogle) {\n             setIsConnectingGoogle(false);\n-            setConnectionError('Connection timeout. Please try again.');\n+            setConnectionError('Connection timeout. Please check if the OAuth window opened and try again.');\n           }\n-        }, 30000);\n+        }, 60000); // 60 second timeout\n         \n+        // The connection status will be updated via message from the popup window\n       } else {\n         setConnectionError(result.error || 'Failed to connect Google Ads');\n         setIsConnectingGoogle(false);\n       }\n@@ -387,18 +337,8 @@\n \n   return (\n     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4 py-8 lg:py-16\">\n       <div className=\"max-w-6xl w-full\">\n-        {/* Navigation Hint */}\n-        {showNavigationHint && (\n-          <div className=\"text-center mb-6\">\n-            <div className=\"inline-flex items-center space-x-2 bg-blue-50 border border-blue-200 rounded-full px-4 py-2 text-sm text-blue-700\">\n-              <span>⌨️</span>\n-              <span>Navigate: <kbd className=\"px-2 py-1 bg-white rounded border border-blue-300 text-xs\">←</kbd> <kbd className=\"px-2 py-1 bg-white rounded border border-blue-300 text-xs\">→</kbd> <kbd className=\"px-2 py-1 bg-white rounded border border-blue-300 text-xs\">Home</kbd> <kbd className=\"px-2 py-1 bg-white rounded border border-blue-300 text-xs\">End</kbd></span>\n-            </div>\n-          </div>\n-        )}\n-\n         {/* Progress Steps */}\n         <div className=\"flex items-center justify-center mb-12 lg:mb-16\">\n           {steps.map((step, index) => (\n             <div key={step.id} className=\"flex items-center\">\n@@ -432,34 +372,29 @@\n           ))}\n         </div>\n \n         {/* Step Content */}\n-        <div className=\"bg-white rounded-2xl shadow-xl p-6 lg:p-8 border border-gray-100 transition-all duration-300 ease-in-out\">\n-          <div className=\"animate-fadeIn\">\n-            {renderStepContent()}\n-          </div>\n+        <div className=\"bg-white rounded-2xl shadow-xl p-6 lg:p-8 border border-gray-100\">\n+          {renderStepContent()}\n         </div>\n \n         {/* Navigation */}\n         {currentStep < 3 && (\n           <div className=\"flex justify-between mt-8 lg:mt-12\">\n             <button\n               onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n               disabled={currentStep === 1}\n-              className=\"px-6 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n+              className=\"px-6 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n             >\n-              <span>←</span>\n-              <span>Previous</span>\n-              <span className=\"text-xs text-gray-400\">(←)</span>\n+              Previous\n             </button>\n             <button\n               onClick={() => setCurrentStep(Math.min(3, currentStep + 1))}\n               disabled={!canProceed()}\n               className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n             >\n               <span>Next</span>\n-              <span>→</span>\n-              <span className=\"text-xs text-gray-400\">(→)</span>\n+              <ArrowRight className=\"w-4 h-4\" />\n             </button>\n           </div>\n         )}\n       </div>\n"
                },
                {
                    "date": 1755614789176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,12 @@\n         console.log('Google OAuth successful:', event.data);\n         setConnectedAccounts(prev => ({ ...prev, google: true }));\n         setIsConnectingGoogle(false);\n         setConnectionError(null);\n+      } else if (event.data.type === 'GOOGLE_OAUTH_FAILURE') {\n+        console.log('Google OAuth failed:', event.data);\n+        setIsConnectingGoogle(false);\n+        setConnectionError(event.data.error || 'Google OAuth failed. Please try again.');\n       }\n     };\n \n     window.addEventListener('message', handleMessage);\n@@ -48,13 +52,13 @@\n       if (result.success) {\n         // OAuth window opened successfully\n         console.log('Google OAuth initiated successfully');\n         \n-        // Set a timeout in case the popup doesn't send a message\n+        // Set a timeout in case the popup doesn't send a message or gets closed\n         setTimeout(() => {\n           if (isConnectingGoogle) {\n             setIsConnectingGoogle(false);\n-            setConnectionError('Connection timeout. Please check if the OAuth window opened and try again.');\n+            setConnectionError('Connection timeout or OAuth window was closed. Please try again.');\n           }\n         }, 60000); // 60 second timeout\n         \n         // The connection status will be updated via message from the popup window\n@@ -171,9 +175,18 @@\n                 ) : (\n                   <div className=\"space-y-3\">\n                     {connectionError && (\n                       <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n-                        <p className=\"text-sm text-red-800\">{connectionError}</p>\n+                        <p className=\"text-sm text-red-800 mb-2\">{connectionError}</p>\n+                        <button\n+                          onClick={() => {\n+                            setConnectionError(null);\n+                            setIsConnectingGoogle(false);\n+                          }}\n+                          className=\"text-xs text-red-600 hover:text-red-800 underline\"\n+                        >\n+                          Clear Error\n+                        </button>\n                       </div>\n                     )}\n                     <button\n                       onClick={handleGoogleConnect}\n"
                },
                {
                    "date": 1755614920455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,491 @@\n+import React, { useState, useEffect } from 'react';\n+import { CheckCircle, ExternalLink, AlertCircle, ArrowRight, Shield, Zap } from 'lucide-react';\n+import authService from '../services/authService'; // Added import for authService\n+\n+interface OnboardingFlowProps {\n+  onComplete: () => void;\n+}\n+\n+const OnboardingFlow: React.FC<OnboardingFlowProps> = ({ onComplete }) => {\n+  const [currentStep, setCurrentStep] = useState(1);\n+  const [connectedAccounts, setConnectedAccounts] = useState({\n+    google: false,\n+    meta: false\n+  });\n+  const [isConnectingGoogle, setIsConnectingGoogle] = useState(false);\n+  const [isConnectingMeta, setIsConnectingMeta] = useState(false);\n+  const [connectionError, setConnectionError] = useState<string | null>(null);\n+\n+  // Listen for OAuth success messages from popup window\n+  useEffect(() => {\n+    const handleMessage = (event: MessageEvent) => {\n+      if (event.origin !== window.location.origin) return;\n+      \n+      console.log('Received message from popup:', event.data);\n+      \n+      if (event.data.type === 'GOOGLE_OAUTH_SUCCESS') {\n+        console.log('Google OAuth successful:', event.data);\n+        setConnectedAccounts(prev => ({ ...prev, google: true }));\n+        setIsConnectingGoogle(false);\n+        setConnectionError(null);\n+      } else if (event.data.type === 'GOOGLE_OAUTH_FAILURE') {\n+        console.log('Google OAuth failed:', event.data);\n+        setIsConnectingGoogle(false);\n+        setConnectionError(event.data.error || 'Google OAuth failed. Please try again.');\n+      }\n+    };\n+\n+    window.addEventListener('message', handleMessage);\n+    return () => window.removeEventListener('message', handleMessage);\n+  }, []);\n+\n+  // Monitor sessionStorage for OAuth state changes\n+  useEffect(() => {\n+    const checkOAuthState = () => {\n+      const storedState = sessionStorage.getItem('googleOAuthState');\n+      console.log('OAuth state check:', storedState);\n+      \n+      // If we're connecting but no OAuth state exists, something went wrong\n+      if (isConnectingGoogle && !storedState) {\n+        console.log('OAuth state lost while connecting - resetting');\n+        setIsConnectingGoogle(false);\n+        setConnectionError('OAuth state was lost. Please try again.');\n+      }\n+    };\n+\n+    // Check immediately\n+    checkOAuthState();\n+    \n+    // Set up interval to check periodically\n+    const interval = setInterval(checkOAuthState, 5000); // Check every 5 seconds\n+    \n+    return () => clearInterval(interval);\n+  }, [isConnectingGoogle]);\n+\n+  // Manual reset function for OAuth state\n+  const resetGoogleOAuthState = () => {\n+    setIsConnectingGoogle(false);\n+    setConnectionError(null);\n+    console.log('Manually reset Google OAuth state');\n+  };\n+\n+  const steps = [\n+    { id: 1, title: 'Welcome', description: 'Get started with AI Marketing Assistant' },\n+    { id: 2, title: 'Connect Accounts', description: 'Link your advertising accounts' },\n+    { id: 3, title: 'Setup Complete', description: 'Start optimizing your campaigns' }\n+  ];\n+\n+  const handleGoogleConnect = async () => {\n+    setIsConnectingGoogle(true);\n+    setConnectionError(null);\n+    \n+    try {\n+      const result = await authService.initiateGoogleOAuth();\n+      if (result.success) {\n+        // OAuth window opened successfully\n+        console.log('Google OAuth initiated successfully');\n+        \n+        // Set multiple timeouts for better user experience\n+        // Short timeout for immediate feedback\n+        setTimeout(() => {\n+          if (isConnectingGoogle) {\n+            console.log('Short timeout reached - checking if popup is still open');\n+          }\n+        }, 10000); // 10 seconds\n+        \n+        // Medium timeout for popup closure detection\n+        setTimeout(() => {\n+          if (isConnectingGoogle) {\n+            console.log('Medium timeout reached - checking connection status');\n+            // Check if we have any OAuth state\n+            const storedState = sessionStorage.getItem('googleOAuthState');\n+            if (!storedState) {\n+              console.log('No OAuth state found - resetting connection');\n+              setIsConnectingGoogle(false);\n+              setConnectionError('OAuth window was closed or connection failed. Please try again.');\n+            }\n+          }\n+        }, 30000); // 30 seconds\n+        \n+        // Long timeout as final fallback\n+        setTimeout(() => {\n+          if (isConnectingGoogle) {\n+            console.log('Long timeout reached - forcing reset');\n+            setIsConnectingGoogle(false);\n+            setConnectionError('Connection timeout. Please try again.');\n+          }\n+        }, 60000); // 60 seconds\n+        \n+        // The connection status will be updated via message from the popup window\n+      } else {\n+        setConnectionError(result.error || 'Failed to connect Google Ads');\n+        setIsConnectingGoogle(false);\n+      }\n+    } catch (error) {\n+      console.error('Google OAuth error:', error);\n+      setConnectionError('Failed to connect Google Ads. Please try again.');\n+      setIsConnectingGoogle(false);\n+    }\n+  };\n+\n+  const handleMetaConnect = () => {\n+    // Simulate OAuth flow\n+    setTimeout(() => {\n+      setConnectedAccounts(prev => ({ ...prev, meta: true }));\n+    }, 2000);\n+  };\n+\n+  const canProceed = () => {\n+    if (currentStep === 2) return connectedAccounts.google && connectedAccounts.meta;\n+    return true;\n+  };\n+\n+  const renderStepContent = () => {\n+    switch (currentStep) {\n+      case 1:\n+        return (\n+          <div className=\"text-center\">\n+            <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6 lg:mb-8\">\n+              <Zap className=\"w-10 h-10 text-white\" />\n+            </div>\n+            <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Welcome to AI Marketing Assistant</h2>\n+            <p className=\"text-lg text-gray-600 mb-8 lg:mb-12 max-w-2xl mx-auto\">\n+              Transform your advertising performance with AI-powered insights and automated optimization. \n+              Let's connect your advertising accounts to get started.\n+            </p>\n+            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 lg:gap-8 max-w-4xl mx-auto\">\n+              <div className=\"bg-blue-50 p-6 lg:p-8 rounded-xl\">\n+                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n+                  <Shield className=\"w-6 h-6 text-blue-600\" />\n+                </div>\n+                <h3 className=\"font-semibold text-gray-900 mb-2\">Secure Integration</h3>\n+                <p className=\"text-sm text-gray-600\">Bank-level security with OAuth 2.0 authentication</p>\n+              </div>\n+              <div className=\"bg-green-50 p-6 lg:p-8 rounded-xl\">\n+                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n+                  <Zap className=\"w-6 h-6 text-green-600\" />\n+                </div>\n+                <h3 className=\"font-semibold text-gray-900 mb-2\">Real-time Analysis</h3>\n+                <p className=\"text-sm text-gray-600\">Live campaign monitoring and optimization</p>\n+              </div>\n+              <div className=\"bg-purple-50 p-6 lg:p-8 rounded-xl\">\n+                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n+                  <CheckCircle className=\"w-6 h-6 text-purple-600\" />\n+                </div>\n+                <h3 className=\"font-semibold text-gray-900 mb-2\">Automated Actions</h3>\n+                <p className=\"text-sm text-gray-600\">One-click implementation of AI recommendations</p>\n+              </div>\n+            </div>\n+          </div>\n+        );\n+\n+      case 2:\n+        return (\n+          <div className=\"max-w-6xl mx-auto\">\n+            <div className=\"text-center mb-8 lg:mb-12\">\n+              <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Connect Your Advertising Accounts</h2>\n+              <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n+                Connect both Google Ads and Meta Ads accounts for comprehensive cross-platform optimization and unified insights.\n+              </p>\n+            </div>\n+\n+            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12\">\n+              {/* Google Ads Section */}\n+              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n+                <div className=\"text-center mb-6 lg:mb-8\">\n+                  <div className=\"w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n+                    <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"none\">\n+                      <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n+                      <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n+                      <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n+                      <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n+                    </svg>\n+                  </div>\n+                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Google Ads</h3>\n+                  <p className=\"text-gray-600 text-sm\">\n+                    Securely connect your Google Ads account for AI-powered campaign analysis.\n+                  </p>\n+                </div>\n+\n+                <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n+                  <div className=\"flex items-start space-x-3\">\n+                    <Shield className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n+                    <div className=\"text-sm text-gray-600\">\n+                      <p className=\"font-medium text-gray-900 mb-2\">What we'll access:</p>\n+                      <ul className=\"space-y-1\">\n+                        <li>• Campaign performance data (read-only)</li>\n+                        <li>• Account structure and settings</li>\n+                        <li>• Optimization capabilities (with approval)</li>\n+                      </ul>\n+                    </div>\n+                  </div>\n+                </div>\n+\n+                {connectedAccounts.google ? (\n+                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n+                    <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n+                    <h4 className=\"font-semibold text-green-900\">Google Ads Connected!</h4>\n+                    <p className=\"text-sm text-green-700 mt-1\">3 active accounts with 24 campaigns</p>\n+                  </div>\n+                ) : (\n+                  <div className=\"space-y-3\">\n+                    {connectionError && (\n+                      <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n+                        <p className=\"text-sm text-red-800 mb-2\">{connectionError}</p>\n+                        <div className=\"flex space-x-2\">\n+                          <button\n+                            onClick={() => {\n+                              setConnectionError(null);\n+                              setIsConnectingGoogle(false);\n+                            }}\n+                            className=\"text-xs text-red-600 hover:text-red-800 underline\"\n+                          >\n+                            Clear Error\n+                          </button>\n+                          <button\n+                            onClick={resetGoogleOAuthState}\n+                            className=\"text-xs text-blue-600 hover:text-blue-800 underline\"\n+                          >\n+                            Reset Connection\n+                          </button>\n+                        </div>\n+                      </div>\n+                    )}\n+                    <button\n+                      onClick={handleGoogleConnect}\n+                      disabled={isConnectingGoogle}\n+                      className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n+                    >\n+                      {isConnectingGoogle ? (\n+                        <>\n+                          <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n+                          <span>Connecting...</span>\n+                        </>\n+                      ) : (\n+                        <>\n+                          <ExternalLink className=\"w-5 h-5\" />\n+                          <span>Connect Google Ads</span>\n+                        </>\n+                      )}\n+                    </button>\n+                    \n+                    {/* Manual reset button when connecting */}\n+                    {isConnectingGoogle && (\n+                      <button\n+                        onClick={resetGoogleOAuthState}\n+                        className=\"w-full mt-2 bg-gray-500 text-white py-2 px-4 rounded-lg text-sm hover:bg-gray-600 transition-colors\"\n+                      >\n+                        Cancel Connection\n+                      </button>\n+                    )}\n+                  </div>\n+                )}\n+              </div>\n+\n+              {/* Meta Ads Section */}\n+              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n+                <div className=\"text-center mb-6 lg:mb-8\">\n+                  <div className=\"w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n+                    <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n+                      <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n+                    </svg>\n+                  </div>\n+                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Meta Ads</h3>\n+                  <p className=\"text-gray-600 text-sm\">\n+                    Link your Meta (Facebook/Instagram) advertising account for comprehensive insights.\n+                  </p>\n+                </div>\n+\n+                <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n+                  <div className=\"flex items-start space-x-3\">\n+                    <Shield className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n+                    <div className=\"text-sm text-gray-600\">\n+                      <p className=\"font-medium text-gray-900 mb-2\">What we'll access:</p>\n+                      <ul className=\"space-y-1\">\n+                        <li>• Ad account performance metrics</li>\n+                        <li>• Campaign and ad set data</li>\n+                        <li>• Audience insights and demographics</li>\n+                        <li>• Campaign management capabilities</li>\n+                      </ul>\n+                    </div>\n+                  </div>\n+                </div>\n+\n+                {connectedAccounts.meta ? (\n+                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n+                    <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n+                    <h4 className=\"font-semibold text-green-900\">Meta Ads Connected!</h4>\n+                    <p className=\"text-sm text-green-700 mt-1\">2 ad accounts with 18 campaigns</p>\n+                  </div>\n+                ) : (\n+                  <button\n+                    onClick={handleMetaConnect}\n+                    className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n+                  >\n+                    <ExternalLink className=\"w-5 h-5\" />\n+                    <span>Connect Meta Ads</span>\n+                  </button>\n+                )}\n+              </div>\n+            </div>\n+\n+            {/* Cross-Platform Benefits */}\n+            <div className=\"mt-8 lg:mt-12 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl p-6 lg:p-8\">\n+              <div className=\"text-center\">\n+                <h4 className=\"text-lg font-semibold text-blue-900 mb-3 lg:mb-4\">Cross-Platform Benefits</h4>\n+                <p className=\"text-blue-800 mb-4 lg:mb-6\">\n+                  With both platforms connected, you'll get unified insights and cross-platform optimization recommendations.\n+                </p>\n+                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 lg:gap-6 text-sm\">\n+                  <div className=\"flex items-center space-x-2\">\n+                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                    <span>Unified dashboard view</span>\n+                  </div>\n+                  <div className=\"flex items-center space-x-2\">\n+                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                    <span>Cross-platform insights</span>\n+                  </div>\n+                  <div className=\"flex items-center space-x-2\">\n+                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                    <span>Integrated optimization</span>\n+                  </div>\n+                </div>\n+              </div>\n+            </div>\n+          </div>\n+        );\n+\n+      case 3:\n+        return (\n+          <div className=\"text-center\">\n+            <div className=\"w-20 h-20 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-6 lg:mb-8\">\n+              <CheckCircle className=\"w-10 h-10 text-green-600\" />\n+            </div>\n+            <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Setup Complete!</h2>\n+            <p className=\"text-lg text-gray-600 mb-8 lg:mb-12 max-w-2xl mx-auto\">\n+              Your accounts are now connected and we're analyzing your campaign data. \n+              You can start getting AI-powered insights and optimizations right away.\n+            </p>\n+            \n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8 max-w-4xl mx-auto mb-8 lg:mb-12\">\n+              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n+                <div className=\"flex items-center space-x-3 mb-4\">\n+                  <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"none\">\n+                    <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n+                    <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n+                    <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n+                    <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n+                  </svg>\n+                  <div>\n+                    <h3 className=\"font-semibold text-gray-900\">Google Ads</h3>\n+                    <p className=\"text-sm text-green-600\">Connected ✓</p>\n+                  </div>\n+                </div>\n+                <div className=\"text-left space-y-2 text-sm text-gray-600\">\n+                  <p>• 3 accounts connected</p>\n+                  <p>• 24 active campaigns</p>\n+                  <p>• $45,230 monthly spend</p>\n+                </div>\n+              </div>\n+\n+              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n+                <div className=\"flex items-center space-x-3 mb-4\">\n+                  <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n+                    <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n+                  </svg>\n+                  <div>\n+                    <h3 className=\"font-semibold text-gray-900\">Meta Ads</h3>\n+                    <p className=\"text-sm text-green-600\">Connected ✓</p>\n+                  </div>\n+                </div>\n+                <div className=\"text-left space-y-2 text-sm text-gray-600\">\n+                  <p>• 2 ad accounts connected</p>\n+                  <p>• 18 active campaigns</p>\n+                  <p>• $32,180 monthly spend</p>\n+                </div>\n+              </div>\n+            </div>\n+\n+            <button\n+              onClick={onComplete}\n+              className=\"bg-blue-600 text-white py-3 px-8 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center space-x-2 mx-auto\"\n+            >\n+              <span>Start Using AI Marketing Assistant</span>\n+              <ArrowRight className=\"w-5 h-5\" />\n+            </button>\n+          </div>\n+        );\n+\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4 py-8 lg:py-16\">\n+      <div className=\"max-w-6xl w-full\">\n+        {/* Progress Steps */}\n+        <div className=\"flex items-center justify-center mb-12 lg:mb-16\">\n+          {steps.map((step, index) => (\n+            <div key={step.id} className=\"flex items-center\">\n+              <div className={`flex items-center space-x-3 ${\n+                currentStep >= step.id ? 'text-blue-600' : 'text-gray-400'\n+              }`}>\n+                <div className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold ${\n+                  currentStep > step.id \n+                    ? 'bg-blue-600 text-white' \n+                    : currentStep === step.id\n+                    ? 'bg-blue-100 text-blue-600 border-2 border-blue-600'\n+                    : 'bg-gray-200 text-gray-500'\n+                }`}>\n+                  {currentStep > step.id ? (\n+                    <CheckCircle className=\"w-5 h-5\" />\n+                  ) : (\n+                    step.id\n+                  )}\n+                </div>\n+                <div className=\"hidden md:block\">\n+                  <p className=\"font-medium\">{step.title}</p>\n+                  <p className=\"text-sm opacity-75\">{step.description}</p>\n+                </div>\n+              </div>\n+              {index < steps.length - 1 && (\n+                <div className={`w-16 h-0.5 mx-4 ${\n+                  currentStep > step.id ? 'bg-blue-600' : 'bg-gray-300'\n+                }`} />\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+\n+        {/* Step Content */}\n+        <div className=\"bg-white rounded-2xl shadow-xl p-6 lg:p-8 border border-gray-100\">\n+          {renderStepContent()}\n+        </div>\n+\n+        {/* Navigation */}\n+        {currentStep < 3 && (\n+          <div className=\"flex justify-between mt-8 lg:mt-12\">\n+            <button\n+              onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n+              disabled={currentStep === 1}\n+              className=\"px-6 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n+            >\n+              Previous\n+            </button>\n+            <button\n+              onClick={() => setCurrentStep(Math.min(3, currentStep + 1))}\n+              disabled={!canProceed()}\n+              className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n+            >\n+              <span>Next</span>\n+              <ArrowRight className=\"w-4 h-4\" />\n+            </button>\n+          </div>\n+        )}\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default OnboardingFlow;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755615191900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,35 @@\n       }\n     };\n \n     window.addEventListener('message', handleMessage);\n+    \n+    // Also check for OAuth completion in the current URL (fallback for same-window OAuth)\n+    const checkCurrentUrlForOAuth = () => {\n+      const urlParams = new URLSearchParams(window.location.search);\n+      const code = urlParams.get('code');\n+      const state = urlParams.get('state');\n+      \n+      if (code && state) {\n+        console.log('OAuth callback detected in current window:', { code, state });\n+        // Check if this is a valid OAuth state\n+        const storedState = sessionStorage.getItem('googleOAuthState') || localStorage.getItem('googleOAuthState');\n+        if (storedState === state) {\n+          console.log('OAuth state matches - completing connection');\n+          setConnectedAccounts(prev => ({ ...prev, google: true }));\n+          setIsConnectingGoogle(false);\n+          setConnectionError(null);\n+          // Clear the OAuth parameters from URL\n+          window.history.replaceState({}, document.title, window.location.pathname);\n+        } else {\n+          console.log('OAuth state mismatch in current window');\n+        }\n+      }\n+    };\n+    \n+    // Check immediately\n+    checkCurrentUrlForOAuth();\n+    \n     return () => window.removeEventListener('message', handleMessage);\n   }, []);\n \n   // Monitor sessionStorage for OAuth state changes\n@@ -61,8 +88,51 @@\n     \n     return () => clearInterval(interval);\n   }, [isConnectingGoogle]);\n \n+  // Check for OAuth completion in current URL periodically\n+  useEffect(() => {\n+    if (!isConnectingGoogle) return;\n+    \n+    const checkOAuthCompletion = () => {\n+      const urlParams = new URLSearchParams(window.location.search);\n+      const code = urlParams.get('code');\n+      const state = urlParams.get('state');\n+      \n+      if (code && state) {\n+        console.log('Periodic OAuth completion check - found callback:', { code, state });\n+        const storedState = sessionStorage.getItem('googleOAuthState') || localStorage.getItem('googleOAuthState');\n+        if (storedState === state) {\n+          console.log('OAuth completion detected - updating connection status');\n+          setConnectedAccounts(prev => ({ ...prev, google: true }));\n+          setIsConnectingGoogle(false);\n+          setConnectionError(null);\n+          // Clear the OAuth parameters from URL\n+          window.history.replaceState({}, document.title, window.location.pathname);\n+        }\n+      }\n+    };\n+    \n+    // Check immediately\n+    checkOAuthCompletion();\n+    \n+    // Check every 2 seconds while connecting\n+    const interval = setInterval(checkOAuthCompletion, 2000);\n+    \n+    return () => clearInterval(interval);\n+  }, [isConnectingGoogle]);\n+\n+  // Debug: Log current URL on mount\n+  useEffect(() => {\n+    console.log('OnboardingFlow mounted - current URL:', window.location.href);\n+    const urlParams = new URLSearchParams(window.location.search);\n+    const code = urlParams.get('code');\n+    const state = urlParams.get('state');\n+    if (code || state) {\n+      console.log('OAuth parameters found on mount:', { code, state });\n+    }\n+  }, []);\n+\n   // Manual reset function for OAuth state\n   const resetGoogleOAuthState = () => {\n     setIsConnectingGoogle(false);\n     setConnectionError(null);\n@@ -487,423 +557,5 @@\n     </div>\n   );\n };\n \n-export default OnboardingFlow;\n-import React, { useState, useEffect } from 'react';\n-import { CheckCircle, ExternalLink, AlertCircle, ArrowRight, Shield, Zap } from 'lucide-react';\n-import authService from '../services/authService'; // Added import for authService\n-\n-interface OnboardingFlowProps {\n-  onComplete: () => void;\n-}\n-\n-const OnboardingFlow: React.FC<OnboardingFlowProps> = ({ onComplete }) => {\n-  const [currentStep, setCurrentStep] = useState(1);\n-  const [connectedAccounts, setConnectedAccounts] = useState({\n-    google: false,\n-    meta: false\n-  });\n-  const [isConnectingGoogle, setIsConnectingGoogle] = useState(false);\n-  const [isConnectingMeta, setIsConnectingMeta] = useState(false);\n-  const [connectionError, setConnectionError] = useState<string | null>(null);\n-\n-  // Listen for OAuth success messages from popup window\n-  useEffect(() => {\n-    const handleMessage = (event: MessageEvent) => {\n-      if (event.origin !== window.location.origin) return;\n-      \n-      if (event.data.type === 'GOOGLE_OAUTH_SUCCESS') {\n-        console.log('Google OAuth successful:', event.data);\n-        setConnectedAccounts(prev => ({ ...prev, google: true }));\n-        setIsConnectingGoogle(false);\n-        setConnectionError(null);\n-      } else if (event.data.type === 'GOOGLE_OAUTH_FAILURE') {\n-        console.log('Google OAuth failed:', event.data);\n-        setIsConnectingGoogle(false);\n-        setConnectionError(event.data.error || 'Google OAuth failed. Please try again.');\n-      }\n-    };\n-\n-    window.addEventListener('message', handleMessage);\n-    return () => window.removeEventListener('message', handleMessage);\n-  }, []);\n-\n-  const steps = [\n-    { id: 1, title: 'Welcome', description: 'Get started with AI Marketing Assistant' },\n-    { id: 2, title: 'Connect Accounts', description: 'Link your advertising accounts' },\n-    { id: 3, title: 'Setup Complete', description: 'Start optimizing your campaigns' }\n-  ];\n-\n-  const handleGoogleConnect = async () => {\n-    setIsConnectingGoogle(true);\n-    setConnectionError(null);\n-    \n-    try {\n-      const result = await authService.initiateGoogleOAuth();\n-      if (result.success) {\n-        // OAuth window opened successfully\n-        console.log('Google OAuth initiated successfully');\n-        \n-        // Set a timeout in case the popup doesn't send a message or gets closed\n-        setTimeout(() => {\n-          if (isConnectingGoogle) {\n-            setIsConnectingGoogle(false);\n-            setConnectionError('Connection timeout or OAuth window was closed. Please try again.');\n-          }\n-        }, 60000); // 60 second timeout\n-        \n-        // The connection status will be updated via message from the popup window\n-      } else {\n-        setConnectionError(result.error || 'Failed to connect Google Ads');\n-        setIsConnectingGoogle(false);\n-      }\n-    } catch (error) {\n-      console.error('Google OAuth error:', error);\n-      setConnectionError('Failed to connect Google Ads. Please try again.');\n-      setIsConnectingGoogle(false);\n-    }\n-  };\n-\n-  const handleMetaConnect = () => {\n-    // Simulate OAuth flow\n-    setTimeout(() => {\n-      setConnectedAccounts(prev => ({ ...prev, meta: true }));\n-    }, 2000);\n-  };\n-\n-  const canProceed = () => {\n-    if (currentStep === 2) return connectedAccounts.google && connectedAccounts.meta;\n-    return true;\n-  };\n-\n-  const renderStepContent = () => {\n-    switch (currentStep) {\n-      case 1:\n-        return (\n-          <div className=\"text-center\">\n-            <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6 lg:mb-8\">\n-              <Zap className=\"w-10 h-10 text-white\" />\n-            </div>\n-            <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Welcome to AI Marketing Assistant</h2>\n-            <p className=\"text-lg text-gray-600 mb-8 lg:mb-12 max-w-2xl mx-auto\">\n-              Transform your advertising performance with AI-powered insights and automated optimization. \n-              Let's connect your advertising accounts to get started.\n-            </p>\n-            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 lg:gap-8 max-w-4xl mx-auto\">\n-              <div className=\"bg-blue-50 p-6 lg:p-8 rounded-xl\">\n-                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n-                  <Shield className=\"w-6 h-6 text-blue-600\" />\n-                </div>\n-                <h3 className=\"font-semibold text-gray-900 mb-2\">Secure Integration</h3>\n-                <p className=\"text-sm text-gray-600\">Bank-level security with OAuth 2.0 authentication</p>\n-              </div>\n-              <div className=\"bg-green-50 p-6 lg:p-8 rounded-xl\">\n-                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n-                  <Zap className=\"w-6 h-6 text-green-600\" />\n-                </div>\n-                <h3 className=\"font-semibold text-gray-900 mb-2\">Real-time Analysis</h3>\n-                <p className=\"text-sm text-gray-600\">Live campaign monitoring and optimization</p>\n-              </div>\n-              <div className=\"bg-purple-50 p-6 lg:p-8 rounded-xl\">\n-                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n-                  <CheckCircle className=\"w-6 h-6 text-purple-600\" />\n-                </div>\n-                <h3 className=\"font-semibold text-gray-900 mb-2\">Automated Actions</h3>\n-                <p className=\"text-sm text-gray-600\">One-click implementation of AI recommendations</p>\n-              </div>\n-            </div>\n-          </div>\n-        );\n-\n-      case 2:\n-        return (\n-          <div className=\"max-w-6xl mx-auto\">\n-            <div className=\"text-center mb-8 lg:mb-12\">\n-              <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Connect Your Advertising Accounts</h2>\n-              <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n-                Connect both Google Ads and Meta Ads accounts for comprehensive cross-platform optimization and unified insights.\n-              </p>\n-            </div>\n-\n-            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12\">\n-              {/* Google Ads Section */}\n-              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n-                <div className=\"text-center mb-6 lg:mb-8\">\n-                  <div className=\"w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n-                    <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"none\">\n-                      <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n-                      <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n-                      <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n-                      <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n-                    </svg>\n-                  </div>\n-                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Google Ads</h3>\n-                  <p className=\"text-gray-600 text-sm\">\n-                    Securely connect your Google Ads account for AI-powered campaign analysis.\n-                  </p>\n-                </div>\n-\n-                <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n-                  <div className=\"flex items-start space-x-3\">\n-                    <Shield className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n-                    <div className=\"text-sm text-gray-600\">\n-                      <p className=\"font-medium text-gray-900 mb-2\">What we'll access:</p>\n-                      <ul className=\"space-y-1\">\n-                        <li>• Campaign performance data (read-only)</li>\n-                        <li>• Account structure and settings</li>\n-                        <li>• Optimization capabilities (with approval)</li>\n-                      </ul>\n-                    </div>\n-                  </div>\n-                </div>\n-\n-                {connectedAccounts.google ? (\n-                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n-                    <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n-                    <h4 className=\"font-semibold text-green-900\">Google Ads Connected!</h4>\n-                    <p className=\"text-sm text-green-700 mt-1\">3 active accounts with 24 campaigns</p>\n-                  </div>\n-                ) : (\n-                  <div className=\"space-y-3\">\n-                    {connectionError && (\n-                      <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n-                        <p className=\"text-sm text-red-800 mb-2\">{connectionError}</p>\n-                        <button\n-                          onClick={() => {\n-                            setConnectionError(null);\n-                            setIsConnectingGoogle(false);\n-                          }}\n-                          className=\"text-xs text-red-600 hover:text-red-800 underline\"\n-                        >\n-                          Clear Error\n-                        </button>\n-                      </div>\n-                    )}\n-                    <button\n-                      onClick={handleGoogleConnect}\n-                      disabled={isConnectingGoogle}\n-                      className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n-                    >\n-                      {isConnectingGoogle ? (\n-                        <>\n-                          <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n-                          <span>Connecting...</span>\n-                        </>\n-                      ) : (\n-                        <>\n-                          <ExternalLink className=\"w-5 h-5\" />\n-                          <span>Connect Google Ads</span>\n-                        </>\n-                      )}\n-                    </button>\n-                  </div>\n-                )}\n-              </div>\n-\n-              {/* Meta Ads Section */}\n-              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n-                <div className=\"text-center mb-6 lg:mb-8\">\n-                  <div className=\"w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n-                    <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n-                      <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n-                    </svg>\n-                  </div>\n-                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Meta Ads</h3>\n-                  <p className=\"text-gray-600 text-sm\">\n-                    Link your Meta (Facebook/Instagram) advertising account for comprehensive insights.\n-                  </p>\n-                </div>\n-\n-                <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n-                  <div className=\"flex items-start space-x-3\">\n-                    <Shield className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n-                    <div className=\"text-sm text-gray-600\">\n-                      <p className=\"font-medium text-gray-900 mb-2\">What we'll access:</p>\n-                      <ul className=\"space-y-1\">\n-                        <li>• Ad account performance metrics</li>\n-                        <li>• Campaign and ad set data</li>\n-                        <li>• Audience insights and demographics</li>\n-                        <li>• Campaign management capabilities</li>\n-                      </ul>\n-                    </div>\n-                  </div>\n-                </div>\n-\n-                {connectedAccounts.meta ? (\n-                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n-                    <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n-                    <h4 className=\"font-semibold text-green-900\">Meta Ads Connected!</h4>\n-                    <p className=\"text-sm text-green-700 mt-1\">2 ad accounts with 18 campaigns</p>\n-                  </div>\n-                ) : (\n-                  <button\n-                    onClick={handleMetaConnect}\n-                    className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n-                  >\n-                    <ExternalLink className=\"w-5 h-5\" />\n-                    <span>Connect Meta Ads</span>\n-                  </button>\n-                )}\n-              </div>\n-            </div>\n-\n-            {/* Cross-Platform Benefits */}\n-            <div className=\"mt-8 lg:mt-12 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl p-6 lg:p-8\">\n-              <div className=\"text-center\">\n-                <h4 className=\"text-lg font-semibold text-blue-900 mb-3 lg:mb-4\">Cross-Platform Benefits</h4>\n-                <p className=\"text-blue-800 mb-4 lg:mb-6\">\n-                  With both platforms connected, you'll get unified insights and cross-platform optimization recommendations.\n-                </p>\n-                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 lg:gap-6 text-sm\">\n-                  <div className=\"flex items-center space-x-2\">\n-                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n-                    <span>Unified dashboard view</span>\n-                  </div>\n-                  <div className=\"flex items-center space-x-2\">\n-                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n-                    <span>Cross-platform insights</span>\n-                  </div>\n-                  <div className=\"flex items-center space-x-2\">\n-                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n-                    <span>Integrated optimization</span>\n-                  </div>\n-                </div>\n-              </div>\n-            </div>\n-          </div>\n-        );\n-\n-      case 3:\n-        return (\n-          <div className=\"text-center\">\n-            <div className=\"w-20 h-20 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-6 lg:mb-8\">\n-              <CheckCircle className=\"w-10 h-10 text-green-600\" />\n-            </div>\n-            <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Setup Complete!</h2>\n-            <p className=\"text-lg text-gray-600 mb-8 lg:mb-12 max-w-2xl mx-auto\">\n-              Your accounts are now connected and we're analyzing your campaign data. \n-              You can start getting AI-powered insights and optimizations right away.\n-            </p>\n-            \n-            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8 max-w-4xl mx-auto mb-8 lg:mb-12\">\n-              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n-                <div className=\"flex items-center space-x-3 mb-4\">\n-                  <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"none\">\n-                    <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n-                    <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n-                    <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n-                    <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n-                  </svg>\n-                  <div>\n-                    <h3 className=\"font-semibold text-gray-900\">Google Ads</h3>\n-                    <p className=\"text-sm text-green-600\">Connected ✓</p>\n-                  </div>\n-                </div>\n-                <div className=\"text-left space-y-2 text-sm text-gray-600\">\n-                  <p>• 3 accounts connected</p>\n-                  <p>• 24 active campaigns</p>\n-                  <p>• $45,230 monthly spend</p>\n-                </div>\n-              </div>\n-\n-              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n-                <div className=\"flex items-center space-x-3 mb-4\">\n-                  <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n-                    <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n-                  </svg>\n-                  <div>\n-                    <h3 className=\"font-semibold text-gray-900\">Meta Ads</h3>\n-                    <p className=\"text-sm text-green-600\">Connected ✓</p>\n-                  </div>\n-                </div>\n-                <div className=\"text-left space-y-2 text-sm text-gray-600\">\n-                  <p>• 2 ad accounts connected</p>\n-                  <p>• 18 active campaigns</p>\n-                  <p>• $32,180 monthly spend</p>\n-                </div>\n-              </div>\n-            </div>\n-\n-            <button\n-              onClick={onComplete}\n-              className=\"bg-blue-600 text-white py-3 px-8 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center space-x-2 mx-auto\"\n-            >\n-              <span>Start Using AI Marketing Assistant</span>\n-              <ArrowRight className=\"w-5 h-5\" />\n-            </button>\n-          </div>\n-        );\n-\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4 py-8 lg:py-16\">\n-      <div className=\"max-w-6xl w-full\">\n-        {/* Progress Steps */}\n-        <div className=\"flex items-center justify-center mb-12 lg:mb-16\">\n-          {steps.map((step, index) => (\n-            <div key={step.id} className=\"flex items-center\">\n-              <div className={`flex items-center space-x-3 ${\n-                currentStep >= step.id ? 'text-blue-600' : 'text-gray-400'\n-              }`}>\n-                <div className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold ${\n-                  currentStep > step.id \n-                    ? 'bg-blue-600 text-white' \n-                    : currentStep === step.id\n-                    ? 'bg-blue-100 text-blue-600 border-2 border-blue-600'\n-                    : 'bg-gray-200 text-gray-500'\n-                }`}>\n-                  {currentStep > step.id ? (\n-                    <CheckCircle className=\"w-5 h-5\" />\n-                  ) : (\n-                    step.id\n-                  )}\n-                </div>\n-                <div className=\"hidden md:block\">\n-                  <p className=\"font-medium\">{step.title}</p>\n-                  <p className=\"text-sm opacity-75\">{step.description}</p>\n-                </div>\n-              </div>\n-              {index < steps.length - 1 && (\n-                <div className={`w-16 h-0.5 mx-4 ${\n-                  currentStep > step.id ? 'bg-blue-600' : 'bg-gray-300'\n-                }`} />\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-\n-        {/* Step Content */}\n-        <div className=\"bg-white rounded-2xl shadow-xl p-6 lg:p-8 border border-gray-100\">\n-          {renderStepContent()}\n-        </div>\n-\n-        {/* Navigation */}\n-        {currentStep < 3 && (\n-          <div className=\"flex justify-between mt-8 lg:mt-12\">\n-            <button\n-              onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n-              disabled={currentStep === 1}\n-              className=\"px-6 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n-            >\n-              Previous\n-            </button>\n-            <button\n-              onClick={() => setCurrentStep(Math.min(3, currentStep + 1))}\n-              disabled={!canProceed()}\n-              className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n-            >\n-              <span>Next</span>\n-              <ArrowRight className=\"w-4 h-4\" />\n-            </button>\n-          </div>\n-        )}\n-      </div>\n-    </div>\n-  );\n-};\n-\n export default OnboardingFlow;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755615526267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,12 +69,13 @@\n   // Monitor sessionStorage for OAuth state changes\n   useEffect(() => {\n     const checkOAuthState = () => {\n       const storedState = sessionStorage.getItem('googleOAuthState');\n-      console.log('OAuth state check:', storedState);\n+      const localStorageState = localStorage.getItem('googleOAuthState');\n+      console.log('OAuth state check - sessionStorage:', storedState, 'localStorage:', localStorageState);\n       \n       // If we're connecting but no OAuth state exists, something went wrong\n-      if (isConnectingGoogle && !storedState) {\n+      if (isConnectingGoogle && !storedState && !localStorageState) {\n         console.log('OAuth state lost while connecting - resetting');\n         setIsConnectingGoogle(false);\n         setConnectionError('OAuth state was lost. Please try again.');\n       }\n@@ -135,43 +136,71 @@\n   // Manual reset function for OAuth state\n   const resetGoogleOAuthState = () => {\n     setIsConnectingGoogle(false);\n     setConnectionError(null);\n+    // Clear any stored OAuth state\n+    sessionStorage.removeItem('googleOAuthState');\n+    localStorage.removeItem('googleOAuthState');\n     console.log('Manually reset Google OAuth state');\n   };\n \n+  // Cleanup function for OAuth state\n+  const clearOAuthState = () => {\n+    sessionStorage.removeItem('googleOAuthState');\n+    localStorage.removeItem('googleOAuthState');\n+    console.log('Cleared OAuth state');\n+  };\n+\n+  // Cleanup on unmount\n+  useEffect(() => {\n+    return () => {\n+      // Clear OAuth state when component unmounts\n+      clearOAuthState();\n+    };\n+  }, []);\n+\n   const steps = [\n     { id: 1, title: 'Welcome', description: 'Get started with AI Marketing Assistant' },\n     { id: 2, title: 'Connect Accounts', description: 'Link your advertising accounts' },\n     { id: 3, title: 'Setup Complete', description: 'Start optimizing your campaigns' }\n   ];\n \n   const handleGoogleConnect = async () => {\n+    // Prevent multiple simultaneous OAuth flows\n+    if (isConnectingGoogle) {\n+      console.log('OAuth already in progress, ignoring click');\n+      return;\n+    }\n+    \n+    // Generate a unique flow ID for this OAuth attempt\n+    const flowId = `oauth_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n+    console.log('Starting new OAuth flow with ID:', flowId);\n+    \n     setIsConnectingGoogle(true);\n     setConnectionError(null);\n     \n     try {\n       const result = await authService.initiateGoogleOAuth();\n       if (result.success) {\n         // OAuth window opened successfully\n-        console.log('Google OAuth initiated successfully');\n+        console.log(`OAuth flow ${flowId} initiated successfully`);\n         \n         // Set multiple timeouts for better user experience\n         // Short timeout for immediate feedback\n         setTimeout(() => {\n           if (isConnectingGoogle) {\n-            console.log('Short timeout reached - checking if popup is still open');\n+            console.log(`OAuth flow ${flowId} - Short timeout reached - checking if popup is still open`);\n           }\n         }, 10000); // 10 seconds\n         \n         // Medium timeout for popup closure detection\n         setTimeout(() => {\n           if (isConnectingGoogle) {\n-            console.log('Medium timeout reached - checking connection status');\n+            console.log(`OAuth flow ${flowId} - Medium timeout reached - checking connection status`);\n             // Check if we have any OAuth state\n             const storedState = sessionStorage.getItem('googleOAuthState');\n             if (!storedState) {\n-              console.log('No OAuth state found - resetting connection');\n+              console.log(`OAuth flow ${flowId} - No OAuth state found - resetting connection`);\n               setIsConnectingGoogle(false);\n               setConnectionError('OAuth window was closed or connection failed. Please try again.');\n             }\n           }\n@@ -179,21 +208,22 @@\n         \n         // Long timeout as final fallback\n         setTimeout(() => {\n           if (isConnectingGoogle) {\n-            console.log('Long timeout reached - forcing reset');\n+            console.log(`OAuth flow ${flowId} - Long timeout reached - forcing reset`);\n             setIsConnectingGoogle(false);\n             setConnectionError('Connection timeout. Please try again.');\n           }\n         }, 60000); // 60 seconds\n         \n         // The connection status will be updated via message from the popup window\n       } else {\n+        console.log(`OAuth flow ${flowId} failed:`, result.error);\n         setConnectionError(result.error || 'Failed to connect Google Ads');\n         setIsConnectingGoogle(false);\n       }\n     } catch (error) {\n-      console.error('Google OAuth error:', error);\n+      console.error(`OAuth flow ${flowId} error:`, error);\n       setConnectionError('Failed to connect Google Ads. Please try again.');\n       setIsConnectingGoogle(false);\n     }\n   };\n"
                },
                {
                    "date": 1755617106696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,210 +20,51 @@\n   useEffect(() => {\n     const handleMessage = (event: MessageEvent) => {\n       if (event.origin !== window.location.origin) return;\n       \n-      console.log('Received message from popup:', event.data);\n-      \n       if (event.data.type === 'GOOGLE_OAUTH_SUCCESS') {\n         console.log('Google OAuth successful:', event.data);\n         setConnectedAccounts(prev => ({ ...prev, google: true }));\n         setIsConnectingGoogle(false);\n         setConnectionError(null);\n-      } else if (event.data.type === 'GOOGLE_OAUTH_FAILURE') {\n-        console.log('Google OAuth failed:', event.data);\n-        setIsConnectingGoogle(false);\n-        setConnectionError(event.data.error || 'Google OAuth failed. Please try again.');\n       }\n     };\n \n     window.addEventListener('message', handleMessage);\n-    \n-    // Also check for OAuth completion in the current URL (fallback for same-window OAuth)\n-    const checkCurrentUrlForOAuth = () => {\n-      const urlParams = new URLSearchParams(window.location.search);\n-      const code = urlParams.get('code');\n-      const state = urlParams.get('state');\n-      \n-      if (code && state) {\n-        console.log('OAuth callback detected in current window:', { code, state });\n-        // Check if this is a valid OAuth state\n-        const storedState = sessionStorage.getItem('googleOAuthState') || localStorage.getItem('googleOAuthState');\n-        if (storedState === state) {\n-          console.log('OAuth state matches - completing connection');\n-          setConnectedAccounts(prev => ({ ...prev, google: true }));\n-          setIsConnectingGoogle(false);\n-          setConnectionError(null);\n-          // Clear the OAuth parameters from URL\n-          window.history.replaceState({}, document.title, window.location.pathname);\n-        } else {\n-          console.log('OAuth state mismatch in current window');\n-        }\n-      }\n-    };\n-    \n-    // Check immediately\n-    checkCurrentUrlForOAuth();\n-    \n     return () => window.removeEventListener('message', handleMessage);\n   }, []);\n \n-  // Monitor sessionStorage for OAuth state changes\n-  useEffect(() => {\n-    const checkOAuthState = () => {\n-      const storedState = sessionStorage.getItem('googleOAuthState');\n-      const localStorageState = localStorage.getItem('googleOAuthState');\n-      console.log('OAuth state check - sessionStorage:', storedState, 'localStorage:', localStorageState);\n-      \n-      // If we're connecting but no OAuth state exists, something went wrong\n-      if (isConnectingGoogle && !storedState && !localStorageState) {\n-        console.log('OAuth state lost while connecting - resetting');\n-        setIsConnectingGoogle(false);\n-        setConnectionError('OAuth state was lost. Please try again.');\n-      }\n-    };\n-\n-    // Check immediately\n-    checkOAuthState();\n-    \n-    // Set up interval to check periodically\n-    const interval = setInterval(checkOAuthState, 5000); // Check every 5 seconds\n-    \n-    return () => clearInterval(interval);\n-  }, [isConnectingGoogle]);\n-\n-  // Check for OAuth completion in current URL periodically\n-  useEffect(() => {\n-    if (!isConnectingGoogle) return;\n-    \n-    const checkOAuthCompletion = () => {\n-      const urlParams = new URLSearchParams(window.location.search);\n-      const code = urlParams.get('code');\n-      const state = urlParams.get('state');\n-      \n-      if (code && state) {\n-        console.log('Periodic OAuth completion check - found callback:', { code, state });\n-        const storedState = sessionStorage.getItem('googleOAuthState') || localStorage.getItem('googleOAuthState');\n-        if (storedState === state) {\n-          console.log('OAuth completion detected - updating connection status');\n-          setConnectedAccounts(prev => ({ ...prev, google: true }));\n-          setIsConnectingGoogle(false);\n-          setConnectionError(null);\n-          // Clear the OAuth parameters from URL\n-          window.history.replaceState({}, document.title, window.location.pathname);\n-        }\n-      }\n-    };\n-    \n-    // Check immediately\n-    checkOAuthCompletion();\n-    \n-    // Check every 2 seconds while connecting\n-    const interval = setInterval(checkOAuthCompletion, 2000);\n-    \n-    return () => clearInterval(interval);\n-  }, [isConnectingGoogle]);\n-\n-  // Debug: Log current URL on mount\n-  useEffect(() => {\n-    console.log('OnboardingFlow mounted - current URL:', window.location.href);\n-    const urlParams = new URLSearchParams(window.location.search);\n-    const code = urlParams.get('code');\n-    const state = urlParams.get('state');\n-    if (code || state) {\n-      console.log('OAuth parameters found on mount:', { code, state });\n-    }\n-  }, []);\n-\n-  // Manual reset function for OAuth state\n-  const resetGoogleOAuthState = () => {\n-    setIsConnectingGoogle(false);\n-    setConnectionError(null);\n-    // Clear any stored OAuth state\n-    sessionStorage.removeItem('googleOAuthState');\n-    localStorage.removeItem('googleOAuthState');\n-    console.log('Manually reset Google OAuth state');\n-  };\n-\n-  // Cleanup function for OAuth state\n-  const clearOAuthState = () => {\n-    sessionStorage.removeItem('googleOAuthState');\n-    localStorage.removeItem('googleOAuthState');\n-    console.log('Cleared OAuth state');\n-  };\n-\n-  // Cleanup on unmount\n-  useEffect(() => {\n-    return () => {\n-      // Clear OAuth state when component unmounts\n-      clearOAuthState();\n-    };\n-  }, []);\n-\n   const steps = [\n     { id: 1, title: 'Welcome', description: 'Get started with AI Marketing Assistant' },\n     { id: 2, title: 'Connect Accounts', description: 'Link your advertising accounts' },\n     { id: 3, title: 'Setup Complete', description: 'Start optimizing your campaigns' }\n   ];\n \n   const handleGoogleConnect = async () => {\n-    // Prevent multiple simultaneous OAuth flows\n-    if (isConnectingGoogle) {\n-      console.log('OAuth already in progress, ignoring click');\n-      return;\n-    }\n-    \n-    // Generate a unique flow ID for this OAuth attempt\n-    const flowId = `oauth_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n-    console.log('Starting new OAuth flow with ID:', flowId);\n-    \n     setIsConnectingGoogle(true);\n     setConnectionError(null);\n     \n     try {\n       const result = await authService.initiateGoogleOAuth();\n       if (result.success) {\n         // OAuth window opened successfully\n-        console.log(`OAuth flow ${flowId} initiated successfully`);\n+        console.log('Google OAuth initiated successfully');\n         \n-        // Set multiple timeouts for better user experience\n-        // Short timeout for immediate feedback\n+        // Set a timeout in case the popup doesn't send a message\n         setTimeout(() => {\n           if (isConnectingGoogle) {\n-            console.log(`OAuth flow ${flowId} - Short timeout reached - checking if popup is still open`);\n-          }\n-        }, 10000); // 10 seconds\n-        \n-        // Medium timeout for popup closure detection\n-        setTimeout(() => {\n-          if (isConnectingGoogle) {\n-            console.log(`OAuth flow ${flowId} - Medium timeout reached - checking connection status`);\n-            // Check if we have any OAuth state\n-            const storedState = sessionStorage.getItem('googleOAuthState');\n-            if (!storedState) {\n-              console.log(`OAuth flow ${flowId} - No OAuth state found - resetting connection`);\n-              setIsConnectingGoogle(false);\n-              setConnectionError('OAuth window was closed or connection failed. Please try again.');\n-            }\n-          }\n-        }, 30000); // 30 seconds\n-        \n-        // Long timeout as final fallback\n-        setTimeout(() => {\n-          if (isConnectingGoogle) {\n-            console.log(`OAuth flow ${flowId} - Long timeout reached - forcing reset`);\n             setIsConnectingGoogle(false);\n-            setConnectionError('Connection timeout. Please try again.');\n+            setConnectionError('Connection timeout. Please check if the OAuth window opened and try again.');\n           }\n-        }, 60000); // 60 seconds\n+        }, 60000); // 60 second timeout\n         \n         // The connection status will be updated via message from the popup window\n       } else {\n-        console.log(`OAuth flow ${flowId} failed:`, result.error);\n         setConnectionError(result.error || 'Failed to connect Google Ads');\n         setIsConnectingGoogle(false);\n       }\n     } catch (error) {\n-      console.error(`OAuth flow ${flowId} error:`, error);\n+      console.error('Google OAuth error:', error);\n       setConnectionError('Failed to connect Google Ads. Please try again.');\n       setIsConnectingGoogle(false);\n     }\n   };\n@@ -330,26 +171,9 @@\n                 ) : (\n                   <div className=\"space-y-3\">\n                     {connectionError && (\n                       <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n-                        <p className=\"text-sm text-red-800 mb-2\">{connectionError}</p>\n-                        <div className=\"flex space-x-2\">\n-                          <button\n-                            onClick={() => {\n-                              setConnectionError(null);\n-                              setIsConnectingGoogle(false);\n-                            }}\n-                            className=\"text-xs text-red-600 hover:text-red-800 underline\"\n-                          >\n-                            Clear Error\n-                          </button>\n-                          <button\n-                            onClick={resetGoogleOAuthState}\n-                            className=\"text-xs text-blue-600 hover:text-blue-800 underline\"\n-                          >\n-                            Reset Connection\n-                          </button>\n-                        </div>\n+                        <p className=\"text-sm text-red-800\">{connectionError}</p>\n                       </div>\n                     )}\n                     <button\n                       onClick={handleGoogleConnect}\n@@ -367,18 +191,8 @@\n                           <span>Connect Google Ads</span>\n                         </>\n                       )}\n                     </button>\n-                    \n-                    {/* Manual reset button when connecting */}\n-                    {isConnectingGoogle && (\n-                      <button\n-                        onClick={resetGoogleOAuthState}\n-                        className=\"w-full mt-2 bg-gray-500 text-white py-2 px-4 rounded-lg text-sm hover:bg-gray-600 transition-colors\"\n-                      >\n-                        Cancel Connection\n-                      </button>\n-                    )}\n                   </div>\n                 )}\n               </div>\n \n"
                },
                {
                    "date": 1755664852319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,12 @@\n         console.log('Google OAuth successful:', event.data);\n         setConnectedAccounts(prev => ({ ...prev, google: true }));\n         setIsConnectingGoogle(false);\n         setConnectionError(null);\n+      } else if (event.data.type === 'GOOGLE_OAUTH_FAILURE') {\n+        console.log('Google OAuth failed:', event.data);\n+        setIsConnectingGoogle(false);\n+        setConnectionError(event.data.error || 'Google OAuth failed. Please try again.');\n       }\n     };\n \n     window.addEventListener('message', handleMessage);\n"
                },
                {
                    "date": 1755665885523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,10 @@\n \n   // Listen for OAuth success messages from popup window\n   useEffect(() => {\n     const handleMessage = (event: MessageEvent) => {\n+      console.log('Received message from OAuth window:', event.data);\n+      \n       if (event.origin !== window.location.origin) return;\n       \n       if (event.data.type === 'GOOGLE_OAUTH_SUCCESS') {\n         console.log('Google OAuth successful:', event.data);\n@@ -46,30 +48,57 @@\n   const handleGoogleConnect = async () => {\n     setIsConnectingGoogle(true);\n     setConnectionError(null);\n     \n+    console.log('Starting Google OAuth connection...');\n+    \n     try {\n       const result = await authService.initiateGoogleOAuth();\n+      console.log('OAuth initiation result:', result);\n+      \n       if (result.success) {\n         // OAuth window opened successfully\n         console.log('Google OAuth initiated successfully');\n         \n         // Set a timeout in case the popup doesn't send a message\n         setTimeout(() => {\n           if (isConnectingGoogle) {\n+            console.log('OAuth timeout reached, stopping loading state');\n             setIsConnectingGoogle(false);\n-            setConnectionError('Connection timeout. Please check if the OAuth window opened and try again.');\n+            setConnectionError('Connection timeout. Please check if the OAuth window opened and try again. If the window opened, please complete the authorization process.');\n           }\n-        }, 60000); // 60 second timeout\n+        }, 120000); // Increased to 2 minutes for OAuth flow\n         \n         // The connection status will be updated via message from the popup window\n       } else {\n-        setConnectionError(result.error || 'Failed to connect Google Ads');\n+        let errorMessage = result.error || 'Failed to connect Google Ads';\n+        \n+        // Provide specific guidance for common issues\n+        if (errorMessage.includes('popup blocker')) {\n+          errorMessage = 'Popup blocked! Please allow popups for this site and try again.';\n+        } else if (errorMessage.includes('Failed to open OAuth window')) {\n+          errorMessage = 'Unable to open OAuth window. Please check your browser settings and try again.';\n+        }\n+        \n+        console.error('OAuth initiation failed:', errorMessage);\n+        setConnectionError(errorMessage);\n         setIsConnectingGoogle(false);\n       }\n     } catch (error) {\n       console.error('Google OAuth error:', error);\n-      setConnectionError('Failed to connect Google Ads. Please try again.');\n+      let errorMessage = 'Failed to connect Google Ads. Please try again.';\n+      \n+      if (error instanceof Error) {\n+        if (error.message.includes('timeout')) {\n+          errorMessage = 'Connection timeout. The server is taking too long to respond. Please try again.';\n+        } else if (error.message.includes('network')) {\n+          errorMessage = 'Network error. Please check your internet connection and try again.';\n+        } else {\n+          errorMessage = `Connection error: ${error.message}`;\n+        }\n+      }\n+      \n+      setConnectionError(errorMessage);\n       setIsConnectingGoogle(false);\n     }\n   };\n \n@@ -175,9 +204,15 @@\n                 ) : (\n                   <div className=\"space-y-3\">\n                     {connectionError && (\n                       <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n-                        <p className=\"text-sm text-red-800\">{connectionError}</p>\n+                        <p className=\"text-sm text-red-800 mb-2\">{connectionError}</p>\n+                        <button\n+                          onClick={handleGoogleConnect}\n+                          className=\"text-xs bg-red-100 text-red-700 px-3 py-1 rounded hover:bg-red-200 transition-colors\"\n+                        >\n+                          Try Again\n+                        </button>\n                       </div>\n                     )}\n                     <button\n                       onClick={handleGoogleConnect}\n@@ -186,17 +221,34 @@\n                     >\n                       {isConnectingGoogle ? (\n                         <>\n                           <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n-                          <span>Connecting...</span>\n+                          <span>Opening OAuth Window...</span>\n                         </>\n                       ) : (\n                         <>\n                           <ExternalLink className=\"w-5 h-5\" />\n                           <span>Connect Google Ads</span>\n                         </>\n                       )}\n                     </button>\n+                    \n+                    {isConnectingGoogle && (\n+                      <div className=\"text-center mt-3\">\n+                        <p className=\"text-sm text-blue-600\">\n+                          A new window should open for Google authorization. \n+                          Please complete the process in that window.\n+                        </p>\n+                        <div className=\"mt-2 p-3 bg-blue-50 rounded-lg border border-blue-200\">\n+                          <p className=\"text-xs text-blue-700\">\n+                            <strong>If no window opened:</strong> Check your popup blocker settings and try again.\n+                          </p>\n+                          <p className=\"text-xs text-blue-700 mt-1\">\n+                            <strong>If the window opened:</strong> Complete the Google authorization and return here.\n+                          </p>\n+                        </div>\n+                      </div>\n+                    )}\n                   </div>\n                 )}\n               </div>\n \n"
                },
                {
                    "date": 1755666302212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,17 @@\n         setConnectionError(null);\n       } else if (event.data.type === 'GOOGLE_OAUTH_FAILURE') {\n         console.log('Google OAuth failed:', event.data);\n         setIsConnectingGoogle(false);\n-        setConnectionError(event.data.error || 'Google OAuth failed. Please try again.');\n+        \n+        let errorMessage = event.data.error || 'Google OAuth failed. Please try again.';\n+        \n+        // Handle scope-related errors specifically\n+        if (errorMessage.includes('scope changed') || errorMessage.includes('Scope has changed')) {\n+          errorMessage = 'Google OAuth scope changed (this is normal). Please try connecting again.';\n+        }\n+        \n+        setConnectionError(errorMessage);\n       }\n     };\n \n     window.addEventListener('message', handleMessage);\n@@ -205,8 +213,21 @@\n                   <div className=\"space-y-3\">\n                     {connectionError && (\n                       <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n                         <p className=\"text-sm text-red-800 mb-2\">{connectionError}</p>\n+                        \n+                        {/* Show specific guidance for scope errors */}\n+                        {connectionError.includes('scope changed') && (\n+                          <div className=\"mb-2 p-2 bg-blue-50 rounded border border-blue-200\">\n+                            <p className=\"text-xs text-blue-700\">\n+                              <strong>Why this happens:</strong> Google automatically adds security scopes during OAuth.\n+                            </p>\n+                            <p className=\"text-xs text-blue-700 mt-1\">\n+                              <strong>Solution:</strong> This is completely normal and secure. Just try connecting again.\n+                            </p>\n+                          </div>\n+                        )}\n+                        \n                         <button\n                           onClick={handleGoogleConnect}\n                           className=\"text-xs bg-red-100 text-red-700 px-3 py-1 rounded hover:bg-red-200 transition-colors\"\n                         >\n@@ -244,8 +265,11 @@\n                           </p>\n                           <p className=\"text-xs text-blue-700 mt-1\">\n                             <strong>If the window opened:</strong> Complete the Google authorization and return here.\n                           </p>\n+                          <p className=\"text-xs text-blue-700 mt-1\">\n+                            <strong>Note:</strong> Google may add additional scopes automatically - this is normal and secure.\n+                          </p>\n                         </div>\n                       </div>\n                     )}\n                   </div>\n"
                },
                {
                    "date": 1755668174476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n     }, 2000);\n   };\n \n   const canProceed = () => {\n-    if (currentStep === 2) return connectedAccounts.google && connectedAccounts.meta;\n+    if (currentStep === 2) return connectedAccounts.google; // Only require Google Ads, Meta Ads is optional\n     return true;\n   };\n \n   const renderStepContent = () => {\n@@ -166,9 +166,9 @@\n           <div className=\"max-w-6xl mx-auto\">\n             <div className=\"text-center mb-8 lg:mb-12\">\n               <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Connect Your Advertising Accounts</h2>\n               <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n-                Connect both Google Ads and Meta Ads accounts for comprehensive cross-platform optimization and unified insights.\n+                Connect your Google Ads account to get started. Meta Ads is optional and can be added later for cross-platform insights.\n               </p>\n             </div>\n \n             <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12\">\n@@ -283,11 +283,11 @@\n                     <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n                       <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                     </svg>\n                   </div>\n-                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Meta Ads</h3>\n+                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Meta Ads (Optional)</h3>\n                   <p className=\"text-gray-600 text-sm\">\n-                    Link your Meta (Facebook/Instagram) advertising account for comprehensive insights.\n+                    Link your Meta (Facebook/Instagram) advertising account for comprehensive cross-platform insights.\n                   </p>\n                 </div>\n \n                 <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n@@ -311,40 +311,81 @@\n                     <h4 className=\"font-semibold text-green-900\">Meta Ads Connected!</h4>\n                     <p className=\"text-sm text-green-700 mt-1\">2 ad accounts with 18 campaigns</p>\n                   </div>\n                 ) : (\n-                  <button\n-                    onClick={handleMetaConnect}\n-                    className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n-                  >\n-                    <ExternalLink className=\"w-5 h-5\" />\n-                    <span>Connect Meta Ads</span>\n-                  </button>\n+                  <div className=\"space-y-3\">\n+                    <button\n+                      onClick={handleMetaConnect}\n+                      className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n+                    >\n+                      <ExternalLink className=\"w-5 h-5\" />\n+                      <span>Connect Meta Ads</span>\n+                    </button>\n+                    \n+                    <button\n+                      onClick={() => setConnectedAccounts(prev => ({ ...prev, meta: true }))}\n+                      className=\"w-full bg-gray-100 text-gray-600 py-2 px-4 rounded-lg font-medium hover:bg-gray-200 transition-colors text-sm\"\n+                    >\n+                      Skip Meta Ads for now\n+                    </button>\n+                  </div>\n                 )}\n               </div>\n             </div>\n \n             {/* Cross-Platform Benefits */}\n             <div className=\"mt-8 lg:mt-12 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl p-6 lg:p-8\">\n               <div className=\"text-center\">\n-                <h4 className=\"text-lg font-semibold text-blue-900 mb-3 lg:mb-4\">Cross-Platform Benefits</h4>\n+                <h4 className=\"text-lg font-semibold text-blue-900 mb-3 lg:mb-4\">\n+                  {connectedAccounts.meta ? 'Cross-Platform Benefits' : 'Platform Benefits'}\n+                </h4>\n                 <p className=\"text-blue-800 mb-4 lg:mb-6\">\n-                  With both platforms connected, you'll get unified insights and cross-platform optimization recommendations.\n+                  {connectedAccounts.meta \n+                    ? 'With both platforms connected, you\\'ll get unified insights and cross-platform optimization recommendations.'\n+                    : 'With Google Ads connected, you\\'ll get comprehensive insights and AI-powered optimization recommendations. You can add Meta Ads later for cross-platform benefits.'\n+                  }\n                 </p>\n                 <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 lg:gap-6 text-sm\">\n-                  <div className=\"flex items-center space-x-2\">\n-                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n-                    <span>Unified dashboard view</span>\n+                  {connectedAccounts.meta ? (\n+                    <>\n+                      <div className=\"flex items-center space-x-2\">\n+                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                        <span>Unified dashboard view</span>\n+                      </div>\n+                      <div className=\"flex items-center space-x-2\">\n+                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                        <span>Cross-platform insights</span>\n+                      </div>\n+                      <div className=\"flex items-center space-x-2\">\n+                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                        <span>Integrated optimization</span>\n+                      </div>\n+                    </>\n+                  ) : (\n+                    <>\n+                      <div className=\"flex items-center space-x-2\">\n+                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                        <span>Google Ads optimization</span>\n+                      </div>\n+                      <div className=\"flex items-center space-x-2\">\n+                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                        <span>AI-powered insights</span>\n+                      </div>\n+                      <div className=\"flex items-center space-x-2\">\n+                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                        <span>Campaign analysis</span>\n+                      </div>\n+                    </>\n+                  )}\n+                </div>\n+                \n+                {!connectedAccounts.meta && (\n+                  <div className=\"mt-4 p-3 bg-blue-100 rounded-lg border border-blue-300\">\n+                    <p className=\"text-sm text-blue-800\">\n+                      <strong>Tip:</strong> You can always connect Meta Ads later from your dashboard for cross-platform benefits.\n+                    </p>\n                   </div>\n-                  <div className=\"flex items-center space-x-2\">\n-                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n-                    <span>Cross-platform insights</span>\n-                  </div>\n-                  <div className=\"flex items-center space-x-2\">\n-                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n-                    <span>Integrated optimization</span>\n-                  </div>\n-                </div>\n+                )}\n               </div>\n             </div>\n           </div>\n         );\n@@ -377,26 +418,40 @@\n                 </div>\n                 <div className=\"text-left space-y-2 text-sm text-gray-600\">\n                   <p>• 3 accounts connected</p>\n                   <p>• 24 active campaigns</p>\n-                  <p>• $45,230 monthly spend</p>\n+                  <p>• $45,200 monthly spend</p>\n                 </div>\n               </div>\n-\n+              \n               <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n                 <div className=\"flex items-center space-x-3 mb-4\">\n                   <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n                     <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                   </svg>\n                   <div>\n                     <h3 className=\"font-semibold text-gray-900\">Meta Ads</h3>\n-                    <p className=\"text-sm text-green-600\">Connected ✓</p>\n+                    {connectedAccounts.meta ? (\n+                      <p className=\"text-sm text-green-600\">Connected ✓</p>\n+                    ) : (\n+                      <p className=\"text-sm text-gray-500\">Not Connected</p>\n+                    )}\n                   </div>\n                 </div>\n                 <div className=\"text-left space-y-2 text-sm text-gray-600\">\n-                  <p>• 2 ad accounts connected</p>\n-                  <p>• 18 active campaigns</p>\n-                  <p>• $32,180 monthly spend</p>\n+                  {connectedAccounts.meta ? (\n+                    <>\n+                      <p>• 2 ad accounts connected</p>\n+                      <p>• 18 active campaigns</p>\n+                      <p>• $32,180 monthly spend</p>\n+                    </>\n+                  ) : (\n+                    <>\n+                      <p>• Not connected yet</p>\n+                      <p>• Can be added later</p>\n+                      <p>• Optional for now</p>\n+                    </>\n+                  )}\n                 </div>\n               </div>\n             </div>\n \n"
                },
                {
                    "date": 1755670382314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,12 +14,14 @@\n   });\n   const [isConnectingGoogle, setIsConnectingGoogle] = useState(false);\n   const [isConnectingMeta, setIsConnectingMeta] = useState(false);\n   const [connectionError, setConnectionError] = useState<string | null>(null);\n+  const [googleAdsAccountSummary, setGoogleAdsAccountSummary] = useState<any>(null);\n+  const [isLoadingAccountSummary, setIsLoadingAccountSummary] = useState(false);\n \n   // Listen for OAuth success messages from popup window\n   useEffect(() => {\n-    const handleMessage = (event: MessageEvent) => {\n+    const handleMessage = async (event: MessageEvent) => {\n       console.log('Received message from OAuth window:', event.data);\n       \n       if (event.origin !== window.location.origin) return;\n       \n@@ -27,8 +29,27 @@\n         console.log('Google OAuth successful:', event.data);\n         setConnectedAccounts(prev => ({ ...prev, google: true }));\n         setIsConnectingGoogle(false);\n         setConnectionError(null);\n+        \n+        // Fetch Google Ads account summary\n+        try {\n+          console.log('Fetching Google Ads account summary...');\n+          setIsLoadingAccountSummary(true);\n+          const summaryResult = await authService.getGoogleAdsAccountSummary();\n+          if (summaryResult.success) {\n+            console.log('Account summary fetched successfully:', summaryResult.data);\n+            setGoogleAdsAccountSummary(summaryResult.data);\n+          } else {\n+            console.error('Failed to fetch account summary:', summaryResult.error);\n+            // Don't show error to user, just use placeholder data\n+          }\n+        } catch (error) {\n+          console.error('Error fetching account summary:', error);\n+          // Don't show error to user, just use placeholder data\n+        } finally {\n+          setIsLoadingAccountSummary(false);\n+        }\n       } else if (event.data.type === 'GOOGLE_OAUTH_FAILURE') {\n         console.log('Google OAuth failed:', event.data);\n         setIsConnectingGoogle(false);\n         \n@@ -206,9 +227,48 @@\n                 {connectedAccounts.google ? (\n                   <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n                     <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n                     <h4 className=\"font-semibold text-green-900\">Google Ads Connected!</h4>\n-                    <p className=\"text-sm text-green-700 mt-1\">3 active accounts with 24 campaigns</p>\n+                    {isLoadingAccountSummary ? (\n+                      <div className=\"text-sm text-green-700 mt-2\">\n+                        <div className=\"flex items-center justify-center space-x-2\">\n+                          <div className=\"w-4 h-4 border-2 border-green-600 border-t-transparent rounded-full animate-spin\"></div>\n+                          <span>Loading account details...</span>\n+                        </div>\n+                      </div>\n+                    ) : googleAdsAccountSummary ? (\n+                      <div className=\"text-sm text-green-700 mt-2\">\n+                        <p>{googleAdsAccountSummary.total_accounts || 0} active accounts</p>\n+                        <p>{googleAdsAccountSummary.total_campaigns || 0} active campaigns</p>\n+                        {googleAdsAccountSummary.total_spend && (\n+                          <p>${(googleAdsAccountSummary.total_spend / 1000000).toFixed(2)}M monthly spend</p>\n+                        )}\n+                      </div>\n+                    ) : (\n+                      <p className=\"text-sm text-green-700 mt-1\">Account details available</p>\n+                    )}\n+                    \n+                    {/* Add retry button if account summary failed to load */}\n+                    {!isLoadingAccountSummary && !googleAdsAccountSummary && (\n+                      <button\n+                        onClick={async () => {\n+                          try {\n+                            setIsLoadingAccountSummary(true);\n+                            const summaryResult = await authService.getGoogleAdsAccountSummary();\n+                            if (summaryResult.success) {\n+                              setGoogleAdsAccountSummary(summaryResult.data);\n+                            }\n+                          } catch (error) {\n+                            console.error('Retry failed:', error);\n+                          } finally {\n+                            setIsLoadingAccountSummary(false);\n+                          }\n+                        }}\n+                        className=\"mt-2 text-xs bg-green-100 text-green-700 px-3 py-1 rounded hover:bg-green-200 transition-colors\"\n+                      >\n+                        Refresh Account Data\n+                      </button>\n+                    )}\n                   </div>\n                 ) : (\n                   <div className=\"space-y-3\">\n                     {connectionError && (\n@@ -416,11 +476,25 @@\n                     <p className=\"text-sm text-green-600\">Connected ✓</p>\n                   </div>\n                 </div>\n                 <div className=\"text-left space-y-2 text-sm text-gray-600\">\n-                  <p>• 3 accounts connected</p>\n-                  <p>• 24 active campaigns</p>\n-                  <p>• $45,200 monthly spend</p>\n+                  {googleAdsAccountSummary ? (\n+                    <>\n+                      <p>• {googleAdsAccountSummary.total_accounts || 0} accounts connected</p>\n+                      <p>• {googleAdsAccountSummary.total_campaigns || 0} active campaigns</p>\n+                      {googleAdsAccountSummary.total_spend ? (\n+                        <p>• ${(googleAdsAccountSummary.total_spend / 1000000).toFixed(2)}M monthly spend</p>\n+                      ) : (\n+                        <p>• Spend data available</p>\n+                      )}\n+                    </>\n+                  ) : (\n+                    <>\n+                      <p>• Account details loading...</p>\n+                      <p>• Campaign data available</p>\n+                      <p>• Performance insights ready</p>\n+                    </>\n+                  )}\n                 </div>\n               </div>\n               \n               <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n"
                },
                {
                    "date": 1755670728621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,25 @@\n             console.log('Account summary fetched successfully:', summaryResult.data);\n             setGoogleAdsAccountSummary(summaryResult.data);\n           } else {\n             console.error('Failed to fetch account summary:', summaryResult.error);\n+            // Check if it's a token issue and try to refresh\n+            if (summaryResult.error?.includes('401') || summaryResult.error?.includes('unauthorized')) {\n+              console.log('Token may be expired, attempting refresh...');\n+              try {\n+                const refreshResult = await authService.refreshAccessToken();\n+                if (refreshResult.success) {\n+                  // Retry fetching account summary with new token\n+                  const retryResult = await authService.getGoogleAdsAccountSummary();\n+                  if (retryResult.success) {\n+                    setGoogleAdsAccountSummary(retryResult.data);\n+                    return;\n+                  }\n+                }\n+              } catch (refreshError) {\n+                console.error('Token refresh failed:', refreshError);\n+              }\n+            }\n             // Don't show error to user, just use placeholder data\n           }\n         } catch (error) {\n           console.error('Error fetching account summary:', error);\n"
                },
                {
                    "date": 1755671351050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,10 @@\n   const [isConnectingMeta, setIsConnectingMeta] = useState(false);\n   const [connectionError, setConnectionError] = useState<string | null>(null);\n   const [googleAdsAccountSummary, setGoogleAdsAccountSummary] = useState<any>(null);\n   const [isLoadingAccountSummary, setIsLoadingAccountSummary] = useState(false);\n+  const [isSyncingGoogleAds, setIsSyncingGoogleAds] = useState(false);\n+  const [syncProgress, setSyncProgress] = useState<string>('');\n \n   // Listen for OAuth success messages from popup window\n   useEffect(() => {\n     const handleMessage = async (event: MessageEvent) => {\n@@ -30,42 +32,65 @@\n         setConnectedAccounts(prev => ({ ...prev, google: true }));\n         setIsConnectingGoogle(false);\n         setConnectionError(null);\n         \n-        // Fetch Google Ads account summary\n+        // Start Google Ads data sync\n         try {\n-          console.log('Fetching Google Ads account summary...');\n-          setIsLoadingAccountSummary(true);\n-          const summaryResult = await authService.getGoogleAdsAccountSummary();\n-          if (summaryResult.success) {\n-            console.log('Account summary fetched successfully:', summaryResult.data);\n-            setGoogleAdsAccountSummary(summaryResult.data);\n-          } else {\n-            console.error('Failed to fetch account summary:', summaryResult.error);\n-            // Check if it's a token issue and try to refresh\n-            if (summaryResult.error?.includes('401') || summaryResult.error?.includes('unauthorized')) {\n-              console.log('Token may be expired, attempting refresh...');\n-              try {\n-                const refreshResult = await authService.refreshAccessToken();\n-                if (refreshResult.success) {\n-                  // Retry fetching account summary with new token\n-                  const retryResult = await authService.getGoogleAdsAccountSummary();\n-                  if (retryResult.success) {\n-                    setGoogleAdsAccountSummary(retryResult.data);\n-                    return;\n+          console.log('Starting Google Ads data sync...');\n+          setIsSyncingGoogleAds(true);\n+          setSyncProgress('Initializing data sync...');\n+          \n+          const syncResult = await authService.syncGoogleAdsData('weekly', 1);\n+          \n+          if (syncResult.success) {\n+            console.log('Google Ads data sync completed successfully');\n+            setSyncProgress('Data sync completed! Fetching account summary...');\n+            \n+            // Now fetch the account summary with fresh data\n+            try {\n+              console.log('Fetching Google Ads account summary...');\n+              setIsLoadingAccountSummary(true);\n+              const summaryResult = await authService.getGoogleAdsAccountSummary();\n+              if (summaryResult.success) {\n+                console.log('Account summary fetched successfully:', summaryResult.data);\n+                setGoogleAdsAccountSummary(summaryResult.data);\n+              } else {\n+                console.error('Failed to fetch account summary:', summaryResult.error);\n+                // Check if it's a token issue and try to refresh\n+                if (summaryResult.error?.includes('401') || summaryResult.error?.includes('unauthorized')) {\n+                  console.log('Token may be expired, attempting refresh...');\n+                  try {\n+                    const refreshResult = await authService.refreshAccessToken();\n+                    if (refreshResult.success) {\n+                      // Retry fetching account summary with new token\n+                      const retryResult = await authService.getGoogleAdsAccountSummary();\n+                      if (retryResult.success) {\n+                        setGoogleAdsAccountSummary(retryResult.data);\n+                        return;\n+                      }\n+                    }\n+                  } catch (refreshError) {\n+                    console.error('Token refresh failed:', refreshError);\n                   }\n                 }\n-              } catch (refreshError) {\n-                console.error('Token refresh failed:', refreshError);\n+                // Don't show error to user, just use placeholder data\n               }\n+            } catch (error) {\n+              console.error('Error fetching account summary:', error);\n+              // Don't show error to user, just use placeholder data\n+            } finally {\n+              setIsLoadingAccountSummary(false);\n             }\n-            // Don't show error to user, just use placeholder data\n+          } else {\n+            console.error('Google Ads data sync failed:', syncResult.error);\n+            setConnectionError(`Data sync failed: ${syncResult.error}`);\n           }\n         } catch (error) {\n-          console.error('Error fetching account summary:', error);\n-          // Don't show error to user, just use placeholder data\n+          console.error('Error during Google Ads data sync:', error);\n+          setConnectionError('Failed to sync Google Ads data. Please try again.');\n         } finally {\n-          setIsLoadingAccountSummary(false);\n+          setIsSyncingGoogleAds(false);\n+          setSyncProgress('');\n         }\n       } else if (event.data.type === 'GOOGLE_OAUTH_FAILURE') {\n         console.log('Google OAuth failed:', event.data);\n         setIsConnectingGoogle(false);\n@@ -244,10 +269,19 @@\n                 {connectedAccounts.google ? (\n                   <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n                     <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n                     <h4 className=\"font-semibold text-green-900\">Google Ads Connected!</h4>\n-                    {isLoadingAccountSummary ? (\n+                    \n+                    {isSyncingGoogleAds ? (\n                       <div className=\"text-sm text-green-700 mt-2\">\n+                        <div className=\"flex items-center justify-center space-x-2 mb-2\">\n+                          <div className=\"w-4 h-4 border-2 border-green-600 border-t-transparent rounded-full animate-spin\"></div>\n+                          <span>Syncing data...</span>\n+                        </div>\n+                        <p className=\"text-xs text-green-600\">{syncProgress}</p>\n+                      </div>\n+                    ) : isLoadingAccountSummary ? (\n+                      <div className=\"text-sm text-green-700 mt-2\">\n                         <div className=\"flex items-center justify-center space-x-2\">\n                           <div className=\"w-4 h-4 border-2 border-green-600 border-t-transparent rounded-full animate-spin\"></div>\n                           <span>Loading account details...</span>\n                         </div>\n@@ -264,9 +298,9 @@\n                       <p className=\"text-sm text-green-700 mt-1\">Account details available</p>\n                     )}\n                     \n                     {/* Add retry button if account summary failed to load */}\n-                    {!isLoadingAccountSummary && !googleAdsAccountSummary && (\n+                    {!isSyncingGoogleAds && !isLoadingAccountSummary && !googleAdsAccountSummary && (\n                       <button\n                         onClick={async () => {\n                           try {\n                             setIsLoadingAccountSummary(true);\n@@ -284,8 +318,42 @@\n                       >\n                         Refresh Account Data\n                       </button>\n                     )}\n+                    \n+                    {/* Manual sync button for refreshing data */}\n+                    {!isSyncingGoogleAds && googleAdsAccountSummary && (\n+                      <button\n+                        onClick={async () => {\n+                          try {\n+                            setIsSyncingGoogleAds(true);\n+                            setSyncProgress('Refreshing data...');\n+                            \n+                            const syncResult = await authService.syncGoogleAdsData('weekly', 1);\n+                            if (syncResult.success) {\n+                              setSyncProgress('Data refreshed! Updating summary...');\n+                              \n+                              // Fetch updated account summary\n+                              const summaryResult = await authService.getGoogleAdsAccountSummary();\n+                              if (summaryResult.success) {\n+                                setGoogleAdsAccountSummary(summaryResult.data);\n+                              }\n+                            } else {\n+                              setConnectionError(`Data refresh failed: ${syncResult.error}`);\n+                            }\n+                          } catch (error) {\n+                            console.error('Manual sync failed:', error);\n+                            setConnectionError('Failed to refresh data. Please try again.');\n+                          } finally {\n+                            setIsSyncingGoogleAds(false);\n+                            setSyncProgress('');\n+                          }\n+                        }}\n+                        className=\"mt-2 text-xs bg-blue-100 text-blue-700 px-3 py-1 rounded hover:bg-blue-200 transition-colors\"\n+                      >\n+                        Refresh Data\n+                      </button>\n+                    )}\n                   </div>\n                 ) : (\n                   <div className=\"space-y-3\">\n                     {connectionError && (\n@@ -408,8 +476,27 @@\n                 )}\n               </div>\n             </div>\n \n+            {/* Sync Progress Indicator */}\n+            {isSyncingGoogleAds && (\n+              <div className=\"mt-6 bg-blue-50 border border-blue-200 rounded-xl p-6\">\n+                <div className=\"text-center\">\n+                  <div className=\"flex items-center justify-center space-x-3 mb-3\">\n+                    <div className=\"w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n+                    <h4 className=\"text-lg font-semibold text-blue-900\">Syncing Google Ads Data</h4>\n+                  </div>\n+                  <p className=\"text-blue-700 mb-4\">{syncProgress}</p>\n+                  <div className=\"w-full bg-blue-200 rounded-full h-2\">\n+                    <div className=\"bg-blue-600 h-2 rounded-full animate-pulse\" style={{ width: '60%' }}></div>\n+                  </div>\n+                  <p className=\"text-sm text-blue-600 mt-2\">\n+                    This may take a few minutes depending on your data size\n+                  </p>\n+                </div>\n+              </div>\n+            )}\n+\n             {/* Cross-Platform Benefits */}\n             <div className=\"mt-8 lg:mt-12 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl p-6 lg:p-8\">\n               <div className=\"text-center\">\n                 <h4 className=\"text-lg font-semibold text-blue-900 mb-3 lg:mb-4\">\n@@ -493,10 +580,16 @@\n                     <p className=\"text-sm text-green-600\">Connected ✓</p>\n                   </div>\n                 </div>\n                 <div className=\"text-left space-y-2 text-sm text-gray-600\">\n-                  {googleAdsAccountSummary ? (\n+                  {isSyncingGoogleAds ? (\n                     <>\n+                      <p>• Syncing data...</p>\n+                      <p>• Loading account information</p>\n+                      <p>• Preparing insights</p>\n+                    </>\n+                  ) : googleAdsAccountSummary ? (\n+                    <>\n                       <p>• {googleAdsAccountSummary.total_accounts || 0} accounts connected</p>\n                       <p>• {googleAdsAccountSummary.total_campaigns || 0} active campaigns</p>\n                       {googleAdsAccountSummary.total_spend ? (\n                         <p>• ${(googleAdsAccountSummary.total_spend / 1000000).toFixed(2)}M monthly spend</p>\n"
                },
                {
                    "date": 1755673594191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,805 @@\n+import React, { useState, useEffect } from 'react';\n+import { CheckCircle, ExternalLink, AlertCircle, ArrowRight, Shield, Zap } from 'lucide-react';\n+import authService from '../services/authService'; // Added import for authService\n+\n+interface OnboardingFlowProps {\n+  onComplete: () => void;\n+}\n+\n+const OnboardingFlow: React.FC<OnboardingFlowProps> = ({ onComplete }) => {\n+  const [currentStep, setCurrentStep] = useState(1);\n+  const [connectedAccounts, setConnectedAccounts] = useState({\n+    google: false,\n+    meta: false\n+  });\n+  const [isConnectingGoogle, setIsConnectingGoogle] = useState(false);\n+  const [isConnectingMeta, setIsConnectingMeta] = useState(false);\n+  const [connectionError, setConnectionError] = useState<string | null>(null);\n+  const [googleAdsAccountSummary, setGoogleAdsAccountSummary] = useState<any>(null);\n+  const [isLoadingAccountSummary, setIsLoadingAccountSummary] = useState(false);\n+  const [isSyncingGoogleAds, setIsSyncingGoogleAds] = useState(false);\n+  const [syncProgress, setSyncProgress] = useState<string>('');\n+\n+  // Listen for OAuth success messages from popup window\n+  useEffect(() => {\n+    const handleMessage = async (event: MessageEvent) => {\n+      console.log('Received message from OAuth window:', event.data);\n+      \n+      if (event.origin !== window.location.origin) return;\n+      \n+      if (event.data.type === 'GOOGLE_OAUTH_SUCCESS') {\n+        console.log('Google OAuth successful:', event.data);\n+        setConnectedAccounts(prev => ({ ...prev, google: true }));\n+        setIsConnectingGoogle(false);\n+        setConnectionError(null);\n+        \n+        // Store the OAuth connection status to avoid repeated flows\n+        authService.setGoogleOAuthConnected(true);\n+        \n+        // Start Google Ads data sync\n+        try {\n+          console.log('Starting Google Ads data sync...');\n+          setIsSyncingGoogleAds(true);\n+          setSyncProgress('Initializing data sync...');\n+          \n+          const syncResult = await authService.syncGoogleAdsData('weekly', 1);\n+          \n+          if (syncResult.success) {\n+            console.log('Google Ads data sync completed successfully');\n+            setSyncProgress('Data sync completed! Fetching account summary...');\n+            \n+            // Now fetch the account summary with fresh data\n+            try {\n+              console.log('Fetching Google Ads account summary...');\n+              setIsLoadingAccountSummary(true);\n+              const summaryResult = await authService.getGoogleAdsAccountSummary();\n+              if (summaryResult.success) {\n+                console.log('Account summary fetched successfully:', summaryResult.data);\n+                setGoogleAdsAccountSummary(summaryResult.data);\n+              } else {\n+                console.error('Failed to fetch account summary:', summaryResult.error);\n+                // Check if it's a token issue and try to refresh\n+                if (summaryResult.error?.includes('401') || summaryResult.error?.includes('unauthorized')) {\n+                  console.log('Token may be expired, attempting refresh...');\n+                  try {\n+                    const refreshResult = await authService.refreshAccessToken();\n+                    if (refreshResult.success) {\n+                      // Retry fetching account summary with new token\n+                      const retryResult = await authService.getGoogleAdsAccountSummary();\n+                      if (retryResult.success) {\n+                        setGoogleAdsAccountSummary(retryResult.data);\n+                        return;\n+                      }\n+                    }\n+                  } catch (refreshError) {\n+                    console.error('Token refresh failed:', refreshError);\n+                  }\n+                }\n+                // Don't show error to user, just use placeholder data\n+              }\n+            } catch (error) {\n+              console.error('Error fetching account summary:', error);\n+              // Don't show error to user, just use placeholder data\n+            } finally {\n+              setIsLoadingAccountSummary(false);\n+            }\n+          } else {\n+            console.error('Google Ads data sync failed:', syncResult.error);\n+            setConnectionError(`Data sync failed: ${syncResult.error}`);\n+          }\n+        } catch (error) {\n+          console.error('Error during Google Ads data sync:', error);\n+          setConnectionError('Failed to sync Google Ads data. Please try again.');\n+        } finally {\n+          setIsSyncingGoogleAds(false);\n+          setSyncProgress('');\n+        }\n+      } else if (event.data.type === 'GOOGLE_OAUTH_FAILURE') {\n+        console.log('Google OAuth failed:', event.data);\n+        setIsConnectingGoogle(false);\n+        \n+        let errorMessage = event.data.error || 'Google OAuth failed. Please try again.';\n+        \n+        // Handle scope-related errors specifically\n+        if (errorMessage.includes('scope changed') || errorMessage.includes('Scope has changed')) {\n+          errorMessage = 'Google OAuth scope changed (this is normal). Please try connecting again.';\n+        }\n+        \n+        setConnectionError(errorMessage);\n+      }\n+    };\n+\n+    window.addEventListener('message', handleMessage);\n+    return () => window.removeEventListener('message', handleMessage);\n+  }, []);\n+\n+  // Check if Google OAuth is already connected on component load\n+  useEffect(() => {\n+    const checkExistingConnection = async () => {\n+      if (authService.isGoogleOAuthConnected()) {\n+        console.log('Google OAuth already connected, checking connection status...');\n+        setConnectedAccounts(prev => ({ ...prev, google: true }));\n+        \n+        // Check if the connection is still valid\n+        try {\n+          const statusResult = await authService.checkGoogleOAuthStatus();\n+          if (statusResult.success && statusResult.connected) {\n+            console.log('Google OAuth connection still valid, starting data sync...');\n+            \n+            // Start data sync automatically\n+            try {\n+              setIsSyncingGoogleAds(true);\n+              setSyncProgress('Checking for new data...');\n+              \n+              const syncResult = await authService.syncGoogleAdsData('weekly', 1);\n+              \n+              if (syncResult.success) {\n+                console.log('Data sync completed, fetching account summary...');\n+                setSyncProgress('Data sync completed! Fetching account summary...');\n+                \n+                // Fetch account summary\n+                const summaryResult = await authService.getGoogleAdsAccountSummary();\n+                if (summaryResult.success) {\n+                  setGoogleAdsAccountSummary(summaryResult.data);\n+                }\n+              } else {\n+                console.error('Data sync failed:', syncResult.error);\n+                // Connection might be invalid, clear the stored status\n+                authService.clearGoogleOAuthStatus();\n+                setConnectedAccounts(prev => ({ ...prev, google: false }));\n+              }\n+            } catch (error) {\n+              console.error('Error during automatic data sync:', error);\n+              // Connection might be invalid, clear the stored status\n+              authService.clearGoogleOAuthStatus();\n+              setConnectedAccounts(prev => ({ ...prev, google: false }));\n+            } finally {\n+              setIsSyncingGoogleAds(false);\n+              setSyncProgress('');\n+            }\n+          } else {\n+            console.log('Google OAuth connection no longer valid, clearing status...');\n+            authService.clearGoogleOAuthStatus();\n+            setConnectedAccounts(prev => ({ ...prev, google: false }));\n+          }\n+        } catch (error) {\n+          console.error('Error checking Google OAuth status:', error);\n+          // Clear the stored status on error\n+          authService.clearGoogleOAuthStatus();\n+          setConnectedAccounts(prev => ({ ...prev, google: false }));\n+        }\n+      }\n+    };\n+\n+    checkExistingConnection();\n+  }, []);\n+\n+  const steps = [\n+    { id: 1, title: 'Welcome', description: 'Get started with AI Marketing Assistant' },\n+    { id: 2, title: 'Connect Accounts', description: 'Link your advertising accounts' },\n+    { id: 3, title: 'Setup Complete', description: 'Start optimizing your campaigns' }\n+  ];\n+\n+  const handleGoogleConnect = async () => {\n+    setIsConnectingGoogle(true);\n+    setConnectionError(null);\n+    \n+    console.log('Starting Google OAuth connection...');\n+    \n+    try {\n+      const result = await authService.initiateGoogleOAuth();\n+      console.log('OAuth initiation result:', result);\n+      \n+      if (result.success) {\n+        // OAuth window opened successfully\n+        console.log('Google OAuth initiated successfully');\n+        \n+        // Set a timeout in case the popup doesn't send a message\n+        setTimeout(() => {\n+          if (isConnectingGoogle) {\n+            console.log('OAuth timeout reached, stopping loading state');\n+            setIsConnectingGoogle(false);\n+            setConnectionError('Connection timeout. Please check if the OAuth window opened and try again. If the window opened, please complete the authorization process.');\n+          }\n+        }, 120000); // Increased to 2 minutes for OAuth flow\n+        \n+        // The connection status will be updated via message from the popup window\n+      } else {\n+        let errorMessage = result.error || 'Failed to connect Google Ads';\n+        \n+        // Provide specific guidance for common issues\n+        if (errorMessage.includes('popup blocker')) {\n+          errorMessage = 'Popup blocked! Please allow popups for this site and try again.';\n+        } else if (errorMessage.includes('Failed to open OAuth window')) {\n+          errorMessage = 'Unable to open OAuth window. Please check your browser settings and try again.';\n+        }\n+        \n+        console.error('OAuth initiation failed:', errorMessage);\n+        setConnectionError(errorMessage);\n+        setIsConnectingGoogle(false);\n+      }\n+    } catch (error) {\n+      console.error('Google OAuth error:', error);\n+      let errorMessage = 'Failed to connect Google Ads. Please try again.';\n+      \n+      if (error instanceof Error) {\n+        if (error.message.includes('timeout')) {\n+          errorMessage = 'Connection timeout. The server is taking too long to respond. Please try again.';\n+        } else if (error.message.includes('network')) {\n+          errorMessage = 'Network error. Please check your internet connection and try again.';\n+        } else {\n+          errorMessage = `Connection error: ${error.message}`;\n+        }\n+      }\n+      \n+      setConnectionError(errorMessage);\n+      setIsConnectingGoogle(false);\n+    }\n+  };\n+\n+  const handleMetaConnect = () => {\n+    // Simulate OAuth flow\n+    setTimeout(() => {\n+      setConnectedAccounts(prev => ({ ...prev, meta: true }));\n+    }, 2000);\n+  };\n+\n+  const canProceed = () => {\n+    if (currentStep === 2) return connectedAccounts.google; // Only require Google Ads, Meta Ads is optional\n+    return true;\n+  };\n+\n+  const renderStepContent = () => {\n+    switch (currentStep) {\n+      case 1:\n+        return (\n+          <div className=\"text-center\">\n+            <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6 lg:mb-8\">\n+              <Zap className=\"w-10 h-10 text-white\" />\n+            </div>\n+            <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Welcome to AI Marketing Assistant</h2>\n+            <p className=\"text-lg text-gray-600 mb-8 lg:mb-12 max-w-2xl mx-auto\">\n+              Transform your advertising performance with AI-powered insights and automated optimization. \n+              Let's connect your advertising accounts to get started.\n+            </p>\n+            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 lg:gap-8 max-w-4xl mx-auto\">\n+              <div className=\"bg-blue-50 p-6 lg:p-8 rounded-xl\">\n+                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n+                  <Shield className=\"w-6 h-6 text-blue-600\" />\n+                </div>\n+                <h3 className=\"font-semibold text-gray-900 mb-2\">Secure Integration</h3>\n+                <p className=\"text-sm text-gray-600\">Bank-level security with OAuth 2.0 authentication</p>\n+              </div>\n+              <div className=\"bg-green-50 p-6 lg:p-8 rounded-xl\">\n+                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n+                  <Zap className=\"w-6 h-6 text-green-600\" />\n+                </div>\n+                <h3 className=\"font-semibold text-gray-900 mb-2\">Real-time Analysis</h3>\n+                <p className=\"text-sm text-gray-600\">Live campaign monitoring and optimization</p>\n+              </div>\n+              <div className=\"bg-purple-50 p-6 lg:p-8 rounded-xl\">\n+                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n+                  <CheckCircle className=\"w-6 h-6 text-purple-600\" />\n+                </div>\n+                <h3 className=\"font-semibold text-gray-900 mb-2\">Automated Actions</h3>\n+                <p className=\"text-sm text-gray-600\">One-click implementation of AI recommendations</p>\n+              </div>\n+            </div>\n+          </div>\n+        );\n+\n+      case 2:\n+        return (\n+          <div className=\"max-w-6xl mx-auto\">\n+            <div className=\"text-center mb-8 lg:mb-12\">\n+              <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Connect Your Advertising Accounts</h2>\n+              <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n+                Connect your Google Ads account to get started. Meta Ads is optional and can be added later for cross-platform insights.\n+              </p>\n+            </div>\n+\n+            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12\">\n+              {/* Google Ads Section */}\n+              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n+                <div className=\"text-center mb-6 lg:mb-8\">\n+                  <div className=\"w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n+                    <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"none\">\n+                      <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n+                      <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n+                      <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n+                      <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n+                    </svg>\n+                  </div>\n+                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Google Ads</h3>\n+                  <p className=\"text-gray-600 text-sm\">\n+                    Securely connect your Google Ads account for AI-powered campaign analysis.\n+                  </p>\n+                </div>\n+\n+                <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n+                  <div className=\"flex items-start space-x-3\">\n+                    <Shield className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n+                    <div className=\"text-sm text-gray-600\">\n+                      <p className=\"font-medium text-gray-900 mb-2\">What we'll access:</p>\n+                      <ul className=\"space-y-1\">\n+                        <li>• Campaign performance data (read-only)</li>\n+                        <li>• Account structure and settings</li>\n+                        <li>• Optimization capabilities (with approval)</li>\n+                      </ul>\n+                    </div>\n+                  </div>\n+                </div>\n+\n+                {connectedAccounts.google ? (\n+                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n+                    <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n+                    <h4 className=\"font-semibold text-green-900\">Google Ads Connected!</h4>\n+                    \n+                    {isSyncingGoogleAds ? (\n+                      <div className=\"text-sm text-green-700 mt-2\">\n+                        <div className=\"flex items-center justify-center space-x-2 mb-2\">\n+                          <div className=\"w-4 h-4 border-2 border-green-600 border-t-transparent rounded-full animate-spin\"></div>\n+                          <span>Syncing data...</span>\n+                        </div>\n+                        <p className=\"text-xs text-green-600\">{syncProgress}</p>\n+                      </div>\n+                    ) : isLoadingAccountSummary ? (\n+                      <div className=\"text-sm text-green-700 mt-2\">\n+                        <div className=\"flex items-center justify-center space-x-2\">\n+                          <div className=\"w-4 h-4 border-2 border-green-600 border-t-transparent rounded-full animate-spin\"></div>\n+                          <span>Loading account details...</span>\n+                        </div>\n+                      </div>\n+                    ) : googleAdsAccountSummary ? (\n+                      <div className=\"text-sm text-green-700 mt-2\">\n+                        <p>{googleAdsAccountSummary.total_accounts || 0} active accounts</p>\n+                        <p>{googleAdsAccountSummary.total_campaigns || 0} active campaigns</p>\n+                        {googleAdsAccountSummary.total_spend && (\n+                          <p>${(googleAdsAccountSummary.total_spend / 1000000).toFixed(2)}M monthly spend</p>\n+                        )}\n+                      </div>\n+                    ) : (\n+                      <p className=\"text-sm text-green-700 mt-1\">Account details available</p>\n+                    )}\n+                    \n+                    {/* Add retry button if account summary failed to load */}\n+                    {!isSyncingGoogleAds && !isLoadingAccountSummary && !googleAdsAccountSummary && (\n+                      <button\n+                        onClick={async () => {\n+                          try {\n+                            setIsLoadingAccountSummary(true);\n+                            const summaryResult = await authService.getGoogleAdsAccountSummary();\n+                            if (summaryResult.success) {\n+                              setGoogleAdsAccountSummary(summaryResult.data);\n+                            }\n+                          } catch (error) {\n+                            console.error('Retry failed:', error);\n+                          } finally {\n+                            setIsLoadingAccountSummary(false);\n+                          }\n+                        }}\n+                        className=\"mt-2 text-xs bg-green-100 text-green-700 px-3 py-1 rounded hover:bg-green-200 transition-colors\"\n+                      >\n+                        Refresh Account Data\n+                      </button>\n+                    )}\n+                    \n+                    {/* Manual sync button for refreshing data */}\n+                    {!isSyncingGoogleAds && googleAdsAccountSummary && (\n+                      <button\n+                        onClick={async () => {\n+                          try {\n+                            setIsSyncingGoogleAds(true);\n+                            setSyncProgress('Refreshing data...');\n+                            \n+                            const syncResult = await authService.syncGoogleAdsData('weekly', 1);\n+                            if (syncResult.success) {\n+                              setSyncProgress('Data refreshed! Updating summary...');\n+                              \n+                              // Fetch updated account summary\n+                              const summaryResult = await authService.getGoogleAdsAccountSummary();\n+                              if (summaryResult.success) {\n+                                setGoogleAdsAccountSummary(summaryResult.data);\n+                              }\n+                            } else {\n+                              setConnectionError(`Data refresh failed: ${syncResult.error}`);\n+                            }\n+                          } catch (error) {\n+                            console.error('Manual sync failed:', error);\n+                            setConnectionError('Failed to refresh data. Please try again.');\n+                          } finally {\n+                            setIsSyncingGoogleAds(false);\n+                            setSyncProgress('');\n+                          }\n+                        }}\n+                        className=\"mt-2 text-xs bg-blue-100 text-blue-700 px-3 py-1 rounded hover:bg-blue-200 transition-colors\"\n+                      >\n+                        Refresh Data\n+                      </button>\n+                    )}\n+                    \n+                    {/* Disconnect button */}\n+                    {!isSyncingGoogleAds && !isLoadingAccountSummary && (\n+                      <button\n+                        onClick={() => {\n+                          // Clear connection status and reset state\n+                          authService.disconnectGoogleAds();\n+                          setConnectedAccounts(prev => ({ ...prev, google: false }));\n+                          setGoogleAdsAccountSummary(null);\n+                          setConnectionError(null);\n+                          console.log('Google Ads disconnected, user can reconnect');\n+                        }}\n+                        className=\"mt-2 text-xs bg-red-100 text-red-700 px-3 py-1 rounded hover:bg-red-200 transition-colors\"\n+                      >\n+                        Disconnect\n+                      </button>\n+                    )}\n+                  </div>\n+                ) : (\n+                  <div className=\"space-y-3\">\n+                    {connectionError && (\n+                      <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n+                        <p className=\"text-sm text-red-800 mb-2\">{connectionError}</p>\n+                        \n+                        {/* Show specific guidance for scope errors */}\n+                        {connectionError.includes('scope changed') && (\n+                          <div className=\"mb-2 p-2 bg-blue-50 rounded border border-blue-200\">\n+                            <p className=\"text-xs text-blue-700\">\n+                              <strong>Why this happens:</strong> Google automatically adds security scopes during OAuth.\n+                            </p>\n+                            <p className=\"text-xs text-blue-700 mt-1\">\n+                              <strong>Solution:</strong> This is completely normal and secure. Just try connecting again.\n+                            </p>\n+                          </div>\n+                        )}\n+                        \n+                        <button\n+                          onClick={handleGoogleConnect}\n+                          className=\"text-xs bg-red-100 text-red-700 px-3 py-1 rounded hover:bg-red-200 transition-colors\"\n+                        >\n+                          Try Again\n+                        </button>\n+                      </div>\n+                    )}\n+                    <button\n+                      onClick={handleGoogleConnect}\n+                      disabled={isConnectingGoogle}\n+                      className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n+                    >\n+                      {isConnectingGoogle ? (\n+                        <>\n+                          <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n+                          <span>Opening OAuth Window...</span>\n+                        </>\n+                      ) : (\n+                        <>\n+                          <ExternalLink className=\"w-5 h-5\" />\n+                          <span>Connect Google Ads</span>\n+                        </>\n+                      )}\n+                    </button>\n+                    \n+                    {isConnectingGoogle && (\n+                      <div className=\"text-center mt-3\">\n+                        <p className=\"text-sm text-blue-600\">\n+                          A new window should open for Google authorization. \n+                          Please complete the process in that window.\n+                        </p>\n+                        <div className=\"mt-2 p-3 bg-blue-50 rounded-lg border border-blue-200\">\n+                          <p className=\"text-xs text-blue-700\">\n+                            <strong>If no window opened:</strong> Check your popup blocker settings and try again.\n+                          </p>\n+                          <p className=\"text-xs text-blue-700 mt-1\">\n+                            <strong>If the window opened:</strong> Complete the Google authorization and return here.\n+                          </p>\n+                          <p className=\"text-xs text-blue-700 mt-1\">\n+                            <strong>Note:</strong> Google may add additional scopes automatically - this is normal and secure.\n+                          </p>\n+                        </div>\n+                      </div>\n+                    )}\n+                  </div>\n+                )}\n+              </div>\n+\n+              {/* Meta Ads Section */}\n+              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n+                <div className=\"text-center mb-6 lg:mb-8\">\n+                  <div className=\"w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n+                    <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n+                      <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n+                    </svg>\n+                  </div>\n+                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Meta Ads (Optional)</h3>\n+                  <p className=\"text-gray-600 text-sm\">\n+                    Link your Meta (Facebook/Instagram) advertising account for comprehensive cross-platform insights.\n+                  </p>\n+                </div>\n+\n+                <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n+                  <div className=\"flex items-start space-x-3\">\n+                    <Shield className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n+                    <div className=\"text-sm text-gray-600\">\n+                      <p className=\"font-medium text-gray-900 mb-2\">What we'll access:</p>\n+                      <ul className=\"space-y-1\">\n+                        <li>• Ad account performance metrics</li>\n+                        <li>• Campaign and ad set data</li>\n+                        <li>• Audience insights and demographics</li>\n+                        <li>• Campaign management capabilities</li>\n+                      </ul>\n+                    </div>\n+                  </div>\n+                </div>\n+\n+                {connectedAccounts.meta ? (\n+                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n+                    <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n+                    <h4 className=\"font-semibold text-green-900\">Meta Ads Connected!</h4>\n+                    <p className=\"text-sm text-green-700 mt-1\">2 ad accounts with 18 campaigns</p>\n+                  </div>\n+                ) : (\n+                  <div className=\"space-y-3\">\n+                    <button\n+                      onClick={handleMetaConnect}\n+                      className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n+                    >\n+                      <ExternalLink className=\"w-5 h-5\" />\n+                      <span>Connect Meta Ads</span>\n+                    </button>\n+                    \n+                    <button\n+                      onClick={() => setConnectedAccounts(prev => ({ ...prev, meta: true }))}\n+                      className=\"w-full bg-gray-100 text-gray-600 py-2 px-4 rounded-lg font-medium hover:bg-gray-200 transition-colors text-sm\"\n+                    >\n+                      Skip Meta Ads for now\n+                    </button>\n+                  </div>\n+                )}\n+              </div>\n+            </div>\n+\n+            {/* Sync Progress Indicator */}\n+            {isSyncingGoogleAds && (\n+              <div className=\"mt-6 bg-blue-50 border border-blue-200 rounded-xl p-6\">\n+                <div className=\"text-center\">\n+                  <div className=\"flex items-center justify-center space-x-3 mb-3\">\n+                    <div className=\"w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n+                    <h4 className=\"text-lg font-semibold text-blue-900\">Syncing Google Ads Data</h4>\n+                  </div>\n+                  <p className=\"text-blue-700 mb-4\">{syncProgress}</p>\n+                  <div className=\"w-full bg-blue-200 rounded-full h-2\">\n+                    <div className=\"bg-blue-600 h-2 rounded-full animate-pulse\" style={{ width: '60%' }}></div>\n+                  </div>\n+                  <p className=\"text-sm text-blue-600 mt-2\">\n+                    This may take a few minutes depending on your data size\n+                  </p>\n+                </div>\n+              </div>\n+            )}\n+\n+            {/* Cross-Platform Benefits */}\n+            <div className=\"mt-8 lg:mt-12 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl p-6 lg:p-8\">\n+              <div className=\"text-center\">\n+                <h4 className=\"text-lg font-semibold text-blue-900 mb-3 lg:mb-4\">\n+                  {connectedAccounts.meta ? 'Cross-Platform Benefits' : 'Platform Benefits'}\n+                </h4>\n+                <p className=\"text-blue-800 mb-4 lg:mb-6\">\n+                  {connectedAccounts.meta \n+                    ? 'With both platforms connected, you\\'ll get unified insights and cross-platform optimization recommendations.'\n+                    : 'With Google Ads connected, you\\'ll get comprehensive insights and AI-powered optimization recommendations. You can add Meta Ads later for cross-platform benefits.'\n+                  }\n+                </p>\n+                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 lg:gap-6 text-sm\">\n+                  {connectedAccounts.meta ? (\n+                    <>\n+                      <div className=\"flex items-center space-x-2\">\n+                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                        <span>Unified dashboard view</span>\n+                      </div>\n+                      <div className=\"flex items-center space-x-2\">\n+                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                        <span>Cross-platform insights</span>\n+                      </div>\n+                      <div className=\"flex items-center space-x-2\">\n+                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                        <span>Integrated optimization</span>\n+                      </div>\n+                    </>\n+                  ) : (\n+                    <>\n+                      <div className=\"flex items-center space-x-2\">\n+                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                        <span>Google Ads optimization</span>\n+                      </div>\n+                      <div className=\"flex items-center space-x-2\">\n+                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                        <span>AI-powered insights</span>\n+                      </div>\n+                      <div className=\"flex items-center space-x-2\">\n+                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n+                        <span>Campaign analysis</span>\n+                      </div>\n+                    </>\n+                  )}\n+                </div>\n+                \n+                {!connectedAccounts.meta && (\n+                  <div className=\"mt-4 p-3 bg-blue-100 rounded-lg border border-blue-300\">\n+                    <p className=\"text-sm text-blue-800\">\n+                      <strong>Tip:</strong> You can always connect Meta Ads later from your dashboard for cross-platform benefits.\n+                    </p>\n+                  </div>\n+                )}\n+              </div>\n+            </div>\n+          </div>\n+        );\n+\n+      case 3:\n+        return (\n+          <div className=\"text-center\">\n+            <div className=\"w-20 h-20 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-6 lg:mb-8\">\n+              <CheckCircle className=\"w-10 h-10 text-green-600\" />\n+            </div>\n+            <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Setup Complete!</h2>\n+            <p className=\"text-lg text-gray-600 mb-8 lg:mb-12 max-w-2xl mx-auto\">\n+              Your accounts are now connected and we're analyzing your campaign data. \n+              You can start getting AI-powered insights and optimizations right away.\n+            </p>\n+            \n+            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8 max-w-4xl mx-auto mb-8 lg:mb-12\">\n+              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n+                <div className=\"flex items-center space-x-3 mb-4\">\n+                  <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"none\">\n+                    <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n+                    <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n+                    <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n+                    <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n+                  </svg>\n+                  <div>\n+                    <h3 className=\"font-semibold text-gray-900\">Google Ads</h3>\n+                    <p className=\"text-sm text-green-600\">Connected ✓</p>\n+                  </div>\n+                </div>\n+                <div className=\"text-left space-y-2 text-sm text-gray-600\">\n+                  {isSyncingGoogleAds ? (\n+                    <>\n+                      <p>• Syncing data...</p>\n+                      <p>• Loading account information</p>\n+                      <p>• Preparing insights</p>\n+                    </>\n+                  ) : googleAdsAccountSummary ? (\n+                    <>\n+                      <p>• {googleAdsAccountSummary.total_accounts || 0} accounts connected</p>\n+                      <p>• {googleAdsAccountSummary.total_campaigns || 0} active campaigns</p>\n+                      {googleAdsAccountSummary.total_spend ? (\n+                        <p>• ${(googleAdsAccountSummary.total_spend / 1000000).toFixed(2)}M monthly spend</p>\n+                      ) : (\n+                        <p>• Spend data available</p>\n+                      )}\n+                    </>\n+                  ) : (\n+                    <>\n+                      <p>• Account details loading...</p>\n+                      <p>• Campaign data available</p>\n+                      <p>• Performance insights ready</p>\n+                    </>\n+                  )}\n+                </div>\n+              </div>\n+              \n+              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n+                <div className=\"flex items-center space-x-3 mb-4\">\n+                  <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n+                    <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n+                  </svg>\n+                  <div>\n+                    <h3 className=\"font-semibold text-gray-900\">Meta Ads</h3>\n+                    {connectedAccounts.meta ? (\n+                      <p className=\"text-sm text-green-600\">Connected ✓</p>\n+                    ) : (\n+                      <p className=\"text-sm text-gray-500\">Not Connected</p>\n+                    )}\n+                  </div>\n+                </div>\n+                <div className=\"text-left space-y-2 text-sm text-gray-600\">\n+                  {connectedAccounts.meta ? (\n+                    <>\n+                      <p>• 2 ad accounts connected</p>\n+                      <p>• 18 active campaigns</p>\n+                      <p>• $32,180 monthly spend</p>\n+                    </>\n+                  ) : (\n+                    <>\n+                      <p>• Not connected yet</p>\n+                      <p>• Can be added later</p>\n+                      <p>• Optional for now</p>\n+                    </>\n+                  )}\n+                </div>\n+              </div>\n+            </div>\n+\n+            <button\n+              onClick={onComplete}\n+              className=\"bg-blue-600 text-white py-3 px-8 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center space-x-2 mx-auto\"\n+            >\n+              <span>Start Using AI Marketing Assistant</span>\n+              <ArrowRight className=\"w-5 h-5\" />\n+            </button>\n+          </div>\n+        );\n+\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4 py-8 lg:py-16\">\n+      <div className=\"max-w-6xl w-full\">\n+        {/* Progress Steps */}\n+        <div className=\"flex items-center justify-center mb-12 lg:mb-16\">\n+          {steps.map((step, index) => (\n+            <div key={step.id} className=\"flex items-center\">\n+              <div className={`flex items-center space-x-3 ${\n+                currentStep >= step.id ? 'text-blue-600' : 'text-gray-400'\n+              }`}>\n+                <div className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold ${\n+                  currentStep > step.id \n+                    ? 'bg-blue-600 text-white' \n+                    : currentStep === step.id\n+                    ? 'bg-blue-100 text-blue-600 border-2 border-blue-600'\n+                    : 'bg-gray-200 text-gray-500'\n+                }`}>\n+                  {currentStep > step.id ? (\n+                    <CheckCircle className=\"w-5 h-5\" />\n+                  ) : (\n+                    step.id\n+                  )}\n+                </div>\n+                <div className=\"hidden md:block\">\n+                  <p className=\"font-medium\">{step.title}</p>\n+                  <p className=\"text-sm opacity-75\">{step.description}</p>\n+                </div>\n+              </div>\n+              {index < steps.length - 1 && (\n+                <div className={`w-16 h-0.5 mx-4 ${\n+                  currentStep > step.id ? 'bg-blue-600' : 'bg-gray-300'\n+                }`} />\n+              )}\n+            </div>\n+          ))}\n+        </div>\n+\n+        {/* Step Content */}\n+        <div className=\"bg-white rounded-2xl shadow-xl p-6 lg:p-8 border border-gray-100\">\n+          {renderStepContent()}\n+        </div>\n+\n+        {/* Navigation */}\n+        {currentStep < 3 && (\n+          <div className=\"flex justify-between mt-8 lg:mt-12\">\n+            <button\n+              onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n+              disabled={currentStep === 1}\n+              className=\"px-6 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n+            >\n+              Previous\n+            </button>\n+            <button\n+              onClick={() => setCurrentStep(Math.min(3, currentStep + 1))}\n+              disabled={!canProceed()}\n+              className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n+            >\n+              <span>Next</span>\n+              <ArrowRight className=\"w-4 h-4\" />\n+            </button>\n+          </div>\n+        )}\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default OnboardingFlow;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755676923185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,60 +115,60 @@\n \n   // Check if Google OAuth is already connected on component load\n   useEffect(() => {\n     const checkExistingConnection = async () => {\n-      if (authService.isGoogleOAuthConnected()) {\n-        console.log('Google OAuth already connected, checking connection status...');\n-        setConnectedAccounts(prev => ({ ...prev, google: true }));\n+      // Always validate connection with backend instead of relying on stored state\n+      console.log('Validating Google OAuth connection on component load...');\n+      \n+      try {\n+        const validationResult = await authService.validateGoogleOAuthConnection();\n         \n-        // Check if the connection is still valid\n-        try {\n-          const statusResult = await authService.checkGoogleOAuthStatus();\n-          if (statusResult.success && statusResult.connected) {\n-            console.log('Google OAuth connection still valid, starting data sync...');\n+        if (validationResult.connected) {\n+          console.log('Google OAuth connection validated, starting data sync...');\n+          setConnectedAccounts(prev => ({ ...prev, google: true }));\n+          \n+          // Start data sync automatically\n+          try {\n+            setIsSyncingGoogleAds(true);\n+            setSyncProgress('Checking for new data...');\n             \n-            // Start data sync automatically\n-            try {\n-              setIsSyncingGoogleAds(true);\n-              setSyncProgress('Checking for new data...');\n+            const syncResult = await authService.syncGoogleAdsData('weekly', 1);\n+            \n+            if (syncResult.success) {\n+              console.log('Data sync completed, fetching account summary...');\n+              setSyncProgress('Data sync completed! Fetching account summary...');\n               \n-              const syncResult = await authService.syncGoogleAdsData('weekly', 1);\n-              \n-              if (syncResult.success) {\n-                console.log('Data sync completed, fetching account summary...');\n-                setSyncProgress('Data sync completed! Fetching account summary...');\n-                \n-                // Fetch account summary\n-                const summaryResult = await authService.getGoogleAdsAccountSummary();\n-                if (summaryResult.success) {\n-                  setGoogleAdsAccountSummary(summaryResult.data);\n-                }\n-              } else {\n-                console.error('Data sync failed:', syncResult.error);\n-                // Connection might be invalid, clear the stored status\n-                authService.clearGoogleOAuthStatus();\n-                setConnectedAccounts(prev => ({ ...prev, google: false }));\n+              // Fetch account summary\n+              const summaryResult = await authService.getGoogleAdsAccountSummary();\n+              if (summaryResult.success) {\n+                setGoogleAdsAccountSummary(summaryResult.data);\n               }\n-            } catch (error) {\n-              console.error('Error during automatic data sync:', error);\n+            } else {\n+              console.error('Data sync failed:', syncResult.error);\n               // Connection might be invalid, clear the stored status\n               authService.clearGoogleOAuthStatus();\n               setConnectedAccounts(prev => ({ ...prev, google: false }));\n-            } finally {\n-              setIsSyncingGoogleAds(false);\n-              setSyncProgress('');\n             }\n-          } else {\n-            console.log('Google OAuth connection no longer valid, clearing status...');\n+          } catch (error) {\n+            console.error('Error during automatic data sync:', error);\n+            // Connection might be invalid, clear the stored status\n             authService.clearGoogleOAuthStatus();\n             setConnectedAccounts(prev => ({ ...prev, google: false }));\n+          } finally {\n+            setIsSyncingGoogleAds(false);\n+            setSyncProgress('');\n           }\n-        } catch (error) {\n-          console.error('Error checking Google OAuth status:', error);\n-          // Clear the stored status on error\n+        } else {\n+          console.log('Google OAuth connection not valid:', validationResult.error);\n+          // Clear any stored status and show connection option\n           authService.clearGoogleOAuthStatus();\n           setConnectedAccounts(prev => ({ ...prev, google: false }));\n         }\n+      } catch (error) {\n+        console.error('Error validating Google OAuth connection:', error);\n+        // Clear any stored status on error\n+        authService.clearGoogleOAuthStatus();\n+        setConnectedAccounts(prev => ({ ...prev, google: false }));\n       }\n     };\n \n     checkExistingConnection();\n@@ -433,730 +433,52 @@\n                       >\n                         Disconnect\n                       </button>\n                     )}\n-                  </div>\n-                ) : (\n-                  <div className=\"space-y-3\">\n-                    {connectionError && (\n-                      <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n-                        <p className=\"text-sm text-red-800 mb-2\">{connectionError}</p>\n-                        \n-                        {/* Show specific guidance for scope errors */}\n-                        {connectionError.includes('scope changed') && (\n-                          <div className=\"mb-2 p-2 bg-blue-50 rounded border border-blue-200\">\n-                            <p className=\"text-xs text-blue-700\">\n-                              <strong>Why this happens:</strong> Google automatically adds security scopes during OAuth.\n-                            </p>\n-                            <p className=\"text-xs text-blue-700 mt-1\">\n-                              <strong>Solution:</strong> This is completely normal and secure. Just try connecting again.\n-                            </p>\n-                          </div>\n-                        )}\n-                        \n-                        <button\n-                          onClick={handleGoogleConnect}\n-                          className=\"text-xs bg-red-100 text-red-700 px-3 py-1 rounded hover:bg-red-200 transition-colors\"\n-                        >\n-                          Try Again\n-                        </button>\n-                      </div>\n-                    )}\n-                    <button\n-                      onClick={handleGoogleConnect}\n-                      disabled={isConnectingGoogle}\n-                      className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n-                    >\n-                      {isConnectingGoogle ? (\n-                        <>\n-                          <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n-                          <span>Opening OAuth Window...</span>\n-                        </>\n-                      ) : (\n-                        <>\n-                          <ExternalLink className=\"w-5 h-5\" />\n-                          <span>Connect Google Ads</span>\n-                        </>\n-                      )}\n-                    </button>\n                     \n-                    {isConnectingGoogle && (\n-                      <div className=\"text-center mt-3\">\n-                        <p className=\"text-sm text-blue-600\">\n-                          A new window should open for Google authorization. \n-                          Please complete the process in that window.\n-                        </p>\n-                        <div className=\"mt-2 p-3 bg-blue-50 rounded-lg border border-blue-200\">\n-                          <p className=\"text-xs text-blue-700\">\n-                            <strong>If no window opened:</strong> Check your popup blocker settings and try again.\n-                          </p>\n-                          <p className=\"text-xs text-blue-700 mt-1\">\n-                            <strong>If the window opened:</strong> Complete the Google authorization and return here.\n-                          </p>\n-                          <p className=\"text-xs text-blue-700 mt-1\">\n-                            <strong>Note:</strong> Google may add additional scopes automatically - this is normal and secure.\n-                          </p>\n-                        </div>\n-                      </div>\n-                    )}\n-                  </div>\n-                )}\n-              </div>\n-\n-              {/* Meta Ads Section */}\n-              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n-                <div className=\"text-center mb-6 lg:mb-8\">\n-                  <div className=\"w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n-                    <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n-                      <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n-                    </svg>\n-                  </div>\n-                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Meta Ads (Optional)</h3>\n-                  <p className=\"text-gray-600 text-sm\">\n-                    Link your Meta (Facebook/Instagram) advertising account for comprehensive cross-platform insights.\n-                  </p>\n-                </div>\n-\n-                <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n-                  <div className=\"flex items-start space-x-3\">\n-                    <Shield className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n-                    <div className=\"text-sm text-gray-600\">\n-                      <p className=\"font-medium text-gray-900 mb-2\">What we'll access:</p>\n-                      <ul className=\"space-y-1\">\n-                        <li>• Ad account performance metrics</li>\n-                        <li>• Campaign and ad set data</li>\n-                        <li>• Audience insights and demographics</li>\n-                        <li>• Campaign management capabilities</li>\n-                      </ul>\n-                    </div>\n-                  </div>\n-                </div>\n-\n-                {connectedAccounts.meta ? (\n-                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n-                    <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n-                    <h4 className=\"font-semibold text-green-900\">Meta Ads Connected!</h4>\n-                    <p className=\"text-sm text-green-700 mt-1\">2 ad accounts with 18 campaigns</p>\n-                  </div>\n-                ) : (\n-                  <div className=\"space-y-3\">\n-                    <button\n-                      onClick={handleMetaConnect}\n-                      className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n-                    >\n-                      <ExternalLink className=\"w-5 h-5\" />\n-                      <span>Connect Meta Ads</span>\n-                    </button>\n-                    \n-                    <button\n-                      onClick={() => setConnectedAccounts(prev => ({ ...prev, meta: true }))}\n-                      className=\"w-full bg-gray-100 text-gray-600 py-2 px-4 rounded-lg font-medium hover:bg-gray-200 transition-colors text-sm\"\n-                    >\n-                      Skip Meta Ads for now\n-                    </button>\n-                  </div>\n-                )}\n-              </div>\n-            </div>\n-\n-            {/* Sync Progress Indicator */}\n-            {isSyncingGoogleAds && (\n-              <div className=\"mt-6 bg-blue-50 border border-blue-200 rounded-xl p-6\">\n-                <div className=\"text-center\">\n-                  <div className=\"flex items-center justify-center space-x-3 mb-3\">\n-                    <div className=\"w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n-                    <h4 className=\"text-lg font-semibold text-blue-900\">Syncing Google Ads Data</h4>\n-                  </div>\n-                  <p className=\"text-blue-700 mb-4\">{syncProgress}</p>\n-                  <div className=\"w-full bg-blue-200 rounded-full h-2\">\n-                    <div className=\"bg-blue-600 h-2 rounded-full animate-pulse\" style={{ width: '60%' }}></div>\n-                  </div>\n-                  <p className=\"text-sm text-blue-600 mt-2\">\n-                    This may take a few minutes depending on your data size\n-                  </p>\n-                </div>\n-              </div>\n-            )}\n-\n-            {/* Cross-Platform Benefits */}\n-            <div className=\"mt-8 lg:mt-12 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl p-6 lg:p-8\">\n-              <div className=\"text-center\">\n-                <h4 className=\"text-lg font-semibold text-blue-900 mb-3 lg:mb-4\">\n-                  {connectedAccounts.meta ? 'Cross-Platform Benefits' : 'Platform Benefits'}\n-                </h4>\n-                <p className=\"text-blue-800 mb-4 lg:mb-6\">\n-                  {connectedAccounts.meta \n-                    ? 'With both platforms connected, you\\'ll get unified insights and cross-platform optimization recommendations.'\n-                    : 'With Google Ads connected, you\\'ll get comprehensive insights and AI-powered optimization recommendations. You can add Meta Ads later for cross-platform benefits.'\n-                  }\n-                </p>\n-                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 lg:gap-6 text-sm\">\n-                  {connectedAccounts.meta ? (\n-                    <>\n-                      <div className=\"flex items-center space-x-2\">\n-                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n-                        <span>Unified dashboard view</span>\n-                      </div>\n-                      <div className=\"flex items-center space-x-2\">\n-                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n-                        <span>Cross-platform insights</span>\n-                      </div>\n-                      <div className=\"flex items-center space-x-2\">\n-                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n-                        <span>Integrated optimization</span>\n-                      </div>\n-                    </>\n-                  ) : (\n-                    <>\n-                      <div className=\"flex items-center space-x-2\">\n-                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n-                        <span>Google Ads optimization</span>\n-                      </div>\n-                      <div className=\"flex items-center space-x-2\">\n-                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n-                        <span>AI-powered insights</span>\n-                      </div>\n-                      <div className=\"flex items-center space-x-2\">\n-                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n-                        <span>Campaign analysis</span>\n-                      </div>\n-                    </>\n-                  )}\n-                </div>\n-                \n-                {!connectedAccounts.meta && (\n-                  <div className=\"mt-4 p-3 bg-blue-100 rounded-lg border border-blue-300\">\n-                    <p className=\"text-sm text-blue-800\">\n-                      <strong>Tip:</strong> You can always connect Meta Ads later from your dashboard for cross-platform benefits.\n-                    </p>\n-                  </div>\n-                )}\n-              </div>\n-            </div>\n-          </div>\n-        );\n-\n-      case 3:\n-        return (\n-          <div className=\"text-center\">\n-            <div className=\"w-20 h-20 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-6 lg:mb-8\">\n-              <CheckCircle className=\"w-10 h-10 text-green-600\" />\n-            </div>\n-            <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Setup Complete!</h2>\n-            <p className=\"text-lg text-gray-600 mb-8 lg:mb-12 max-w-2xl mx-auto\">\n-              Your accounts are now connected and we're analyzing your campaign data. \n-              You can start getting AI-powered insights and optimizations right away.\n-            </p>\n-            \n-            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8 max-w-4xl mx-auto mb-8 lg:mb-12\">\n-              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n-                <div className=\"flex items-center space-x-3 mb-4\">\n-                  <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"none\">\n-                    <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n-                    <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n-                    <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n-                    <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n-                  </svg>\n-                  <div>\n-                    <h3 className=\"font-semibold text-gray-900\">Google Ads</h3>\n-                    <p className=\"text-sm text-green-600\">Connected ✓</p>\n-                  </div>\n-                </div>\n-                <div className=\"text-left space-y-2 text-sm text-gray-600\">\n-                  {isSyncingGoogleAds ? (\n-                    <>\n-                      <p>• Syncing data...</p>\n-                      <p>• Loading account information</p>\n-                      <p>• Preparing insights</p>\n-                    </>\n-                  ) : googleAdsAccountSummary ? (\n-                    <>\n-                      <p>• {googleAdsAccountSummary.total_accounts || 0} accounts connected</p>\n-                      <p>• {googleAdsAccountSummary.total_campaigns || 0} active campaigns</p>\n-                      {googleAdsAccountSummary.total_spend ? (\n-                        <p>• ${(googleAdsAccountSummary.total_spend / 1000000).toFixed(2)}M monthly spend</p>\n-                      ) : (\n-                        <p>• Spend data available</p>\n-                      )}\n-                    </>\n-                  ) : (\n-                    <>\n-                      <p>• Account details loading...</p>\n-                      <p>• Campaign data available</p>\n-                      <p>• Performance insights ready</p>\n-                    </>\n-                  )}\n-                </div>\n-              </div>\n-              \n-              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n-                <div className=\"flex items-center space-x-3 mb-4\">\n-                  <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n-                    <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n-                  </svg>\n-                  <div>\n-                    <h3 className=\"font-semibold text-gray-900\">Meta Ads</h3>\n-                    {connectedAccounts.meta ? (\n-                      <p className=\"text-sm text-green-600\">Connected ✓</p>\n-                    ) : (\n-                      <p className=\"text-sm text-gray-500\">Not Connected</p>\n-                    )}\n-                  </div>\n-                </div>\n-                <div className=\"text-left space-y-2 text-sm text-gray-600\">\n-                  {connectedAccounts.meta ? (\n-                    <>\n-                      <p>• 2 ad accounts connected</p>\n-                      <p>• 18 active campaigns</p>\n-                      <p>• $32,180 monthly spend</p>\n-                    </>\n-                  ) : (\n-                    <>\n-                      <p>• Not connected yet</p>\n-                      <p>• Can be added later</p>\n-                      <p>• Optional for now</p>\n-                    </>\n-                  )}\n-                </div>\n-              </div>\n-            </div>\n-\n-            <button\n-              onClick={onComplete}\n-              className=\"bg-blue-600 text-white py-3 px-8 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center space-x-2 mx-auto\"\n-            >\n-              <span>Start Using AI Marketing Assistant</span>\n-              <ArrowRight className=\"w-5 h-5\" />\n-            </button>\n-          </div>\n-        );\n-\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4 py-8 lg:py-16\">\n-      <div className=\"max-w-6xl w-full\">\n-        {/* Progress Steps */}\n-        <div className=\"flex items-center justify-center mb-12 lg:mb-16\">\n-          {steps.map((step, index) => (\n-            <div key={step.id} className=\"flex items-center\">\n-              <div className={`flex items-center space-x-3 ${\n-                currentStep >= step.id ? 'text-blue-600' : 'text-gray-400'\n-              }`}>\n-                <div className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold ${\n-                  currentStep > step.id \n-                    ? 'bg-blue-600 text-white' \n-                    : currentStep === step.id\n-                    ? 'bg-blue-100 text-blue-600 border-2 border-blue-600'\n-                    : 'bg-gray-200 text-gray-500'\n-                }`}>\n-                  {currentStep > step.id ? (\n-                    <CheckCircle className=\"w-5 h-5\" />\n-                  ) : (\n-                    step.id\n-                  )}\n-                </div>\n-                <div className=\"hidden md:block\">\n-                  <p className=\"font-medium\">{step.title}</p>\n-                  <p className=\"text-sm opacity-75\">{step.description}</p>\n-                </div>\n-              </div>\n-              {index < steps.length - 1 && (\n-                <div className={`w-16 h-0.5 mx-4 ${\n-                  currentStep > step.id ? 'bg-blue-600' : 'bg-gray-300'\n-                }`} />\n-              )}\n-            </div>\n-          ))}\n-        </div>\n-\n-        {/* Step Content */}\n-        <div className=\"bg-white rounded-2xl shadow-xl p-6 lg:p-8 border border-gray-100\">\n-          {renderStepContent()}\n-        </div>\n-\n-        {/* Navigation */}\n-        {currentStep < 3 && (\n-          <div className=\"flex justify-between mt-8 lg:mt-12\">\n-            <button\n-              onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n-              disabled={currentStep === 1}\n-              className=\"px-6 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n-            >\n-              Previous\n-            </button>\n-            <button\n-              onClick={() => setCurrentStep(Math.min(3, currentStep + 1))}\n-              disabled={!canProceed()}\n-              className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n-            >\n-              <span>Next</span>\n-              <ArrowRight className=\"w-4 h-4\" />\n-            </button>\n-          </div>\n-        )}\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default OnboardingFlow;\n-import React, { useState, useEffect } from 'react';\n-import { CheckCircle, ExternalLink, AlertCircle, ArrowRight, Shield, Zap } from 'lucide-react';\n-import authService from '../services/authService'; // Added import for authService\n-\n-interface OnboardingFlowProps {\n-  onComplete: () => void;\n-}\n-\n-const OnboardingFlow: React.FC<OnboardingFlowProps> = ({ onComplete }) => {\n-  const [currentStep, setCurrentStep] = useState(1);\n-  const [connectedAccounts, setConnectedAccounts] = useState({\n-    google: false,\n-    meta: false\n-  });\n-  const [isConnectingGoogle, setIsConnectingGoogle] = useState(false);\n-  const [isConnectingMeta, setIsConnectingMeta] = useState(false);\n-  const [connectionError, setConnectionError] = useState<string | null>(null);\n-  const [googleAdsAccountSummary, setGoogleAdsAccountSummary] = useState<any>(null);\n-  const [isLoadingAccountSummary, setIsLoadingAccountSummary] = useState(false);\n-  const [isSyncingGoogleAds, setIsSyncingGoogleAds] = useState(false);\n-  const [syncProgress, setSyncProgress] = useState<string>('');\n-\n-  // Listen for OAuth success messages from popup window\n-  useEffect(() => {\n-    const handleMessage = async (event: MessageEvent) => {\n-      console.log('Received message from OAuth window:', event.data);\n-      \n-      if (event.origin !== window.location.origin) return;\n-      \n-      if (event.data.type === 'GOOGLE_OAUTH_SUCCESS') {\n-        console.log('Google OAuth successful:', event.data);\n-        setConnectedAccounts(prev => ({ ...prev, google: true }));\n-        setIsConnectingGoogle(false);\n-        setConnectionError(null);\n-        \n-        // Start Google Ads data sync\n-        try {\n-          console.log('Starting Google Ads data sync...');\n-          setIsSyncingGoogleAds(true);\n-          setSyncProgress('Initializing data sync...');\n-          \n-          const syncResult = await authService.syncGoogleAdsData('weekly', 1);\n-          \n-          if (syncResult.success) {\n-            console.log('Google Ads data sync completed successfully');\n-            setSyncProgress('Data sync completed! Fetching account summary...');\n-            \n-            // Now fetch the account summary with fresh data\n-            try {\n-              console.log('Fetching Google Ads account summary...');\n-              setIsLoadingAccountSummary(true);\n-              const summaryResult = await authService.getGoogleAdsAccountSummary();\n-              if (summaryResult.success) {\n-                console.log('Account summary fetched successfully:', summaryResult.data);\n-                setGoogleAdsAccountSummary(summaryResult.data);\n-              } else {\n-                console.error('Failed to fetch account summary:', summaryResult.error);\n-                // Check if it's a token issue and try to refresh\n-                if (summaryResult.error?.includes('401') || summaryResult.error?.includes('unauthorized')) {\n-                  console.log('Token may be expired, attempting refresh...');\n-                  try {\n-                    const refreshResult = await authService.refreshAccessToken();\n-                    if (refreshResult.success) {\n-                      // Retry fetching account summary with new token\n-                      const retryResult = await authService.getGoogleAdsAccountSummary();\n-                      if (retryResult.success) {\n-                        setGoogleAdsAccountSummary(retryResult.data);\n-                        return;\n-                      }\n-                    }\n-                  } catch (refreshError) {\n-                    console.error('Token refresh failed:', refreshError);\n-                  }\n-                }\n-                // Don't show error to user, just use placeholder data\n-              }\n-            } catch (error) {\n-              console.error('Error fetching account summary:', error);\n-              // Don't show error to user, just use placeholder data\n-            } finally {\n-              setIsLoadingAccountSummary(false);\n-            }\n-          } else {\n-            console.error('Google Ads data sync failed:', syncResult.error);\n-            setConnectionError(`Data sync failed: ${syncResult.error}`);\n-          }\n-        } catch (error) {\n-          console.error('Error during Google Ads data sync:', error);\n-          setConnectionError('Failed to sync Google Ads data. Please try again.');\n-        } finally {\n-          setIsSyncingGoogleAds(false);\n-          setSyncProgress('');\n-        }\n-      } else if (event.data.type === 'GOOGLE_OAUTH_FAILURE') {\n-        console.log('Google OAuth failed:', event.data);\n-        setIsConnectingGoogle(false);\n-        \n-        let errorMessage = event.data.error || 'Google OAuth failed. Please try again.';\n-        \n-        // Handle scope-related errors specifically\n-        if (errorMessage.includes('scope changed') || errorMessage.includes('Scope has changed')) {\n-          errorMessage = 'Google OAuth scope changed (this is normal). Please try connecting again.';\n-        }\n-        \n-        setConnectionError(errorMessage);\n-      }\n-    };\n-\n-    window.addEventListener('message', handleMessage);\n-    return () => window.removeEventListener('message', handleMessage);\n-  }, []);\n-\n-  const steps = [\n-    { id: 1, title: 'Welcome', description: 'Get started with AI Marketing Assistant' },\n-    { id: 2, title: 'Connect Accounts', description: 'Link your advertising accounts' },\n-    { id: 3, title: 'Setup Complete', description: 'Start optimizing your campaigns' }\n-  ];\n-\n-  const handleGoogleConnect = async () => {\n-    setIsConnectingGoogle(true);\n-    setConnectionError(null);\n-    \n-    console.log('Starting Google OAuth connection...');\n-    \n-    try {\n-      const result = await authService.initiateGoogleOAuth();\n-      console.log('OAuth initiation result:', result);\n-      \n-      if (result.success) {\n-        // OAuth window opened successfully\n-        console.log('Google OAuth initiated successfully');\n-        \n-        // Set a timeout in case the popup doesn't send a message\n-        setTimeout(() => {\n-          if (isConnectingGoogle) {\n-            console.log('OAuth timeout reached, stopping loading state');\n-            setIsConnectingGoogle(false);\n-            setConnectionError('Connection timeout. Please check if the OAuth window opened and try again. If the window opened, please complete the authorization process.');\n-          }\n-        }, 120000); // Increased to 2 minutes for OAuth flow\n-        \n-        // The connection status will be updated via message from the popup window\n-      } else {\n-        let errorMessage = result.error || 'Failed to connect Google Ads';\n-        \n-        // Provide specific guidance for common issues\n-        if (errorMessage.includes('popup blocker')) {\n-          errorMessage = 'Popup blocked! Please allow popups for this site and try again.';\n-        } else if (errorMessage.includes('Failed to open OAuth window')) {\n-          errorMessage = 'Unable to open OAuth window. Please check your browser settings and try again.';\n-        }\n-        \n-        console.error('OAuth initiation failed:', errorMessage);\n-        setConnectionError(errorMessage);\n-        setIsConnectingGoogle(false);\n-      }\n-    } catch (error) {\n-      console.error('Google OAuth error:', error);\n-      let errorMessage = 'Failed to connect Google Ads. Please try again.';\n-      \n-      if (error instanceof Error) {\n-        if (error.message.includes('timeout')) {\n-          errorMessage = 'Connection timeout. The server is taking too long to respond. Please try again.';\n-        } else if (error.message.includes('network')) {\n-          errorMessage = 'Network error. Please check your internet connection and try again.';\n-        } else {\n-          errorMessage = `Connection error: ${error.message}`;\n-        }\n-      }\n-      \n-      setConnectionError(errorMessage);\n-      setIsConnectingGoogle(false);\n-    }\n-  };\n-\n-  const handleMetaConnect = () => {\n-    // Simulate OAuth flow\n-    setTimeout(() => {\n-      setConnectedAccounts(prev => ({ ...prev, meta: true }));\n-    }, 2000);\n-  };\n-\n-  const canProceed = () => {\n-    if (currentStep === 2) return connectedAccounts.google; // Only require Google Ads, Meta Ads is optional\n-    return true;\n-  };\n-\n-  const renderStepContent = () => {\n-    switch (currentStep) {\n-      case 1:\n-        return (\n-          <div className=\"text-center\">\n-            <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6 lg:mb-8\">\n-              <Zap className=\"w-10 h-10 text-white\" />\n-            </div>\n-            <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Welcome to AI Marketing Assistant</h2>\n-            <p className=\"text-lg text-gray-600 mb-8 lg:mb-12 max-w-2xl mx-auto\">\n-              Transform your advertising performance with AI-powered insights and automated optimization. \n-              Let's connect your advertising accounts to get started.\n-            </p>\n-            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 lg:gap-8 max-w-4xl mx-auto\">\n-              <div className=\"bg-blue-50 p-6 lg:p-8 rounded-xl\">\n-                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n-                  <Shield className=\"w-6 h-6 text-blue-600\" />\n-                </div>\n-                <h3 className=\"font-semibold text-gray-900 mb-2\">Secure Integration</h3>\n-                <p className=\"text-sm text-gray-600\">Bank-level security with OAuth 2.0 authentication</p>\n-              </div>\n-              <div className=\"bg-green-50 p-6 lg:p-8 rounded-xl\">\n-                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n-                  <Zap className=\"w-6 h-6 text-green-600\" />\n-                </div>\n-                <h3 className=\"font-semibold text-gray-900 mb-2\">Real-time Analysis</h3>\n-                <p className=\"text-sm text-gray-600\">Live campaign monitoring and optimization</p>\n-              </div>\n-              <div className=\"bg-purple-50 p-6 lg:p-8 rounded-xl\">\n-                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n-                  <CheckCircle className=\"w-6 h-6 text-purple-600\" />\n-                </div>\n-                <h3 className=\"font-semibold text-gray-900 mb-2\">Automated Actions</h3>\n-                <p className=\"text-sm text-gray-600\">One-click implementation of AI recommendations</p>\n-              </div>\n-            </div>\n-          </div>\n-        );\n-\n-      case 2:\n-        return (\n-          <div className=\"max-w-6xl mx-auto\">\n-            <div className=\"text-center mb-8 lg:mb-12\">\n-              <h2 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-6\">Connect Your Advertising Accounts</h2>\n-              <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n-                Connect your Google Ads account to get started. Meta Ads is optional and can be added later for cross-platform insights.\n-              </p>\n-            </div>\n-\n-            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12\">\n-              {/* Google Ads Section */}\n-              <div className=\"bg-white border border-gray-200 rounded-xl p-6 lg:p-8\">\n-                <div className=\"text-center mb-6 lg:mb-8\">\n-                  <div className=\"w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n-                    <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"none\">\n-                      <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n-                      <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n-                      <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n-                      <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n-                    </svg>\n-                  </div>\n-                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Google Ads</h3>\n-                  <p className=\"text-gray-600 text-sm\">\n-                    Securely connect your Google Ads account for AI-powered campaign analysis.\n-                  </p>\n-                </div>\n-\n-                <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n-                  <div className=\"flex items-start space-x-3\">\n-                    <Shield className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n-                    <div className=\"text-sm text-gray-600\">\n-                      <p className=\"font-medium text-gray-900 mb-2\">What we'll access:</p>\n-                      <ul className=\"space-y-1\">\n-                        <li>• Campaign performance data (read-only)</li>\n-                        <li>• Account structure and settings</li>\n-                        <li>• Optimization capabilities (with approval)</li>\n-                      </ul>\n-                    </div>\n-                  </div>\n-                </div>\n-\n-                {connectedAccounts.google ? (\n-                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n-                    <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n-                    <h4 className=\"font-semibold text-green-900\">Google Ads Connected!</h4>\n-                    \n-                    {isSyncingGoogleAds ? (\n-                      <div className=\"text-sm text-green-700 mt-2\">\n-                        <div className=\"flex items-center justify-center space-x-2 mb-2\">\n-                          <div className=\"w-4 h-4 border-2 border-green-600 border-t-transparent rounded-full animate-spin\"></div>\n-                          <span>Syncing data...</span>\n-                        </div>\n-                        <p className=\"text-xs text-green-600\">{syncProgress}</p>\n-                      </div>\n-                    ) : isLoadingAccountSummary ? (\n-                      <div className=\"text-sm text-green-700 mt-2\">\n-                        <div className=\"flex items-center justify-center space-x-2\">\n-                          <div className=\"w-4 h-4 border-2 border-green-600 border-t-transparent rounded-full animate-spin\"></div>\n-                          <span>Loading account details...</span>\n-                        </div>\n-                      </div>\n-                    ) : googleAdsAccountSummary ? (\n-                      <div className=\"text-sm text-green-700 mt-2\">\n-                        <p>{googleAdsAccountSummary.total_accounts || 0} active accounts</p>\n-                        <p>{googleAdsAccountSummary.total_campaigns || 0} active campaigns</p>\n-                        {googleAdsAccountSummary.total_spend && (\n-                          <p>${(googleAdsAccountSummary.total_spend / 1000000).toFixed(2)}M monthly spend</p>\n-                        )}\n-                      </div>\n-                    ) : (\n-                      <p className=\"text-sm text-green-700 mt-1\">Account details available</p>\n-                    )}\n-                    \n-                    {/* Add retry button if account summary failed to load */}\n-                    {!isSyncingGoogleAds && !isLoadingAccountSummary && !googleAdsAccountSummary && (\n+                    {/* Check Connection Status button */}\n+                    {!isSyncingGoogleAds && !isLoadingAccountSummary && (\n                       <button\n                         onClick={async () => {\n                           try {\n-                            setIsLoadingAccountSummary(true);\n-                            const summaryResult = await authService.getGoogleAdsAccountSummary();\n-                            if (summaryResult.success) {\n-                              setGoogleAdsAccountSummary(summaryResult.data);\n-                            }\n-                          } catch (error) {\n-                            console.error('Retry failed:', error);\n-                          } finally {\n-                            setIsLoadingAccountSummary(false);\n-                          }\n-                        }}\n-                        className=\"mt-2 text-xs bg-green-100 text-green-700 px-3 py-1 rounded hover:bg-green-200 transition-colors\"\n-                      >\n-                        Refresh Account Data\n-                      </button>\n-                    )}\n-                    \n-                    {/* Manual sync button for refreshing data */}\n-                    {!isSyncingGoogleAds && googleAdsAccountSummary && (\n-                      <button\n-                        onClick={async () => {\n-                          try {\n-                            setIsSyncingGoogleAds(true);\n-                            setSyncProgress('Refreshing data...');\n+                            console.log('Manually checking Google OAuth connection status...');\n+                            const validationResult = await authService.validateGoogleOAuthConnection();\n                             \n-                            const syncResult = await authService.syncGoogleAdsData('weekly', 1);\n-                            if (syncResult.success) {\n-                              setSyncProgress('Data refreshed! Updating summary...');\n+                            if (validationResult.connected) {\n+                              console.log('Connection is valid, refreshing data...');\n+                              setConnectedAccounts(prev => ({ ...prev, google: true }));\n                               \n-                              // Fetch updated account summary\n-                              const summaryResult = await authService.getGoogleAdsAccountSummary();\n-                              if (summaryResult.success) {\n-                                setGoogleAdsAccountSummary(summaryResult.data);\n+                              // Refresh data\n+                              setIsSyncingGoogleAds(true);\n+                              setSyncProgress('Refreshing data...');\n+                              \n+                              const syncResult = await authService.syncGoogleAdsData('weekly', 1);\n+                              if (syncResult.success) {\n+                                setSyncProgress('Data refreshed! Updating summary...');\n+                                \n+                                const summaryResult = await authService.getGoogleAdsAccountSummary();\n+                                if (summaryResult.success) {\n+                                  setGoogleAdsAccountSummary(summaryResult.data);\n+                                }\n+                              } else {\n+                                setConnectionError(`Data refresh failed: ${syncResult.error}`);\n                               }\n                             } else {\n-                              setConnectionError(`Data refresh failed: ${syncResult.error}`);\n+                              console.log('Connection not valid:', validationResult.error);\n+                              setConnectedAccounts(prev => ({ ...prev, google: false }));\n+                              setConnectionError(`Connection not valid: ${validationResult.error}`);\n                             }\n                           } catch (error) {\n-                            console.error('Manual sync failed:', error);\n-                            setConnectionError('Failed to refresh data. Please try again.');\n+                            console.error('Error checking connection status:', error);\n+                            setConnectionError('Failed to check connection status');\n                           } finally {\n                             setIsSyncingGoogleAds(false);\n                             setSyncProgress('');\n                           }\n                         }}\n-                        className=\"mt-2 text-xs bg-blue-100 text-blue-700 px-3 py-1 rounded hover:bg-blue-200 transition-colors\"\n+                        className=\"mt-2 text-xs bg-yellow-100 text-yellow-700 px-3 py-1 rounded hover:bg-yellow-200 transition-colors\"\n                       >\n-                        Refresh Data\n+                        Check Connection\n                       </button>\n                     )}\n                   </div>\n                 ) : (\n"
                },
                {
                    "date": 1755677344730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -479,8 +479,36 @@\n                       >\n                         Check Connection\n                       </button>\n                     )}\n+                    \n+                    {/* Test Popup Button */}\n+                    {!isConnectingGoogle && (\n+                      <button\n+                        onClick={() => {\n+                          console.log('Testing popup functionality...');\n+                          const testWindow = window.open(\n+                            'https://www.google.com',\n+                            'test-popup',\n+                            'width=400,height=300'\n+                          );\n+                          \n+                          if (testWindow) {\n+                            console.log('Test popup opened successfully');\n+                            setTimeout(() => {\n+                              testWindow.close();\n+                              console.log('Test popup closed');\n+                            }, 3000);\n+                          } else {\n+                            console.error('Test popup failed to open');\n+                            setConnectionError('Popup test failed. Your browser is blocking popups. Please allow popups for this site.');\n+                          }\n+                        }}\n+                        className=\"mt-2 text-xs bg-purple-100 text-purple-700 px-3 py-1 rounded hover:bg-purple-200 transition-colors\"\n+                      >\n+                        Test Popup\n+                      </button>\n+                    )}\n                   </div>\n                 ) : (\n                   <div className=\"space-y-3\">\n                     {connectionError && (\n"
                },
                {
                    "date": 1755695082497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useState, useEffect } from 'react';\n import { CheckCircle, ExternalLink, AlertCircle, ArrowRight, Shield, Zap } from 'lucide-react';\n+import { GoogleAdsAccountSummary } from '../types';\n import authService from '../services/authService'; // Added import for authService\n \n interface OnboardingFlowProps {\n   onComplete: () => void;\n@@ -14,9 +15,9 @@\n   });\n   const [isConnectingGoogle, setIsConnectingGoogle] = useState(false);\n   const [isConnectingMeta, setIsConnectingMeta] = useState(false);\n   const [connectionError, setConnectionError] = useState<string | null>(null);\n-  const [googleAdsAccountSummary, setGoogleAdsAccountSummary] = useState<any>(null);\n+  const [googleAdsAccountSummary, setGoogleAdsAccountSummary] = useState<GoogleAdsAccountSummary | null>(null);\n   const [isLoadingAccountSummary, setIsLoadingAccountSummary] = useState(false);\n   const [isSyncingGoogleAds, setIsSyncingGoogleAds] = useState(false);\n   const [syncProgress, setSyncProgress] = useState<string>('');\n \n@@ -52,9 +53,9 @@\n             try {\n               console.log('Fetching Google Ads account summary...');\n               setIsLoadingAccountSummary(true);\n               const summaryResult = await authService.getGoogleAdsAccountSummary();\n-              if (summaryResult.success) {\n+              if (summaryResult.success && summaryResult.data) {\n                 console.log('Account summary fetched successfully:', summaryResult.data);\n                 setGoogleAdsAccountSummary(summaryResult.data);\n               } else {\n                 console.error('Failed to fetch account summary:', summaryResult.error);\n@@ -65,9 +66,9 @@\n                     const refreshResult = await authService.refreshAccessToken();\n                     if (refreshResult.success) {\n                       // Retry fetching account summary with new token\n                       const retryResult = await authService.getGoogleAdsAccountSummary();\n-                      if (retryResult.success) {\n+                      if (retryResult.success && retryResult.data) {\n                         setGoogleAdsAccountSummary(retryResult.data);\n                         return;\n                       }\n                     }\n@@ -138,9 +139,9 @@\n               setSyncProgress('Data sync completed! Fetching account summary...');\n               \n               // Fetch account summary\n               const summaryResult = await authService.getGoogleAdsAccountSummary();\n-              if (summaryResult.success) {\n+              if (summaryResult.success && summaryResult.data) {\n                 setGoogleAdsAccountSummary(summaryResult.data);\n               }\n             } else {\n               console.error('Data sync failed:', syncResult.error);\n@@ -351,13 +352,9 @@\n                         </div>\n                       </div>\n                     ) : googleAdsAccountSummary ? (\n                       <div className=\"text-sm text-green-700 mt-2\">\n-                        <p>{googleAdsAccountSummary.total_accounts || 0} active accounts</p>\n-                        <p>{googleAdsAccountSummary.total_campaigns || 0} active campaigns</p>\n-                        {googleAdsAccountSummary.total_spend && (\n-                          <p>${(googleAdsAccountSummary.total_spend / 1000000).toFixed(2)}M monthly spend</p>\n-                        )}\n+                        <p className=\"font-medium\">{googleAdsAccountSummary.message}</p>\n                       </div>\n                     ) : (\n                       <p className=\"text-sm text-green-700 mt-1\">Account details available</p>\n                     )}\n@@ -368,9 +365,9 @@\n                         onClick={async () => {\n                           try {\n                             setIsLoadingAccountSummary(true);\n                             const summaryResult = await authService.getGoogleAdsAccountSummary();\n-                            if (summaryResult.success) {\n+                            if (summaryResult.success && summaryResult.data) {\n                               setGoogleAdsAccountSummary(summaryResult.data);\n                             }\n                           } catch (error) {\n                             console.error('Retry failed:', error);\n@@ -397,9 +394,9 @@\n                               setSyncProgress('Data refreshed! Updating summary...');\n                               \n                               // Fetch updated account summary\n                               const summaryResult = await authService.getGoogleAdsAccountSummary();\n-                              if (summaryResult.success) {\n+                              if (summaryResult.success && summaryResult.data) {\n                                 setGoogleAdsAccountSummary(summaryResult.data);\n                               }\n                             } else {\n                               setConnectionError(`Data refresh failed: ${syncResult.error}`);\n@@ -455,9 +452,9 @@\n                               if (syncResult.success) {\n                                 setSyncProgress('Data refreshed! Updating summary...');\n                                 \n                                 const summaryResult = await authService.getGoogleAdsAccountSummary();\n-                                if (summaryResult.success) {\n+                                if (summaryResult.success && summaryResult.data) {\n                                   setGoogleAdsAccountSummary(summaryResult.data);\n                                 }\n                               } else {\n                                 setConnectionError(`Data refresh failed: ${syncResult.error}`);\n@@ -743,12 +740,12 @@\n                       <p>• Preparing insights</p>\n                     </>\n                   ) : googleAdsAccountSummary ? (\n                     <>\n-                      <p>• {googleAdsAccountSummary.total_accounts || 0} accounts connected</p>\n-                      <p>• {googleAdsAccountSummary.total_campaigns || 0} active campaigns</p>\n-                      {googleAdsAccountSummary.total_spend ? (\n-                        <p>• ${(googleAdsAccountSummary.total_spend / 1000000).toFixed(2)}M monthly spend</p>\n+                      <p>• {googleAdsAccountSummary.connected_accounts || 0} accounts connected</p>\n+                      <p>• {googleAdsAccountSummary.active_campaigns || 0} active campaigns</p>\n+                      {googleAdsAccountSummary.monthly_spend !== undefined ? (\n+                        <p>• ${googleAdsAccountSummary.monthly_spend.toFixed(2)} monthly spend</p>\n                       ) : (\n                         <p>• Spend data available</p>\n                       )}\n                     </>\n"
                },
                {
                    "date": 1755695167851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -431,81 +431,9 @@\n                         Disconnect\n                       </button>\n                     )}\n                     \n-                    {/* Check Connection Status button */}\n-                    {!isSyncingGoogleAds && !isLoadingAccountSummary && (\n-                      <button\n-                        onClick={async () => {\n-                          try {\n-                            console.log('Manually checking Google OAuth connection status...');\n-                            const validationResult = await authService.validateGoogleOAuthConnection();\n-                            \n-                            if (validationResult.connected) {\n-                              console.log('Connection is valid, refreshing data...');\n-                              setConnectedAccounts(prev => ({ ...prev, google: true }));\n-                              \n-                              // Refresh data\n-                              setIsSyncingGoogleAds(true);\n-                              setSyncProgress('Refreshing data...');\n-                              \n-                              const syncResult = await authService.syncGoogleAdsData('weekly', 1);\n-                              if (syncResult.success) {\n-                                setSyncProgress('Data refreshed! Updating summary...');\n-                                \n-                                const summaryResult = await authService.getGoogleAdsAccountSummary();\n-                                if (summaryResult.success && summaryResult.data) {\n-                                  setGoogleAdsAccountSummary(summaryResult.data);\n-                                }\n-                              } else {\n-                                setConnectionError(`Data refresh failed: ${syncResult.error}`);\n-                              }\n-                            } else {\n-                              console.log('Connection not valid:', validationResult.error);\n-                              setConnectedAccounts(prev => ({ ...prev, google: false }));\n-                              setConnectionError(`Connection not valid: ${validationResult.error}`);\n-                            }\n-                          } catch (error) {\n-                            console.error('Error checking connection status:', error);\n-                            setConnectionError('Failed to check connection status');\n-                          } finally {\n-                            setIsSyncingGoogleAds(false);\n-                            setSyncProgress('');\n-                          }\n-                        }}\n-                        className=\"mt-2 text-xs bg-yellow-100 text-yellow-700 px-3 py-1 rounded hover:bg-yellow-200 transition-colors\"\n-                      >\n-                        Check Connection\n-                      </button>\n-                    )}\n-                    \n-                    {/* Test Popup Button */}\n-                    {!isConnectingGoogle && (\n-                      <button\n-                        onClick={() => {\n-                          console.log('Testing popup functionality...');\n-                          const testWindow = window.open(\n-                            'https://www.google.com',\n-                            'test-popup',\n-                            'width=400,height=300'\n-                          );\n-                          \n-                          if (testWindow) {\n-                            console.log('Test popup opened successfully');\n-                            setTimeout(() => {\n-                              testWindow.close();\n-                              console.log('Test popup closed');\n-                            }, 3000);\n-                          } else {\n-                            console.error('Test popup failed to open');\n-                            setConnectionError('Popup test failed. Your browser is blocking popups. Please allow popups for this site.');\n-                          }\n-                        }}\n-                        className=\"mt-2 text-xs bg-purple-100 text-purple-700 px-3 py-1 rounded hover:bg-purple-200 transition-colors\"\n-                      >\n-                        Test Popup\n-                      </button>\n-                    )}\n+          \n                   </div>\n                 ) : (\n                   <div className=\"space-y-3\">\n                     {connectionError && (\n"
                }
            ],
            "date": 1755589047787,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\nimport { CheckCircle, ExternalLink, AlertCircle, ArrowRight, Shield, Zap } from 'lucide-react';\n\ninterface OnboardingFlowProps {\n  onComplete: () => void;\n}\n\nconst OnboardingFlow: React.FC<OnboardingFlowProps> = ({ onComplete }) => {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [connectedAccounts, setConnectedAccounts] = useState({\n    google: false,\n    meta: false\n  });\n\n  const steps = [\n    { id: 1, title: 'Welcome', description: 'Get started with AI Marketing Assistant' },\n    { id: 2, title: 'Connect Accounts', description: 'Link your advertising accounts' },\n    { id: 3, title: 'Setup Complete', description: 'Start optimizing your campaigns' }\n  ];\n\n  const handleGoogleConnect = () => {\n    // Simulate OAuth flow\n    setTimeout(() => {\n      setConnectedAccounts(prev => ({ ...prev, google: true }));\n    }, 2000);\n  };\n\n  const handleMetaConnect = () => {\n    // Simulate OAuth flow\n    setTimeout(() => {\n      setConnectedAccounts(prev => ({ ...prev, meta: true }));\n    }, 2000);\n  };\n\n  const canProceed = () => {\n    if (currentStep === 2) return connectedAccounts.google && connectedAccounts.meta;\n    return true;\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"text-center\">\n            <div className=\"w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <Zap className=\"w-10 h-10 text-white\" />\n            </div>\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Welcome to AI Marketing Assistant</h2>\n            <p className=\"text-lg text-gray-600 mb-8 max-w-2xl mx-auto\">\n              Transform your advertising performance with AI-powered insights and automated optimization. \n              Let's connect your advertising accounts to get started.\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n              <div className=\"bg-blue-50 p-6 rounded-xl\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Shield className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Secure Integration</h3>\n                <p className=\"text-sm text-gray-600\">Bank-level security with OAuth 2.0 authentication</p>\n              </div>\n              <div className=\"bg-green-50 p-6 rounded-xl\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <Zap className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Real-time Analysis</h3>\n                <p className=\"text-sm text-gray-600\">Live campaign monitoring and optimization</p>\n              </div>\n              <div className=\"bg-purple-50 p-6 rounded-xl\">\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <CheckCircle className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Automated Actions</h3>\n                <p className=\"text-sm text-gray-600\">One-click implementation of AI recommendations</p>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Connect Your Advertising Accounts</h2>\n              <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n                Connect both Google Ads and Meta Ads accounts for comprehensive cross-platform optimization and unified insights.\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Google Ads Section */}\n              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                <div className=\"text-center mb-6\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                    <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"none\">\n                      <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                      <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n                      <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n                      <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n                    </svg>\n                  </div>\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Google Ads</h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Securely connect your Google Ads account for AI-powered campaign analysis.\n                  </p>\n                </div>\n\n                <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Shield className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      <p className=\"font-medium text-gray-900 mb-2\">What we'll access:</p>\n                      <ul className=\"space-y-1\">\n                        <li>• Campaign performance data (read-only)</li>\n                        <li>• Account structure and settings</li>\n                        <li>• Optimization capabilities (with approval)</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n\n                {connectedAccounts.google ? (\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n                    <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n                    <h4 className=\"font-semibold text-green-900\">Google Ads Connected!</h4>\n                    <p className=\"text-sm text-green-700 mt-1\">3 active accounts with 24 campaigns</p>\n                  </div>\n                ) : (\n                  <button\n                    onClick={handleGoogleConnect}\n                    className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n                  >\n                    <ExternalLink className=\"w-5 h-5\" />\n                    <span>Connect Google Ads</span>\n                  </button>\n                )}\n              </div>\n\n              {/* Meta Ads Section */}\n              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                <div className=\"text-center mb-6\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4\">\n                    <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n                      <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                    </svg>\n                  </div>\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Meta Ads</h3>\n                  <p className=\"text-gray-600 text-sm\">\n                    Link your Meta (Facebook/Instagram) advertising account for comprehensive insights.\n                  </p>\n                </div>\n\n                <div className=\"bg-gray-50 rounded-lg p-4 mb-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Shield className=\"w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n                    <div className=\"text-sm text-gray-600\">\n                      <p className=\"font-medium text-gray-900 mb-2\">What we'll access:</p>\n                      <ul className=\"space-y-1\">\n                        <li>• Ad account performance metrics</li>\n                        <li>• Campaign and ad set data</li>\n                        <li>• Audience insights and demographics</li>\n                        <li>• Campaign management capabilities</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n\n                {connectedAccounts.meta ? (\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n                    <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n                    <h4 className=\"font-semibold text-green-900\">Meta Ads Connected!</h4>\n                    <p className=\"text-sm text-green-700 mt-1\">2 ad accounts with 18 campaigns</p>\n                  </div>\n                ) : (\n                  <button\n                    onClick={handleMetaConnect}\n                    className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n                  >\n                    <ExternalLink className=\"w-5 h-5\" />\n                    <span>Connect Meta Ads</span>\n                  </button>\n                )}\n              </div>\n            </div>\n\n            {/* Cross-Platform Benefits */}\n            <div className=\"mt-8 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl p-6\">\n              <div className=\"text-center\">\n                <h4 className=\"text-lg font-semibold text-blue-900 mb-3\">Cross-Platform Benefits</h4>\n                <p className=\"text-blue-800 mb-4\">\n                  With both platforms connected, you'll get unified insights and cross-platform optimization recommendations.\n                </p>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                    <span>Unified dashboard view</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                    <span>Cross-platform insights</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                    <span>Integrated optimization</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"text-center\">\n            <div className=\"w-20 h-20 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <CheckCircle className=\"w-10 h-10 text-green-600\" />\n            </div>\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Setup Complete!</h2>\n            <p className=\"text-lg text-gray-600 mb-8 max-w-2xl mx-auto\">\n              Your accounts are now connected and we're analyzing your campaign data. \n              You can start getting AI-powered insights and optimizations right away.\n            </p>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto mb-8\">\n              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"none\">\n                    <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                    <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n                    <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n                    <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n                  </svg>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Google Ads</h3>\n                    <p className=\"text-sm text-green-600\">Connected ✓</p>\n                  </div>\n                </div>\n                <div className=\"text-left space-y-2 text-sm text-gray-600\">\n                  <p>• 3 accounts connected</p>\n                  <p>• 24 active campaigns</p>\n                  <p>• $45,230 monthly spend</p>\n                </div>\n              </div>\n\n              <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <svg className=\"w-8 h-8\" viewBox=\"0 0 24 24\" fill=\"#1877F2\">\n                    <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                  </svg>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Meta Ads</h3>\n                    <p className=\"text-sm text-green-600\">Connected ✓</p>\n                  </div>\n                </div>\n                <div className=\"text-left space-y-2 text-sm text-gray-600\">\n                  <p>• 2 ad accounts connected</p>\n                  <p>• 18 active campaigns</p>\n                  <p>• $32,180 monthly spend</p>\n                </div>\n              </div>\n            </div>\n\n            <button\n              onClick={onComplete}\n              className=\"bg-blue-600 text-white py-3 px-8 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center space-x-2 mx-auto\"\n            >\n              <span>Start Using AI Marketing Assistant</span>\n              <ArrowRight className=\"w-5 h-5\" />\n            </button>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4\">\n      <div className=\"max-w-6xl w-full\">\n        {/* Progress Steps */}\n        <div className=\"flex items-center justify-center mb-12\">\n          {steps.map((step, index) => (\n            <div key={step.id} className=\"flex items-center\">\n              <div className={`flex items-center space-x-3 ${\n                currentStep >= step.id ? 'text-blue-600' : 'text-gray-400'\n              }`}>\n                <div className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold ${\n                  currentStep > step.id \n                    ? 'bg-blue-600 text-white' \n                    : currentStep === step.id\n                    ? 'bg-blue-100 text-blue-600 border-2 border-blue-600'\n                    : 'bg-gray-200 text-gray-500'\n                }`}>\n                  {currentStep > step.id ? (\n                    <CheckCircle className=\"w-5 h-5\" />\n                  ) : (\n                    step.id\n                  )}\n                </div>\n                <div className=\"hidden md:block\">\n                  <p className=\"font-medium\">{step.title}</p>\n                  <p className=\"text-sm opacity-75\">{step.description}</p>\n                </div>\n              </div>\n              {index < steps.length - 1 && (\n                <div className={`w-16 h-0.5 mx-4 ${\n                  currentStep > step.id ? 'bg-blue-600' : 'bg-gray-300'\n                }`} />\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Step Content */}\n        <div className=\"bg-white rounded-2xl shadow-xl p-8 border border-gray-100\">\n          {renderStepContent()}\n        </div>\n\n        {/* Navigation */}\n        {currentStep < 3 && (\n          <div className=\"flex justify-between mt-8\">\n            <button\n              onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n              disabled={currentStep === 1}\n              className=\"px-6 py-2 text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n            >\n              Previous\n            </button>\n            <button\n              onClick={() => setCurrentStep(Math.min(3, currentStep + 1))}\n              disabled={!canProceed()}\n              className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n            >\n              <span>Next</span>\n              <ArrowRight className=\"w-4 h-4\" />\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default OnboardingFlow;"
        }
    ]
}