{
    "sourceFile": "src/components/AIChatBox.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1756097033901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756099904709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,74 @@\n       setIsLoading(false);\n     }\n   };\n \n+  const handleActionClick = (actionId: string) => {\n+    let message = '';\n+    \n+    switch (actionId) {\n+      case 'connect_accounts':\n+        message = \"Connect my Google Ads accounts\";\n+        break;\n+      case 'create_campaign':\n+        message = \"Help me create a new Google Ads campaign\";\n+        break;\n+      case 'optimize_campaign':\n+        message = \"Optimize my existing campaigns for better performance\";\n+        break;\n+      case 'check_campaign_consistency':\n+        message = \"Check keyword-ad consistency and ad group alignment\";\n+        break;\n+      case 'check_sitelinks':\n+        message = \"Check if 4-6 sitelinks are present and optimized\";\n+        break;\n+      case 'check_landing_page_url':\n+        message = \"Validate landing page URL functionality and keyword relevance\";\n+        break;\n+      case 'check_duplicate_keywords':\n+        message = \"Identify duplicate keywords across campaigns and ad groups\";\n+        break;\n+      case 'analyze_keyword_trends':\n+        message = \"Monitor high-potential keywords with increasing search volume\";\n+        break;\n+      case 'analyze_auction_insights':\n+        message = \"Analyze competition and competitor ad strategies\";\n+        break;\n+      case 'analyze_search_terms':\n+        message = \"Review search terms for negative keyword opportunities\";\n+        break;\n+      case 'analyze_ads_showing_time':\n+        message = \"Analyze hour-of-day performance for bid optimization\";\n+        break;\n+      case 'analyze_device_performance_detailed':\n+        message = \"Analyze device performance for bid adjustments\";\n+        break;\n+      case 'analyze_location_performance':\n+        message = \"Analyze city-level performance and optimization\";\n+        break;\n+      case 'analyze_landing_page_mobile':\n+        message = \"Check mobile speed score and optimization\";\n+        break;\n+      case 'optimize_tcpa':\n+        message = \"Provide Target CPA optimization recommendations\";\n+        break;\n+      case 'optimize_budget_allocation':\n+        message = \"Optimize campaign budget allocation\";\n+        break;\n+      case 'suggest_negative_keywords':\n+        message = \"Suggest negative keyword exclusions\";\n+        break;\n+      default:\n+        message = `I want to ${actionId.replace(/_/g, ' ')}`;\n+    }\n+\n+    if (message) {\n+      setInputMessage(message);\n+      // Small delay to ensure message is set before sending\n+      setTimeout(() => handleSendMessage(), 100);\n+    }\n+  };\n+\n   const renderMessage = (message: any) => {\n     if (message.role === 'user') {\n       return (\n         <div className=\"flex justify-end mb-4\">\n@@ -156,8 +222,130 @@\n       case 'chart':\n         return <ChartBlock {...block} />;\n       case 'metric':\n         return <MetricBlock {...block} />;\n+      \n+      // Google Ads analysis blocks\n+      case 'budget_optimizations':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Budget Optimization Recommendations</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Budget optimization analysis will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'campaign_consistency_analysis':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Campaign Consistency Analysis</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Campaign consistency analysis will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'sitelink_analysis':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Sitelink Analysis</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Sitelink analysis will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'landing_page_analysis':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Landing Page Analysis</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Landing page analysis will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'duplicate_keyword_analysis':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Duplicate Keyword Analysis</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Duplicate keyword analysis will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'keyword_trends_analysis':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Keyword Trends Analysis</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Keyword trends analysis will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'auction_insights_analysis':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Auction Insights Analysis</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Auction insights analysis will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'search_term_analysis':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Search Term Analysis</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Search term analysis will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'ads_showing_time_analysis':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Ads Showing Time Analysis</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Ads showing time analysis will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'device_performance_detailed_analysis':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Device Performance Analysis</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Device performance analysis will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'location_performance_analysis':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Location Performance Analysis</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Location performance analysis will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'landing_page_mobile_analysis':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Mobile Landing Page Analysis</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Mobile landing page analysis will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'tcpa_optimizations':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">TCPA Optimization Recommendations</h3>\n+            <div className=\"text-gray-700\">{block.content || 'TCPA optimization recommendations will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'budget_allocation_optimizations':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Budget Allocation Optimization</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Budget allocation optimization will appear here.'}</div>\n+          </div>\n+        );\n+      \n+      case 'negative_keyword_suggestions':\n+        return (\n+          <div className=\"bg-white rounded-lg border p-4\">\n+            <h3 className=\"font-semibold text-gray-800 mb-3\">Negative Keyword Suggestions</h3>\n+            <div className=\"text-gray-700\">{block.content || 'Negative keyword suggestions will appear here.'}</div>\n+          </div>\n+        );\n+      \n       default:\n         return <div>Unsupported block type: {block.type}</div>;\n     }\n   };\n@@ -169,8 +357,38 @@\n         <h2 className=\"text-lg font-semibold\">AI Marketing Assistant</h2>\n         <p className=\"text-sm text-gray-600\">Ask me about your Google Ads campaigns</p>\n       </div>\n \n+      {/* Quick Action Buttons */}\n+      <div className=\"bg-white border-b px-4 py-3\">\n+        <div className=\"flex flex-wrap gap-2\">\n+          <button\n+            onClick={() => handleActionClick('optimize_campaign')}\n+            className=\"bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition-colors\"\n+          >\n+            Optimize Campaign\n+          </button>\n+          <button\n+            onClick={() => handleActionClick('check_campaign_consistency')}\n+            className=\"bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors\"\n+          >\n+            Check Consistency\n+          </button>\n+          <button\n+            onClick={() => handleActionClick('check_sitelinks')}\n+            className=\"bg-teal-500 text-white px-4 py-2 rounded-lg hover:bg-teal-600 transition-colors\"\n+          >\n+            Check Sitelinks\n+          </button>\n+          <button\n+            onClick={() => handleActionClick('analyze_keyword_trends')}\n+            className=\"bg-pink-500 text-white px-4 py-2 rounded-lg hover:bg-pink-600 transition-colors\"\n+          >\n+            Keyword Trends\n+          </button>\n+        </div>\n+      </div>\n+\n       {/* Messages */}\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n         {messages.map(renderMessage)}\n         {isLoading && (\n"
                },
                {
                    "date": 1756108073166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n   ActionBlock, \n   ChartBlock, \n   MetricBlock \n } from './ChatBlocks';\n+import AnalysisBlock from './AnalysisBlock';\n \n interface AIChatBoxProps {\n   token: string;\n   className?: string;\n@@ -76,16 +77,31 @@\n     try {\n       const response = await chatApi.sendMessage(inputMessage, currentSessionId);\n       \n       if (response.success) {\n-        const aiMessage = {\n-          id: Date.now() + 1,\n-          role: 'assistant',\n-          response: response.response,\n-          intent: response.intent,\n-          timestamp: new Date().toISOString(),\n-        };\n-        setMessages(prev => [...prev, aiMessage]);\n+        // Handle RAG responses\n+        if (response.rag_enhanced_response) {\n+          const ragResponse = {\n+            id: Date.now() + 1,\n+            role: 'assistant',\n+            type: 'rag_enhanced_response',\n+            content: response.rag_enhanced_response,\n+            metadata: response.rag_enhanced_response.rag_metadata,\n+            response_type: response.rag_enhanced_response.response_type,\n+            timestamp: new Date().toISOString(),\n+          };\n+          setMessages(prev => [...prev, ragResponse]);\n+        } else {\n+          // Handle regular responses\n+          const aiMessage = {\n+            id: Date.now() + 1,\n+            role: 'assistant',\n+            response: response.response,\n+            intent: response.intent,\n+            timestamp: new Date().toISOString(),\n+          };\n+          setMessages(prev => [...prev, aiMessage]);\n+        }\n       } else {\n         // Handle error\n         const errorMessage = {\n           id: Date.now() + 1,\n@@ -186,8 +202,32 @@\n       );\n     }\n \n     if (message.role === 'assistant') {\n+      // Handle RAG enhanced responses\n+      if (message.type === 'rag_enhanced_response') {\n+        return (\n+          <div className=\"flex justify-start mb-4\">\n+            <div className=\"rag-response border-l-4 border-purple-500 bg-purple-50 p-4 rounded-lg max-w-xs lg:max-w-md\">\n+              <div className=\"rag-header mb-3\">\n+                <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n+                  RAG Enhanced\n+                </span>\n+                <span className=\"ml-2 text-sm text-purple-600\">\n+                  {message.response_type === 'rag' ? 'Knowledge Base + AI' : 'Direct AI'}\n+                </span>\n+              </div>\n+              <AnalysisBlock \n+                type=\"rag_enhanced\" \n+                content={message.content} \n+                metadata={message.metadata}\n+              />\n+            </div>\n+          </div>\n+        );\n+      }\n+\n+      // Handle regular responses\n       return (\n         <div className=\"flex justify-start mb-4\">\n           <div className=\"bg-gray-100 rounded-lg px-4 py-2 max-w-xs lg:max-w-md\">\n             {message.response?.blocks ? (\n@@ -226,124 +266,154 @@\n       \n       // Google Ads analysis blocks\n       case 'budget_optimizations':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Budget Optimization Recommendations</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Budget optimization analysis will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"budget_optimizations\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'campaign_consistency_analysis':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Campaign Consistency Analysis</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Campaign consistency analysis will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"campaign_consistency_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'sitelink_analysis':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Sitelink Analysis</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Sitelink analysis will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"sitelink_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'landing_page_analysis':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Landing Page Analysis</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Landing page analysis will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"landing_page_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'duplicate_keyword_analysis':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Duplicate Keyword Analysis</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Duplicate keyword analysis will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"duplicate_keyword_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'keyword_trends_analysis':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Keyword Trends Analysis</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Keyword trends analysis will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"keyword_trends_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'auction_insights_analysis':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Auction Insights Analysis</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Auction insights analysis will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"auction_insights_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'search_term_analysis':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Search Term Analysis</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Search term analysis will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"search_term_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'ads_showing_time_analysis':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Ads Showing Time Analysis</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Ads showing time analysis will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"ads_showing_time_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'device_performance_detailed_analysis':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Device Performance Analysis</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Device performance analysis will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"device_performance_detailed_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'location_performance_analysis':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Location Performance Analysis</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Location performance analysis will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"location_performance_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'landing_page_mobile_analysis':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Mobile Landing Page Analysis</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Mobile landing page analysis will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"landing_page_mobile_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'tcpa_optimizations':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">TCPA Optimization Recommendations</h3>\n-            <div className=\"text-gray-700\">{block.content || 'TCPA optimization recommendations will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"tcpa_optimizations\"\n+          content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'budget_allocation_optimizations':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Budget Allocation Optimization</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Budget allocation optimization will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"budget_allocation_optimizations\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       case 'negative_keyword_suggestions':\n         return (\n-          <div className=\"bg-white rounded-lg border p-4\">\n-            <h3 className=\"font-semibold text-gray-800 mb-3\">Negative Keyword Suggestions</h3>\n-            <div className=\"text-gray-700\">{block.content || 'Negative keyword suggestions will appear here.'}</div>\n-          </div>\n+          <AnalysisBlock\n+            type=\"negative_keyword_suggestions\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n         );\n       \n       default:\n         return <div>Unsupported block type: {block.type}</div>;\n"
                },
                {
                    "date": 1756112730711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -459,9 +459,13 @@\n       </div>\n \n       {/* Messages */}\n       <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-        {messages.map(renderMessage)}\n+        {messages.map((message) => (\n+          <div key={message.id}>\n+            {renderMessage(message)}\n+          </div>\n+        ))}\n         {isLoading && (\n           <div className=\"flex justify-start mb-4\">\n             <div className=\"bg-gray-100 rounded-lg px-4 py-2\">\n               <div className=\"flex space-x-2\">\n"
                },
                {
                    "date": 1756360778832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,10 @@\n   TableBlock, \n   ListBlock, \n   ActionBlock, \n   ChartBlock, \n-  MetricBlock \n+  MetricBlock,\n+  DigDeeperBlock\n } from './ChatBlocks';\n import AnalysisBlock from './AnalysisBlock';\n \n interface AIChatBoxProps {\n@@ -190,8 +191,15 @@\n       setTimeout(() => handleSendMessage(), 100);\n     }\n   };\n \n+  const handleDigDeeper = (actionId: string, currentDepth: number) => {\n+    const message = `Dig deeper into ${actionId.replace(/_/g, ' ')} at level ${currentDepth + 1}`;\n+    setInputMessage(message);\n+    // Small delay to ensure message is set before sending\n+    setTimeout(() => handleSendMessage(), 100);\n+  };\n+\n   const renderMessage = (message: any) => {\n     if (message.role === 'user') {\n       return (\n         <div className=\"flex justify-end mb-4\">\n@@ -262,8 +270,19 @@\n       case 'chart':\n         return <ChartBlock {...block} />;\n       case 'metric':\n         return <MetricBlock {...block} />;\n+      case 'dig_deeper':\n+        return (\n+          <DigDeeperBlock\n+            title={block.title || 'Dig Deeper'}\n+            description={block.description || 'Explore this topic in more detail'}\n+            action_id={block.action_id || 'dig_deeper'}\n+            current_depth={block.current_depth || 1}\n+            max_depth={block.max_depth || 3}\n+            onDigDeeper={handleDigDeeper}\n+          />\n+        );\n       \n       // Google Ads analysis blocks\n       case 'budget_optimizations':\n         return (\n"
                },
                {
                    "date": 1756361352112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,526 @@\n+import React, { useState, useEffect, useRef } from 'react';\n+import ChatApiService from '../services/chatApi';\n+import { \n+  TextBlock, \n+  TableBlock, \n+  ListBlock, \n+  ActionBlock, \n+  ChartBlock, \n+  MetricBlock,\n+  DigDeeperBlock\n+} from './ChatBlocks';\n+import AnalysisBlock from './AnalysisBlock';\n+\n+interface AIChatBoxProps {\n+  token: string;\n+  className?: string;\n+}\n+\n+const AIChatBox: React.FC<AIChatBoxProps> = ({ token, className = '' }) => {\n+  const [messages, setMessages] = useState<any[]>([]);\n+  const [inputMessage, setInputMessage] = useState('');\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null);\n+  const [sessions, setSessions] = useState<any[]>([]);\n+  \n+  const chatApi = new ChatApiService(token);\n+  const messagesEndRef = useRef<HTMLDivElement>(null);\n+\n+  useEffect(() => {\n+    loadSessions();\n+    createNewSession();\n+  }, []);\n+\n+  useEffect(() => {\n+    scrollToBottom();\n+  }, [messages]);\n+\n+  const scrollToBottom = () => {\n+    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n+  };\n+\n+  const loadSessions = async () => {\n+    try {\n+      const response = await chatApi.getSessions();\n+      if (response.success) {\n+        setSessions(response.sessions || []);\n+      }\n+    } catch (error) {\n+      console.error('Failed to load sessions:', error);\n+    }\n+  };\n+\n+  const createNewSession = async () => {\n+    try {\n+      const response = await chatApi.createSession('New Chat Session');\n+      if (response.success) {\n+        setCurrentSessionId(response.session_id);\n+      }\n+    } catch (error) {\n+      console.error('Failed to create session:', error);\n+    }\n+  };\n+\n+  const handleSendMessage = async () => {\n+    if (!inputMessage.trim() || !currentSessionId) return;\n+\n+    const userMessage = {\n+      id: Date.now(),\n+      role: 'user',\n+      content: inputMessage,\n+      timestamp: new Date().toISOString(),\n+    };\n+\n+    setMessages(prev => [...prev, userMessage]);\n+    setInputMessage('');\n+    setIsLoading(true);\n+\n+    try {\n+      const response = await chatApi.sendMessage(inputMessage, currentSessionId);\n+      \n+      if (response.success) {\n+        // Handle RAG responses\n+        if (response.rag_enhanced_response) {\n+          const ragResponse = {\n+            id: Date.now() + 1,\n+            role: 'assistant',\n+            type: 'rag_enhanced_response',\n+            content: response.rag_enhanced_response,\n+            metadata: response.rag_enhanced_response.rag_metadata,\n+            response_type: response.rag_enhanced_response.response_type,\n+            timestamp: new Date().toISOString(),\n+          };\n+          setMessages(prev => [...prev, ragResponse]);\n+        } else {\n+          // Handle regular responses\n+          const aiMessage = {\n+            id: Date.now() + 1,\n+            role: 'assistant',\n+            response: response.response,\n+            intent: response.intent,\n+            timestamp: new Date().toISOString(),\n+          };\n+          setMessages(prev => [...prev, aiMessage]);\n+        }\n+      } else {\n+        // Handle error\n+        const errorMessage = {\n+          id: Date.now() + 1,\n+          role: 'assistant',\n+          content: `Error: ${response.error}`,\n+          timestamp: new Date().toISOString(),\n+        };\n+        setMessages(prev => [...prev, errorMessage]);\n+      }\n+    } catch (error) {\n+      console.error('Failed to send message:', error);\n+      const errorMessage = {\n+        id: Date.now() + 1,\n+        role: 'assistant',\n+        content: 'Failed to send message. Please try again.',\n+        timestamp: new Date().toISOString(),\n+      };\n+      setMessages(prev => [...prev, errorMessage]);\n+    } finally {\n+      setIsLoading(false);\n+    }\n+  };\n+\n+  const handleActionClick = (actionId: string) => {\n+    let message = '';\n+    \n+    switch (actionId) {\n+      case 'connect_accounts':\n+        message = \"Connect my Google Ads accounts\";\n+        break;\n+      case 'create_campaign':\n+        message = \"Help me create a new Google Ads campaign\";\n+        break;\n+      case 'optimize_campaign':\n+        message = \"Optimize my existing campaigns for better performance\";\n+        break;\n+      case 'check_campaign_consistency':\n+        message = \"Check keyword-ad consistency and ad group alignment\";\n+        break;\n+      case 'check_sitelinks':\n+        message = \"Check if 4-6 sitelinks are present and optimized\";\n+        break;\n+      case 'check_landing_page_url':\n+        message = \"Validate landing page URL functionality and keyword relevance\";\n+        break;\n+      case 'check_duplicate_keywords':\n+        message = \"Identify duplicate keywords across campaigns and ad groups\";\n+        break;\n+      case 'analyze_keyword_trends':\n+        message = \"Monitor high-potential keywords with increasing search volume\";\n+        break;\n+      case 'analyze_auction_insights':\n+        message = \"Analyze competition and competitor ad strategies\";\n+        break;\n+      case 'analyze_search_terms':\n+        message = \"Review search terms for negative keyword opportunities\";\n+        break;\n+      case 'analyze_ads_showing_time':\n+        message = \"Analyze hour-of-day performance for bid optimization\";\n+        break;\n+      case 'analyze_device_performance_detailed':\n+        message = \"Analyze device performance for bid adjustments\";\n+        break;\n+      case 'analyze_location_performance':\n+        message = \"Analyze city-level performance and optimization\";\n+        break;\n+      case 'analyze_landing_page_mobile':\n+        message = \"Check mobile speed score and optimization\";\n+        break;\n+      case 'optimize_tcpa':\n+        message = \"Provide Target CPA optimization recommendations\";\n+        break;\n+      case 'optimize_budget_allocation':\n+        message = \"Optimize campaign budget allocation\";\n+        break;\n+      case 'suggest_negative_keywords':\n+        message = \"Suggest negative keyword exclusions\";\n+        break;\n+      default:\n+        message = `I want to ${actionId.replace(/_/g, ' ')}`;\n+    }\n+\n+    if (message) {\n+      setInputMessage(message);\n+      // Small delay to ensure message is set before sending\n+      setTimeout(() => handleSendMessage(), 100);\n+    }\n+  };\n+\n+  const handleDigDeeper = (actionId: string, currentDepth: number) => {\n+    const message = `Dig deeper into ${actionId.replace(/_/g, ' ')} at level ${currentDepth + 1}`;\n+    setInputMessage(message);\n+    // Small delay to ensure message is set before sending\n+    setTimeout(() => handleSendMessage(), 100);\n+  };\n+\n+  const renderMessage = (message: any) => {\n+    if (message.role === 'user') {\n+      return (\n+        <div className=\"flex justify-end mb-4\">\n+          <div className=\"bg-blue-500 text-white rounded-lg px-4 py-2 max-w-xs lg:max-w-md\">\n+            {message.content}\n+          </div>\n+        </div>\n+      );\n+    }\n+\n+    if (message.role === 'assistant') {\n+      // Handle RAG enhanced responses\n+      if (message.type === 'rag_enhanced_response') {\n+        return (\n+          <div className=\"flex justify-start mb-4\">\n+            <div className=\"rag-response border-l-4 border-purple-500 bg-purple-50 p-4 rounded-lg max-w-xs lg:max-w-md\">\n+              <div className=\"rag-header mb-3\">\n+                <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n+                  RAG Enhanced\n+                </span>\n+                <span className=\"ml-2 text-sm text-purple-600\">\n+                  {message.response_type === 'rag' ? 'Knowledge Base + AI' : 'Direct AI'}\n+                </span>\n+              </div>\n+              <AnalysisBlock \n+                type=\"rag_enhanced\" \n+                content={message.content} \n+                metadata={message.metadata}\n+              />\n+            </div>\n+          </div>\n+        );\n+      }\n+\n+      // Handle regular responses\n+      return (\n+        <div className=\"flex justify-start mb-4\">\n+          {message.response?.blocks ? (\n+            <div className=\"space-y-3 w-full max-w-4xl\">\n+              {message.response.blocks.map((block: any, index: number) => (\n+                <div key={index}>\n+                  {renderBlock(block)}\n+                </div>\n+              ))}\n+            </div>\n+          ) : (\n+            <div className=\"bg-gray-100 rounded-lg px-4 py-2 max-w-xs lg:max-w-md\">\n+              <div>{message.content}</div>\n+            </div>\n+          )}\n+        </div>\n+      );\n+    }\n+\n+    return null;\n+  };\n+\n+  const renderBlock = (block: any) => {\n+    switch (block.type) {\n+      case 'text':\n+        return <TextBlock {...block} />;\n+      case 'table':\n+        return <TableBlock {...block} />;\n+      case 'list':\n+        return <ListBlock {...block} />;\n+      case 'actions':\n+        return <ActionBlock {...block} />;\n+      case 'chart':\n+        return <ChartBlock {...block} />;\n+      case 'metric':\n+        return <MetricBlock {...block} />;\n+      case 'dig_deeper':\n+        return (\n+          <DigDeeperBlock\n+            title={block.title || 'Dig Deeper'}\n+            description={block.description || 'Explore this topic in more detail'}\n+            action_id={block.action_id || 'dig_deeper'}\n+            current_depth={block.current_depth || 1}\n+            max_depth={block.max_depth || 3}\n+            onDigDeeper={handleDigDeeper}\n+          />\n+        );\n+      \n+      // Google Ads analysis blocks\n+      case 'budget_optimizations':\n+        return (\n+          <AnalysisBlock\n+            type=\"budget_optimizations\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'campaign_consistency_analysis':\n+        return (\n+          <AnalysisBlock\n+            type=\"campaign_consistency_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'sitelink_analysis':\n+        return (\n+          <AnalysisBlock\n+            type=\"sitelink_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'landing_page_analysis':\n+        return (\n+          <AnalysisBlock\n+            type=\"landing_page_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'duplicate_keyword_analysis':\n+        return (\n+          <AnalysisBlock\n+            type=\"duplicate_keyword_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'keyword_trends_analysis':\n+        return (\n+          <AnalysisBlock\n+            type=\"keyword_trends_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'auction_insights_analysis':\n+        return (\n+          <AnalysisBlock\n+            type=\"auction_insights_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'search_term_analysis':\n+        return (\n+          <AnalysisBlock\n+            type=\"search_term_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'ads_showing_time_analysis':\n+        return (\n+          <AnalysisBlock\n+            type=\"ads_showing_time_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'device_performance_detailed_analysis':\n+        return (\n+          <AnalysisBlock\n+            type=\"device_performance_detailed_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'location_performance_analysis':\n+        return (\n+          <AnalysisBlock\n+            type=\"location_performance_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'landing_page_mobile_analysis':\n+        return (\n+          <AnalysisBlock\n+            type=\"landing_page_mobile_analysis\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'tcpa_optimizations':\n+        return (\n+          <AnalysisBlock\n+            type=\"tcpa_optimizations\"\n+          content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'budget_allocation_optimizations':\n+        return (\n+          <AnalysisBlock\n+            type=\"budget_allocation_optimizations\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      case 'negative_keyword_suggestions':\n+        return (\n+          <AnalysisBlock\n+            type=\"negative_keyword_suggestions\"\n+            content={block}\n+            account={block.account}\n+            timestamp={block.timestamp}\n+          />\n+        );\n+      \n+      default:\n+        return <div>Unsupported block type: {block.type}</div>;\n+    }\n+  };\n+\n+  return (\n+    <div className={`flex flex-col h-full ${className}`}>\n+      {/* Header */}\n+      <div className=\"bg-white border-b px-4 py-3\">\n+        <h2 className=\"text-lg font-semibold\">AI Marketing Assistant</h2>\n+        <p className=\"text-sm text-gray-600\">Ask me about your Google Ads campaigns</p>\n+      </div>\n+\n+      {/* Quick Action Buttons */}\n+      <div className=\"bg-white border-b px-4 py-3\">\n+        <div className=\"flex flex-wrap gap-2\">\n+          <button\n+            onClick={() => handleActionClick('optimize_campaign')}\n+            className=\"bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition-colors\"\n+          >\n+            Optimize Campaign\n+          </button>\n+          <button\n+            onClick={() => handleActionClick('check_campaign_consistency')}\n+            className=\"bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors\"\n+          >\n+            Check Consistency\n+          </button>\n+          <button\n+            onClick={() => handleActionClick('check_sitelinks')}\n+            className=\"bg-teal-500 text-white px-4 py-2 rounded-lg hover:bg-teal-600 transition-colors\"\n+          >\n+            Check Sitelinks\n+          </button>\n+          <button\n+            onClick={() => handleActionClick('analyze_keyword_trends')}\n+            className=\"bg-pink-500 text-white px-4 py-2 rounded-lg hover:bg-pink-600 transition-colors\"\n+          >\n+            Keyword Trends\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Messages */}\n+      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n+        {messages.map((message) => (\n+          <div key={message.id}>\n+            {renderMessage(message)}\n+          </div>\n+        ))}\n+        {isLoading && (\n+          <div className=\"flex justify-start mb-4\">\n+            <div className=\"bg-gray-100 rounded-lg px-4 py-2\">\n+              <div className=\"flex space-x-2\">\n+                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n+                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n+                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n+              </div>\n+            </div>\n+          </div>\n+        )}\n+        <div ref={messagesEndRef} />\n+      </div>\n+\n+      {/* Input */}\n+      <div className=\"bg-white border-t p-4\">\n+        <div className=\"flex space-x-2\">\n+          <input\n+            type=\"text\"\n+            value={inputMessage}\n+            onChange={(e) => setInputMessage(e.target.value)}\n+            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n+            placeholder=\"Ask about your campaigns, performance, or create new ads...\"\n+            className=\"flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n+            disabled={isLoading}\n+          />\n+          <button\n+            onClick={handleSendMessage}\n+            disabled={isLoading || !inputMessage.trim()}\n+            className=\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n+          >\n+            Send\n+          </button>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default AIChatBox;\n"
                },
                {
                    "date": 1756370566037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,11 @@\n   ListBlock, \n   ActionBlock, \n   ChartBlock, \n   MetricBlock,\n-  DigDeeperBlock\n+  DigDeeperBlock,\n+  CreativeBlock,\n+  WorkflowBlock\n } from './ChatBlocks';\n import AnalysisBlock from './AnalysisBlock';\n \n interface AIChatBoxProps {\n@@ -282,534 +284,33 @@\n             onDigDeeper={handleDigDeeper}\n           />\n         );\n       \n-      // Google Ads analysis blocks\n-      case 'budget_optimizations':\n+      case 'creative':\n         return (\n-          <AnalysisBlock\n-            type=\"budget_optimizations\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n+          <CreativeBlock\n+            title={block.title || 'Creative Suggestions'}\n+            description={block.description || 'Creative elements for your campaign'}\n+            template_type={block.template_type || 'Marketing'}\n+            features={block.features || []}\n+            advantages={block.advantages || []}\n+            cta_suggestions={block.cta_suggestions || []}\n+            color_scheme={block.color_scheme || 'Default'}\n+            target_audience={block.target_audience || 'General'}\n+            image_url={block.image_url}\n           />\n         );\n       \n-      case 'campaign_consistency_analysis':\n+      case 'workflow':\n         return (\n-          <AnalysisBlock\n-            type=\"campaign_consistency_analysis\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n+          <WorkflowBlock\n+            title={block.title || 'Implementation Workflow'}\n+            steps={block.steps || []}\n+            tools={block.tools || []}\n+            tips={block.tips || []}\n           />\n         );\n       \n-      case 'sitelink_analysis':\n-        return (\n-          <AnalysisBlock\n-            type=\"sitelink_analysis\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n-          />\n-        );\n-      \n-      case 'landing_page_analysis':\n-        return (\n-          <AnalysisBlock\n-            type=\"landing_page_analysis\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n-          />\n-        );\n-      \n-      case 'duplicate_keyword_analysis':\n-        return (\n-          <AnalysisBlock\n-            type=\"duplicate_keyword_analysis\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n-          />\n-        );\n-      \n-      case 'keyword_trends_analysis':\n-        return (\n-          <AnalysisBlock\n-            type=\"keyword_trends_analysis\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n-          />\n-        );\n-      \n-      case 'auction_insights_analysis':\n-        return (\n-          <AnalysisBlock\n-            type=\"auction_insights_analysis\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n-          />\n-        );\n-      \n-      case 'search_term_analysis':\n-        return (\n-          <AnalysisBlock\n-            type=\"search_term_analysis\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n-          />\n-        );\n-      \n-      case 'ads_showing_time_analysis':\n-        return (\n-          <AnalysisBlock\n-            type=\"ads_showing_time_analysis\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n-          />\n-        );\n-      \n-      case 'device_performance_detailed_analysis':\n-        return (\n-          <AnalysisBlock\n-            type=\"device_performance_detailed_analysis\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n-          />\n-        );\n-      \n-      case 'location_performance_analysis':\n-        return (\n-          <AnalysisBlock\n-            type=\"location_performance_analysis\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n-          />\n-        );\n-      \n-      case 'landing_page_mobile_analysis':\n-        return (\n-          <AnalysisBlock\n-            type=\"landing_page_mobile_analysis\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n-          />\n-        );\n-      \n-      case 'tcpa_optimizations':\n-        return (\n-          <AnalysisBlock\n-            type=\"tcpa_optimizations\"\n-          content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n-          />\n-        );\n-      \n-      case 'budget_allocation_optimizations':\n-        return (\n-          <AnalysisBlock\n-            type=\"budget_allocation_optimizations\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n-          />\n-        );\n-      \n-      case 'negative_keyword_suggestions':\n-        return (\n-          <AnalysisBlock\n-            type=\"negative_keyword_suggestions\"\n-            content={block}\n-            account={block.account}\n-            timestamp={block.timestamp}\n-          />\n-        );\n-      \n-      default:\n-        return <div>Unsupported block type: {block.type}</div>;\n-    }\n-  };\n-\n-  return (\n-    <div className={`flex flex-col h-full ${className}`}>\n-      {/* Header */}\n-      <div className=\"bg-white border-b px-4 py-3\">\n-        <h2 className=\"text-lg font-semibold\">AI Marketing Assistant</h2>\n-        <p className=\"text-sm text-gray-600\">Ask me about your Google Ads campaigns</p>\n-      </div>\n-\n-      {/* Quick Action Buttons */}\n-      <div className=\"bg-white border-b px-4 py-3\">\n-        <div className=\"flex flex-wrap gap-2\">\n-          <button\n-            onClick={() => handleActionClick('optimize_campaign')}\n-            className=\"bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition-colors\"\n-          >\n-            Optimize Campaign\n-          </button>\n-          <button\n-            onClick={() => handleActionClick('check_campaign_consistency')}\n-            className=\"bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors\"\n-          >\n-            Check Consistency\n-          </button>\n-          <button\n-            onClick={() => handleActionClick('check_sitelinks')}\n-            className=\"bg-teal-500 text-white px-4 py-2 rounded-lg hover:bg-teal-600 transition-colors\"\n-          >\n-            Check Sitelinks\n-          </button>\n-          <button\n-            onClick={() => handleActionClick('analyze_keyword_trends')}\n-            className=\"bg-pink-500 text-white px-4 py-2 rounded-lg hover:bg-pink-600 transition-colors\"\n-          >\n-            Keyword Trends\n-          </button>\n-        </div>\n-      </div>\n-\n-      {/* Messages */}\n-      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n-        {messages.map((message) => (\n-          <div key={message.id}>\n-            {renderMessage(message)}\n-          </div>\n-        ))}\n-        {isLoading && (\n-          <div className=\"flex justify-start mb-4\">\n-            <div className=\"bg-gray-100 rounded-lg px-4 py-2\">\n-              <div className=\"flex space-x-2\">\n-                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n-                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n-                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n-              </div>\n-            </div>\n-          </div>\n-        )}\n-        <div ref={messagesEndRef} />\n-      </div>\n-\n-      {/* Input */}\n-      <div className=\"bg-white border-t p-4\">\n-        <div className=\"flex space-x-2\">\n-          <input\n-            type=\"text\"\n-            value={inputMessage}\n-            onChange={(e) => setInputMessage(e.target.value)}\n-            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n-            placeholder=\"Ask about your campaigns, performance, or create new ads...\"\n-            className=\"flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n-            disabled={isLoading}\n-          />\n-          <button\n-            onClick={handleSendMessage}\n-            disabled={isLoading || !inputMessage.trim()}\n-            className=\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n-          >\n-            Send\n-          </button>\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default AIChatBox;\n-import React, { useState, useEffect, useRef } from 'react';\n-import ChatApiService from '../services/chatApi';\n-import { \n-  TextBlock, \n-  TableBlock, \n-  ListBlock, \n-  ActionBlock, \n-  ChartBlock, \n-  MetricBlock,\n-  DigDeeperBlock\n-} from './ChatBlocks';\n-import AnalysisBlock from './AnalysisBlock';\n-\n-interface AIChatBoxProps {\n-  token: string;\n-  className?: string;\n-}\n-\n-const AIChatBox: React.FC<AIChatBoxProps> = ({ token, className = '' }) => {\n-  const [messages, setMessages] = useState<any[]>([]);\n-  const [inputMessage, setInputMessage] = useState('');\n-  const [isLoading, setIsLoading] = useState(false);\n-  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null);\n-  const [sessions, setSessions] = useState<any[]>([]);\n-  \n-  const chatApi = new ChatApiService(token);\n-  const messagesEndRef = useRef<HTMLDivElement>(null);\n-\n-  useEffect(() => {\n-    loadSessions();\n-    createNewSession();\n-  }, []);\n-\n-  useEffect(() => {\n-    scrollToBottom();\n-  }, [messages]);\n-\n-  const scrollToBottom = () => {\n-    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n-  };\n-\n-  const loadSessions = async () => {\n-    try {\n-      const response = await chatApi.getSessions();\n-      if (response.success) {\n-        setSessions(response.sessions || []);\n-      }\n-    } catch (error) {\n-      console.error('Failed to load sessions:', error);\n-    }\n-  };\n-\n-  const createNewSession = async () => {\n-    try {\n-      const response = await chatApi.createSession('New Chat Session');\n-      if (response.success) {\n-        setCurrentSessionId(response.session_id);\n-      }\n-    } catch (error) {\n-      console.error('Failed to create session:', error);\n-    }\n-  };\n-\n-  const handleSendMessage = async () => {\n-    if (!inputMessage.trim() || !currentSessionId) return;\n-\n-    const userMessage = {\n-      id: Date.now(),\n-      role: 'user',\n-      content: inputMessage,\n-      timestamp: new Date().toISOString(),\n-    };\n-\n-    setMessages(prev => [...prev, userMessage]);\n-    setInputMessage('');\n-    setIsLoading(true);\n-\n-    try {\n-      const response = await chatApi.sendMessage(inputMessage, currentSessionId);\n-      \n-      if (response.success) {\n-        // Handle RAG responses\n-        if (response.rag_enhanced_response) {\n-          const ragResponse = {\n-            id: Date.now() + 1,\n-            role: 'assistant',\n-            type: 'rag_enhanced_response',\n-            content: response.rag_enhanced_response,\n-            metadata: response.rag_enhanced_response.rag_metadata,\n-            response_type: response.rag_enhanced_response.response_type,\n-            timestamp: new Date().toISOString(),\n-          };\n-          setMessages(prev => [...prev, ragResponse]);\n-        } else {\n-          // Handle regular responses\n-          const aiMessage = {\n-            id: Date.now() + 1,\n-            role: 'assistant',\n-            response: response.response,\n-            intent: response.intent,\n-            timestamp: new Date().toISOString(),\n-          };\n-          setMessages(prev => [...prev, aiMessage]);\n-        }\n-      } else {\n-        // Handle error\n-        const errorMessage = {\n-          id: Date.now() + 1,\n-          role: 'assistant',\n-          content: `Error: ${response.error}`,\n-          timestamp: new Date().toISOString(),\n-        };\n-        setMessages(prev => [...prev, errorMessage]);\n-      }\n-    } catch (error) {\n-      console.error('Failed to send message:', error);\n-      const errorMessage = {\n-        id: Date.now() + 1,\n-        role: 'assistant',\n-        content: 'Failed to send message. Please try again.',\n-        timestamp: new Date().toISOString(),\n-      };\n-      setMessages(prev => [...prev, errorMessage]);\n-    } finally {\n-      setIsLoading(false);\n-    }\n-  };\n-\n-  const handleActionClick = (actionId: string) => {\n-    let message = '';\n-    \n-    switch (actionId) {\n-      case 'connect_accounts':\n-        message = \"Connect my Google Ads accounts\";\n-        break;\n-      case 'create_campaign':\n-        message = \"Help me create a new Google Ads campaign\";\n-        break;\n-      case 'optimize_campaign':\n-        message = \"Optimize my existing campaigns for better performance\";\n-        break;\n-      case 'check_campaign_consistency':\n-        message = \"Check keyword-ad consistency and ad group alignment\";\n-        break;\n-      case 'check_sitelinks':\n-        message = \"Check if 4-6 sitelinks are present and optimized\";\n-        break;\n-      case 'check_landing_page_url':\n-        message = \"Validate landing page URL functionality and keyword relevance\";\n-        break;\n-      case 'check_duplicate_keywords':\n-        message = \"Identify duplicate keywords across campaigns and ad groups\";\n-        break;\n-      case 'analyze_keyword_trends':\n-        message = \"Monitor high-potential keywords with increasing search volume\";\n-        break;\n-      case 'analyze_auction_insights':\n-        message = \"Analyze competition and competitor ad strategies\";\n-        break;\n-      case 'analyze_search_terms':\n-        message = \"Review search terms for negative keyword opportunities\";\n-        break;\n-      case 'analyze_ads_showing_time':\n-        message = \"Analyze hour-of-day performance for bid optimization\";\n-        break;\n-      case 'analyze_device_performance_detailed':\n-        message = \"Analyze device performance for bid adjustments\";\n-        break;\n-      case 'analyze_location_performance':\n-        message = \"Analyze city-level performance and optimization\";\n-        break;\n-      case 'analyze_landing_page_mobile':\n-        message = \"Check mobile speed score and optimization\";\n-        break;\n-      case 'optimize_tcpa':\n-        message = \"Provide Target CPA optimization recommendations\";\n-        break;\n-      case 'optimize_budget_allocation':\n-        message = \"Optimize campaign budget allocation\";\n-        break;\n-      case 'suggest_negative_keywords':\n-        message = \"Suggest negative keyword exclusions\";\n-        break;\n-      default:\n-        message = `I want to ${actionId.replace(/_/g, ' ')}`;\n-    }\n-\n-    if (message) {\n-      setInputMessage(message);\n-      // Small delay to ensure message is set before sending\n-      setTimeout(() => handleSendMessage(), 100);\n-    }\n-  };\n-\n-  const handleDigDeeper = (actionId: string, currentDepth: number) => {\n-    const message = `Dig deeper into ${actionId.replace(/_/g, ' ')} at level ${currentDepth + 1}`;\n-    setInputMessage(message);\n-    // Small delay to ensure message is set before sending\n-    setTimeout(() => handleSendMessage(), 100);\n-  };\n-\n-  const renderMessage = (message: any) => {\n-    if (message.role === 'user') {\n-      return (\n-        <div className=\"flex justify-end mb-4\">\n-          <div className=\"bg-blue-500 text-white rounded-lg px-4 py-2 max-w-xs lg:max-w-md\">\n-            {message.content}\n-          </div>\n-        </div>\n-      );\n-    }\n-\n-    if (message.role === 'assistant') {\n-      // Handle RAG enhanced responses\n-      if (message.type === 'rag_enhanced_response') {\n-        return (\n-          <div className=\"flex justify-start mb-4\">\n-            <div className=\"rag-response border-l-4 border-purple-500 bg-purple-50 p-4 rounded-lg max-w-xs lg:max-w-md\">\n-              <div className=\"rag-header mb-3\">\n-                <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n-                  RAG Enhanced\n-                </span>\n-                <span className=\"ml-2 text-sm text-purple-600\">\n-                  {message.response_type === 'rag' ? 'Knowledge Base + AI' : 'Direct AI'}\n-                </span>\n-              </div>\n-              <AnalysisBlock \n-                type=\"rag_enhanced\" \n-                content={message.content} \n-                metadata={message.metadata}\n-              />\n-            </div>\n-          </div>\n-        );\n-      }\n-\n-      // Handle regular responses\n-      return (\n-        <div className=\"flex justify-start mb-4\">\n-          <div className=\"bg-gray-100 rounded-lg px-4 py-2 max-w-xs lg:max-w-md\">\n-            {message.response?.blocks ? (\n-              <div className=\"space-y-3\">\n-                {message.response.blocks.map((block: any, index: number) => (\n-                  <div key={index}>\n-                    {renderBlock(block)}\n-                  </div>\n-                ))}\n-              </div>\n-            ) : (\n-              <div>{message.content}</div>\n-            )}\n-          </div>\n-        </div>\n-      );\n-    }\n-\n-    return null;\n-  };\n-\n-  const renderBlock = (block: any) => {\n-    switch (block.type) {\n-      case 'text':\n-        return <TextBlock {...block} />;\n-      case 'table':\n-        return <TableBlock {...block} />;\n-      case 'list':\n-        return <ListBlock {...block} />;\n-      case 'actions':\n-        return <ActionBlock {...block} />;\n-      case 'chart':\n-        return <ChartBlock {...block} />;\n-      case 'metric':\n-        return <MetricBlock {...block} />;\n-      case 'dig_deeper':\n-        return (\n-          <DigDeeperBlock\n-            title={block.title || 'Dig Deeper'}\n-            description={block.description || 'Explore this topic in more detail'}\n-            action_id={block.action_id || 'dig_deeper'}\n-            current_depth={block.current_depth || 1}\n-            max_depth={block.max_depth || 3}\n-            onDigDeeper={handleDigDeeper}\n-          />\n-        );\n-      \n       // Google Ads analysis blocks\n       case 'budget_optimizations':\n         return (\n           <AnalysisBlock\n"
                }
            ],
            "date": 1756097033901,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useRef } from 'react';\nimport ChatApiService from '../services/chatApi';\nimport { \n  TextBlock, \n  TableBlock, \n  ListBlock, \n  ActionBlock, \n  ChartBlock, \n  MetricBlock \n} from './ChatBlocks';\n\ninterface AIChatBoxProps {\n  token: string;\n  className?: string;\n}\n\nconst AIChatBox: React.FC<AIChatBoxProps> = ({ token, className = '' }) => {\n  const [messages, setMessages] = useState<any[]>([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null);\n  const [sessions, setSessions] = useState<any[]>([]);\n  \n  const chatApi = new ChatApiService(token);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    loadSessions();\n    createNewSession();\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const loadSessions = async () => {\n    try {\n      const response = await chatApi.getSessions();\n      if (response.success) {\n        setSessions(response.sessions || []);\n      }\n    } catch (error) {\n      console.error('Failed to load sessions:', error);\n    }\n  };\n\n  const createNewSession = async () => {\n    try {\n      const response = await chatApi.createSession('New Chat Session');\n      if (response.success) {\n        setCurrentSessionId(response.session_id);\n      }\n    } catch (error) {\n      console.error('Failed to create session:', error);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim() || !currentSessionId) return;\n\n    const userMessage = {\n      id: Date.now(),\n      role: 'user',\n      content: inputMessage,\n      timestamp: new Date().toISOString(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n\n    try {\n      const response = await chatApi.sendMessage(inputMessage, currentSessionId);\n      \n      if (response.success) {\n        const aiMessage = {\n          id: Date.now() + 1,\n          role: 'assistant',\n          response: response.response,\n          intent: response.intent,\n          timestamp: new Date().toISOString(),\n        };\n        setMessages(prev => [...prev, aiMessage]);\n      } else {\n        // Handle error\n        const errorMessage = {\n          id: Date.now() + 1,\n          role: 'assistant',\n          content: `Error: ${response.error}`,\n          timestamp: new Date().toISOString(),\n        };\n        setMessages(prev => [...prev, errorMessage]);\n      }\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      const errorMessage = {\n        id: Date.now() + 1,\n        role: 'assistant',\n        content: 'Failed to send message. Please try again.',\n        timestamp: new Date().toISOString(),\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const renderMessage = (message: any) => {\n    if (message.role === 'user') {\n      return (\n        <div className=\"flex justify-end mb-4\">\n          <div className=\"bg-blue-500 text-white rounded-lg px-4 py-2 max-w-xs lg:max-w-md\">\n            {message.content}\n          </div>\n        </div>\n      );\n    }\n\n    if (message.role === 'assistant') {\n      return (\n        <div className=\"flex justify-start mb-4\">\n          <div className=\"bg-gray-100 rounded-lg px-4 py-2 max-w-xs lg:max-w-md\">\n            {message.response?.blocks ? (\n              <div className=\"space-y-3\">\n                {message.response.blocks.map((block: any, index: number) => (\n                  <div key={index}>\n                    {renderBlock(block)}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div>{message.content}</div>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  const renderBlock = (block: any) => {\n    switch (block.type) {\n      case 'text':\n        return <TextBlock {...block} />;\n      case 'table':\n        return <TableBlock {...block} />;\n      case 'list':\n        return <ListBlock {...block} />;\n      case 'actions':\n        return <ActionBlock {...block} />;\n      case 'chart':\n        return <ChartBlock {...block} />;\n      case 'metric':\n        return <MetricBlock {...block} />;\n      default:\n        return <div>Unsupported block type: {block.type}</div>;\n    }\n  };\n\n  return (\n    <div className={`flex flex-col h-full ${className}`}>\n      {/* Header */}\n      <div className=\"bg-white border-b px-4 py-3\">\n        <h2 className=\"text-lg font-semibold\">AI Marketing Assistant</h2>\n        <p className=\"text-sm text-gray-600\">Ask me about your Google Ads campaigns</p>\n      </div>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.map(renderMessage)}\n        {isLoading && (\n          <div className=\"flex justify-start mb-4\">\n            <div className=\"bg-gray-100 rounded-lg px-4 py-2\">\n              <div className=\"flex space-x-2\">\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n              </div>\n            </div>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Input */}\n      <div className=\"bg-white border-t p-4\">\n        <div className=\"flex space-x-2\">\n          <input\n            type=\"text\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n            placeholder=\"Ask about your campaigns, performance, or create new ads...\"\n            className=\"flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            disabled={isLoading}\n          />\n          <button\n            onClick={handleSendMessage}\n            disabled={isLoading || !inputMessage.trim()}\n            className=\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AIChatBox;\n"
        }
    ]
}