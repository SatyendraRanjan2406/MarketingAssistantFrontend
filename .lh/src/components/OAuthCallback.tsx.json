{
    "sourceFile": "src/components/OAuthCallback.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1755596430451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1755596430451,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\nimport { CheckCircle, XCircle, Loader2 } from 'lucide-react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport authService from '../services/authService';\n\nconst OAuthCallback: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');\n  const [message, setMessage] = useState('Processing OAuth callback...');\n\n  useEffect(() => {\n    const handleOAuthCallback = async () => {\n      try {\n        // Extract OAuth parameters from URL\n        const code = searchParams.get('code');\n        const state = searchParams.get('state');\n        const error = searchParams.get('error');\n\n        if (error) {\n          setStatus('error');\n          setMessage(`OAuth error: ${error}`);\n          return;\n        }\n\n        if (!code || !state) {\n          setStatus('error');\n          setMessage('Missing OAuth parameters');\n          return;\n        }\n\n        // Verify state parameter matches what we stored\n        const storedState = localStorage.getItem('googleOAuthState');\n        if (state !== storedState) {\n          setStatus('error');\n          setMessage('Invalid OAuth state parameter');\n          return;\n        }\n\n        // Process the OAuth callback\n        const result = await authService.processGoogleOAuthCallback(code, state);\n        \n        if (result.success) {\n          setStatus('success');\n          setMessage('Google Ads connected successfully!');\n          \n          // Clear the stored state\n          localStorage.removeItem('googleOAuthState');\n          \n          // Redirect back to onboarding after a short delay\n          setTimeout(() => {\n            navigate('/onboarding');\n          }, 2000);\n        } else {\n          setStatus('error');\n          setMessage(result.error || 'Failed to complete OAuth process');\n        }\n      } catch (error) {\n        console.error('OAuth callback error:', error);\n        setStatus('error');\n        setMessage('An unexpected error occurred');\n      }\n    };\n\n    handleOAuthCallback();\n  }, [searchParams, navigate]);\n\n  const renderContent = () => {\n    switch (status) {\n      case 'loading':\n        return (\n          <div className=\"text-center\">\n            <Loader2 className=\"w-16 h-16 text-blue-600 animate-spin mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Processing OAuth Callback</h2>\n            <p className=\"text-gray-600\">{message}</p>\n          </div>\n        );\n      \n      case 'success':\n        return (\n          <div className=\"text-center\">\n            <CheckCircle className=\"w-16 h-16 text-green-600 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">OAuth Successful!</h2>\n            <p className=\"text-gray-600 mb-4\">{message}</p>\n            <p className=\"text-sm text-gray-500\">Redirecting back to onboarding...</p>\n          </div>\n        );\n      \n      case 'error':\n        return (\n          <div className=\"text-center\">\n            <XCircle className=\"w-16 h-16 text-red-600 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">OAuth Failed</h2>\n            <p className=\"text-gray-600 mb-4\">{message}</p>\n            <button\n              onClick={() => navigate('/onboarding')}\n              className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              Return to Onboarding\n            </button>\n          </div>\n        );\n      \n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full\">\n        <div className=\"bg-white rounded-2xl shadow-xl p-8 border border-gray-100\">\n          {renderContent()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OAuthCallback;\n"
        }
    ]
}