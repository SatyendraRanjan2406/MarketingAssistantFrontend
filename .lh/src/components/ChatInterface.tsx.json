{
    "sourceFile": "src/components/ChatInterface.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756037131237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756097033954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,350 @@\n+import React, { useState, useEffect } from 'react';\n+import { Send, BarChart3, TrendingUp, Zap, AlertCircle } from 'lucide-react';\n+import { Platform, ChatMessage, ChatSessionCreateRequest, ChatMessageRequest, ChatMessageResponse, ChatSessionCreateResponse } from '../types';\n+import { API_ENDPOINTS } from '../constants';\n+import api from '../services/api';\n+import AnalysisResult from './AnalysisResult';\n+import AIChatBox from './AIChatBox';\n+\n+interface ChatInterfaceProps {\n+  platform: Platform;\n+  onTakeAction: (action: any) => void;\n+}\n+\n+const ChatInterface: React.FC<ChatInterfaceProps> = ({ platform, onTakeAction }) => {\n+  const [message, setMessage] = useState('');\n+  const [messages, setMessages] = useState<ChatMessage[]>([]);\n+  const [isLoading, setIsLoading] = useState(false);\n+  const [sessionId, setSessionId] = useState<string | null>(null);\n+  const [error, setError] = useState<string | null>(null);\n+\n+  const platformConfig = {\n+    google: {\n+      placeholder: 'Ask me anything about your Google Ads performance...',\n+      expert: 'Google Ads Expert Analyst'\n+    },\n+    'google-new': {\n+      placeholder: 'Ask me anything about your Google Ads performance...',\n+      expert: 'Google AI Marketing Assistant'\n+    },\n+    meta: {\n+      placeholder: 'Ask me anything about your Meta Ads performance...',\n+      expert: 'Meta Ads Expert Analyst'\n+    }\n+  };\n+\n+  // Create a new chat session when component mounts (only for Google platform)\n+  useEffect(() => {\n+    if (platform === 'google' && !sessionId) {\n+      createChatSession();\n+    }\n+  }, [platform]);\n+\n+  const createChatSession = async () => {\n+    try {\n+      setIsLoading(true);\n+      setError(null);\n+      \n+      const requestData: ChatSessionCreateRequest = {\n+        title: `Google Ads Analysis Session ${new Date().toLocaleDateString()}`\n+      };\n+\n+      const response = await api.post(API_ENDPOINTS.GOOGLE_ADS_CHAT_SESSION_CREATE, requestData);\n+      const data: ChatSessionCreateResponse = response.data;\n+      \n+      if (data.success) {\n+        setSessionId(data.session_id);\n+        console.log('Chat session created:', data.session_id);\n+      } else {\n+        throw new Error('Failed to create chat session');\n+      }\n+    } catch (err: any) {\n+      console.error('Error creating chat session:', err);\n+      setError('Failed to create chat session. Please try again.');\n+    } finally {\n+      setIsLoading(false);\n+    }\n+  };\n+\n+  const handleSend = async () => {\n+    if (!message.trim() || !sessionId) return;\n+\n+    const userMessage: ChatMessage = { \n+      type: 'user', \n+      content: message, \n+      timestamp: new Date(),\n+      session_id: sessionId\n+    };\n+    \n+    setMessages(prev => [...prev, userMessage]);\n+    setMessage('');\n+    setIsLoading(true);\n+    setError(null);\n+\n+    try {\n+      const requestData: ChatMessageRequest = {\n+        message: message,\n+        session_id: sessionId\n+      };\n+\n+      const response = await api.post(API_ENDPOINTS.GOOGLE_ADS_CHAT_MESSAGE, requestData);\n+      const data: ChatMessageResponse = response.data;\n+      \n+      if (data.success) {\n+        const aiMessage: ChatMessage = {\n+          type: 'ai',\n+          content: extractTextFromBlocks(data.response.blocks),\n+          timestamp: new Date(),\n+          session_id: data.session_id,\n+          response: data.response,\n+          intent: data.intent\n+        };\n+        \n+        setMessages(prev => [...prev, aiMessage]);\n+      } else {\n+        throw new Error('Failed to get response from chatbot');\n+      }\n+    } catch (err: any) {\n+      console.error('Error sending message:', err);\n+      setError('Failed to send message. Please try again.');\n+      \n+      // Add error message to chat\n+      const errorMessage: ChatMessage = {\n+        type: 'ai',\n+        content: 'Sorry, I encountered an error while processing your request. Please try again.',\n+        timestamp: new Date()\n+      };\n+      setMessages(prev => [...prev, errorMessage]);\n+    } finally {\n+      setIsLoading(false);\n+    }\n+  };\n+\n+  const extractTextFromBlocks = (blocks: any[]): string => {\n+    return blocks\n+      .filter(block => block.type === 'text' && block.content)\n+      .map(block => block.content)\n+      .join('\\n\\n');\n+  };\n+\n+  const renderChatMessage = (msg: ChatMessage, index: number) => {\n+    if (msg.type === 'user') {\n+      return (\n+        <div key={index} className=\"flex justify-end\">\n+          <div className=\"bg-blue-600 text-white px-4 py-3 rounded-2xl max-w-md\">\n+            {msg.content}\n+          </div>\n+        </div>\n+      );\n+    }\n+\n+    // AI message with response blocks\n+    if (msg.response?.blocks) {\n+      return (\n+        <div key={index} className=\"flex justify-start\">\n+          <div className=\"bg-white border border-gray-200 rounded-2xl p-6 max-w-2xl\">\n+            {msg.response.blocks.map((block, blockIndex) => (\n+              <div key={blockIndex} className=\"mb-4 last:mb-0\">\n+                {block.type === 'text' && (\n+                  <div className={`${block.style === 'paragraph' ? 'text-gray-700 leading-relaxed' : 'font-semibold text-gray-900'}`}>\n+                    {block.content}\n+                  </div>\n+                )}\n+                \n+                {block.type === 'actions' && block.items && (\n+                  <div className=\"mt-4\">\n+                    <div className=\"flex flex-wrap gap-2\">\n+                      {block.items.map((item) => (\n+                        <button\n+                          key={item.id}\n+                          onClick={() => onTakeAction({ id: item.id, label: item.label })}\n+                          className=\"px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors text-sm font-medium\"\n+                        >\n+                          {item.label}\n+                        </button>\n+                      ))}\n+                    </div>\n+                  </div>\n+                )}\n+              </div>\n+            ))}\n+            \n+            {msg.intent && (\n+              <div className=\"mt-4 pt-4 border-t border-gray-100\">\n+                <div className=\"text-xs text-gray-500\">\n+                  Intent: {msg.intent.action} (Confidence: {Math.round(msg.intent.confidence * 100)}%)\n+                  {msg.intent.requires_auth && (\n+                    <span className=\"ml-2 text-orange-600\">Requires authentication</span>\n+                  )}\n+                </div>\n+              </div>\n+            )}\n+          </div>\n+        </div>\n+      );\n+    }\n+\n+    // Fallback for simple AI messages\n+    return (\n+      <div key={index} className=\"flex justify-start\">\n+        <div className=\"bg-white border border-gray-200 rounded-2xl p-6 max-w-md\">\n+          <div className=\"text-gray-700\">{msg.content}</div>\n+        </div>\n+      </div>\n+    );\n+  };\n+\n+  const handleQuickAction = async (action: string) => {\n+    const quickActions = {\n+      'performance_report': 'Show me a comprehensive performance report for my campaigns',\n+      'optimization': 'What optimization opportunities do you see in my campaigns?',\n+      'quick_fixes': 'What immediate issues need attention in my campaigns?'\n+    };\n+\n+    const actionMessage = quickActions[action as keyof typeof quickActions];\n+    if (actionMessage) {\n+      setMessage(actionMessage);\n+      // Small delay to ensure message is set before sending\n+      setTimeout(() => handleSend(), 100);\n+    }\n+  };\n+\n+  // Render the new Google AI Chat interface\n+  if (platform === 'google-new') {\n+    const token = localStorage.getItem('accessToken') || '';\n+    return (\n+      <div className=\"max-w-6xl mx-auto h-[calc(100vh-200px)]\">\n+        <div className=\"bg-white rounded-lg shadow-lg h-full\">\n+          <AIChatBox token={token} />\n+        </div>\n+      </div>\n+    );\n+  }\n+\n+  if (platform === 'google' && !sessionId && !isLoading) {\n+    return (\n+      <div className=\"max-w-4xl mx-auto text-center\">\n+        <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-8\">\n+          <AlertCircle className=\"w-16 h-16 text-yellow-600 mx-auto mb-4\" />\n+          <h3 className=\"text-xl font-semibold text-yellow-800 mb-2\">Setting up your chat session</h3>\n+          <p className=\"text-yellow-700 mb-4\">We're preparing your Google Ads analysis environment...</p>\n+          <button\n+            onClick={createChatSession}\n+            className=\"px-6 py-3 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors\"\n+          >\n+            Retry Setup\n+          </button>\n+        </div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"max-w-4xl mx-auto\">\n+      {/* Hero Section */}\n+      <div className=\"text-center mb-8\">\n+        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">\n+          {platformConfig[platform].expert}\n+        </h2>\n+        <p className=\"text-gray-600 text-lg\">\n+          Transform your advertising performance with AI-powered insights and optimization\n+        </p>\n+        {sessionId && (\n+          <div className=\"mt-2 text-sm text-gray-500\">\n+            Session ID: {sessionId.substring(0, 8)}...\n+          </div>\n+        )}\n+      </div>\n+\n+      {/* Error Display */}\n+      {error && (\n+        <div className=\"mb-6 bg-red-50 border border-red-200 rounded-xl p-4\">\n+          <div className=\"flex items-center space-x-3\">\n+            <AlertCircle className=\"w-5 h-5 text-red-600\" />\n+            <span className=\"text-red-700\">{error}</span>\n+          </div>\n+        </div>\n+      )}\n+\n+      {/* Chat Messages */}\n+      <div className=\"space-y-6 mb-6\">\n+        {messages.map((msg, index) => renderChatMessage(msg, index))}\n+        \n+        {isLoading && (\n+          <div className=\"flex justify-start\">\n+            <div className=\"bg-white border border-gray-200 rounded-2xl p-6 max-w-md\">\n+              <div className=\"flex items-center space-x-3\">\n+                <div className=\"animate-spin w-5 h-5 border-2 border-blue-600 border-t-transparent rounded-full\"></div>\n+                <span className=\"text-gray-600\">Analyzing your data...</span>\n+              </div>\n+            </div>\n+          </div>\n+        )}\n+      </div>\n+\n+      {/* Input Area */}\n+      <div className=\"bg-white border border-gray-200 rounded-2xl p-4 shadow-sm\">\n+        <div className=\"flex space-x-4\">\n+          <div className=\"flex-1\">\n+            <textarea\n+              value={message}\n+              onChange={(e) => setMessage(e.target.value)}\n+              placeholder={platformConfig[platform].placeholder}\n+              className=\"w-full resize-none border-0 focus:ring-0 text-gray-900 placeholder-gray-500\"\n+              rows={3}\n+              disabled={!sessionId || isLoading}\n+              onKeyPress={(e) => {\n+                if (e.key === 'Enter' && !e.shiftKey) {\n+                  e.preventDefault();\n+                  handleSend();\n+                }\n+              }}\n+            />\n+          </div>\n+          <button\n+            onClick={handleSend}\n+            disabled={!message.trim() || isLoading || !sessionId}\n+            className=\"self-end p-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n+          >\n+            <Send className=\"w-5 h-5\" />\n+          </button>\n+        </div>\n+      </div>\n+\n+      {/* Quick Actions */}\n+      <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n+        <button \n+          onClick={() => handleQuickAction('performance_report')}\n+          disabled={!sessionId || isLoading}\n+          className=\"p-4 bg-white border border-gray-200 rounded-xl hover:shadow-md transition-shadow text-left disabled:opacity-50 disabled:cursor-not-allowed\"\n+        >\n+          <BarChart3 className=\"w-8 h-8 text-blue-600 mb-3\" />\n+          <h3 className=\"font-semibold text-gray-900\">Performance Report</h3>\n+          <p className=\"text-sm text-gray-600\">Get comprehensive campaign analysis</p>\n+        </button>\n+        \n+        <button \n+          onClick={() => handleQuickAction('optimization')}\n+          disabled={!sessionId || isLoading}\n+          className=\"p-4 bg-white border border-gray-200 rounded-xl hover:shadow-md transition-shadow text-left disabled:opacity-50 disabled:cursor-not-allowed\"\n+        >\n+          <TrendingUp className=\"w-8 h-8 text-green-600 mb-3\" />\n+          <h3 className=\"font-semibold text-gray-900\">Optimization</h3>\n+          <p className=\"text-sm text-gray-600\">Find improvement opportunities</p>\n+        </button>\n+        \n+        <button \n+          onClick={() => handleQuickAction('quick_fixes')}\n+          disabled={!sessionId || isLoading}\n+          className=\"p-4 bg-white border border-gray-200 rounded-xl hover:shadow-md transition-shadow text-left disabled:opacity-50 disabled:cursor-not-allowed\"\n+        >\n+          <Zap className=\"w-8 h-8 text-purple-600 mb-3\" />\n+          <h3 className=\"font-semibold text-gray-900\">Quick Fixes</h3>\n+          <p className=\"text-sm text-gray-600\">Immediate action recommendations</p>\n+        </button>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default ChatInterface;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1756037131237,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport { Send, BarChart3, TrendingUp, Zap, AlertCircle } from 'lucide-react';\nimport { Platform, ChatMessage, ChatSessionCreateRequest, ChatMessageRequest, ChatMessageResponse, ChatSessionCreateResponse } from '../types';\nimport { API_ENDPOINTS } from '../constants';\nimport api from '../services/api';\nimport AnalysisResult from './AnalysisResult';\n\ninterface ChatInterfaceProps {\n  platform: Platform;\n  onTakeAction: (action: any) => void;\n}\n\nconst ChatInterface: React.FC<ChatInterfaceProps> = ({ platform, onTakeAction }) => {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const platformConfig = {\n    google: {\n      placeholder: 'Ask me anything about your Google Ads performance...',\n      expert: 'Google Ads Expert Analyst'\n    },\n    meta: {\n      placeholder: 'Ask me anything about your Meta Ads performance...',\n      expert: 'Meta Ads Expert Analyst'\n    }\n  };\n\n  // Create a new chat session when component mounts (only for Google platform)\n  useEffect(() => {\n    if (platform === 'google' && !sessionId) {\n      createChatSession();\n    }\n  }, [platform]);\n\n  const createChatSession = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const requestData: ChatSessionCreateRequest = {\n        title: `Google Ads Analysis Session ${new Date().toLocaleDateString()}`\n      };\n\n      const response = await api.post(API_ENDPOINTS.GOOGLE_ADS_CHAT_SESSION_CREATE, requestData);\n      const data: ChatSessionCreateResponse = response.data;\n      \n      if (data.success) {\n        setSessionId(data.session_id);\n        console.log('Chat session created:', data.session_id);\n      } else {\n        throw new Error('Failed to create chat session');\n      }\n    } catch (err: any) {\n      console.error('Error creating chat session:', err);\n      setError('Failed to create chat session. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSend = async () => {\n    if (!message.trim() || !sessionId) return;\n\n    const userMessage: ChatMessage = { \n      type: 'user', \n      content: message, \n      timestamp: new Date(),\n      session_id: sessionId\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    setMessage('');\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const requestData: ChatMessageRequest = {\n        message: message,\n        session_id: sessionId\n      };\n\n      const response = await api.post(API_ENDPOINTS.GOOGLE_ADS_CHAT_MESSAGE, requestData);\n      const data: ChatMessageResponse = response.data;\n      \n      if (data.success) {\n        const aiMessage: ChatMessage = {\n          type: 'ai',\n          content: extractTextFromBlocks(data.response.blocks),\n          timestamp: new Date(),\n          session_id: data.session_id,\n          response: data.response,\n          intent: data.intent\n        };\n        \n        setMessages(prev => [...prev, aiMessage]);\n      } else {\n        throw new Error('Failed to get response from chatbot');\n      }\n    } catch (err: any) {\n      console.error('Error sending message:', err);\n      setError('Failed to send message. Please try again.');\n      \n      // Add error message to chat\n      const errorMessage: ChatMessage = {\n        type: 'ai',\n        content: 'Sorry, I encountered an error while processing your request. Please try again.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const extractTextFromBlocks = (blocks: any[]): string => {\n    return blocks\n      .filter(block => block.type === 'text' && block.content)\n      .map(block => block.content)\n      .join('\\n\\n');\n  };\n\n  const renderChatMessage = (msg: ChatMessage, index: number) => {\n    if (msg.type === 'user') {\n      return (\n        <div key={index} className=\"flex justify-end\">\n          <div className=\"bg-blue-600 text-white px-4 py-3 rounded-2xl max-w-md\">\n            {msg.content}\n          </div>\n        </div>\n      );\n    }\n\n    // AI message with response blocks\n    if (msg.response?.blocks) {\n      return (\n        <div key={index} className=\"flex justify-start\">\n          <div className=\"bg-white border border-gray-200 rounded-2xl p-6 max-w-2xl\">\n            {msg.response.blocks.map((block, blockIndex) => (\n              <div key={blockIndex} className=\"mb-4 last:mb-0\">\n                {block.type === 'text' && (\n                  <div className={`${block.style === 'paragraph' ? 'text-gray-700 leading-relaxed' : 'font-semibold text-gray-900'}`}>\n                    {block.content}\n                  </div>\n                )}\n                \n                {block.type === 'actions' && block.items && (\n                  <div className=\"mt-4\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      {block.items.map((item) => (\n                        <button\n                          key={item.id}\n                          onClick={() => onTakeAction({ id: item.id, label: item.label })}\n                          className=\"px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors text-sm font-medium\"\n                        >\n                          {item.label}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n            \n            {msg.intent && (\n              <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                <div className=\"text-xs text-gray-500\">\n                  Intent: {msg.intent.action} (Confidence: {Math.round(msg.intent.confidence * 100)}%)\n                  {msg.intent.requires_auth && (\n                    <span className=\"ml-2 text-orange-600\">Requires authentication</span>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    // Fallback for simple AI messages\n    return (\n      <div key={index} className=\"flex justify-start\">\n        <div className=\"bg-white border border-gray-200 rounded-2xl p-6 max-w-md\">\n          <div className=\"text-gray-700\">{msg.content}</div>\n        </div>\n      </div>\n    );\n  };\n\n  const handleQuickAction = async (action: string) => {\n    const quickActions = {\n      'performance_report': 'Show me a comprehensive performance report for my campaigns',\n      'optimization': 'What optimization opportunities do you see in my campaigns?',\n      'quick_fixes': 'What immediate issues need attention in my campaigns?'\n    };\n\n    const actionMessage = quickActions[action as keyof typeof quickActions];\n    if (actionMessage) {\n      setMessage(actionMessage);\n      // Small delay to ensure message is set before sending\n      setTimeout(() => handleSend(), 100);\n    }\n  };\n\n  if (platform === 'google' && !sessionId && !isLoading) {\n    return (\n      <div className=\"max-w-4xl mx-auto text-center\">\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-8\">\n          <AlertCircle className=\"w-16 h-16 text-yellow-600 mx-auto mb-4\" />\n          <h3 className=\"text-xl font-semibold text-yellow-800 mb-2\">Setting up your chat session</h3>\n          <p className=\"text-yellow-700 mb-4\">We're preparing your Google Ads analysis environment...</p>\n          <button\n            onClick={createChatSession}\n            className=\"px-6 py-3 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors\"\n          >\n            Retry Setup\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {/* Hero Section */}\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          {platformConfig[platform].expert}\n        </h2>\n        <p className=\"text-gray-600 text-lg\">\n          Transform your advertising performance with AI-powered insights and optimization\n        </p>\n        {sessionId && (\n          <div className=\"mt-2 text-sm text-gray-500\">\n            Session ID: {sessionId.substring(0, 8)}...\n          </div>\n        )}\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <div className=\"mb-6 bg-red-50 border border-red-200 rounded-xl p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <AlertCircle className=\"w-5 h-5 text-red-600\" />\n            <span className=\"text-red-700\">{error}</span>\n          </div>\n        </div>\n      )}\n\n      {/* Chat Messages */}\n      <div className=\"space-y-6 mb-6\">\n        {messages.map((msg, index) => renderChatMessage(msg, index))}\n        \n        {isLoading && (\n          <div className=\"flex justify-start\">\n            <div className=\"bg-white border border-gray-200 rounded-2xl p-6 max-w-md\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"animate-spin w-5 h-5 border-2 border-blue-600 border-t-transparent rounded-full\"></div>\n                <span className=\"text-gray-600\">Analyzing your data...</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Input Area */}\n      <div className=\"bg-white border border-gray-200 rounded-2xl p-4 shadow-sm\">\n        <div className=\"flex space-x-4\">\n          <div className=\"flex-1\">\n            <textarea\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              placeholder={platformConfig[platform].placeholder}\n              className=\"w-full resize-none border-0 focus:ring-0 text-gray-900 placeholder-gray-500\"\n              rows={3}\n              disabled={!sessionId || isLoading}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                  e.preventDefault();\n                  handleSend();\n                }\n              }}\n            />\n          </div>\n          <button\n            onClick={handleSend}\n            disabled={!message.trim() || isLoading || !sessionId}\n            className=\"self-end p-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            <Send className=\"w-5 h-5\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <button \n          onClick={() => handleQuickAction('performance_report')}\n          disabled={!sessionId || isLoading}\n          className=\"p-4 bg-white border border-gray-200 rounded-xl hover:shadow-md transition-shadow text-left disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          <BarChart3 className=\"w-8 h-8 text-blue-600 mb-3\" />\n          <h3 className=\"font-semibold text-gray-900\">Performance Report</h3>\n          <p className=\"text-sm text-gray-600\">Get comprehensive campaign analysis</p>\n        </button>\n        \n        <button \n          onClick={() => handleQuickAction('optimization')}\n          disabled={!sessionId || isLoading}\n          className=\"p-4 bg-white border border-gray-200 rounded-xl hover:shadow-md transition-shadow text-left disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          <TrendingUp className=\"w-8 h-8 text-green-600 mb-3\" />\n          <h3 className=\"font-semibold text-gray-900\">Optimization</h3>\n          <p className=\"text-sm text-gray-600\">Find improvement opportunities</p>\n        </button>\n        \n        <button \n          onClick={() => handleQuickAction('quick_fixes')}\n          disabled={!sessionId || isLoading}\n          className=\"p-4 bg-white border border-gray-200 rounded-xl hover:shadow-md transition-shadow text-left disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          <Zap className=\"w-8 h-8 text-purple-600 mb-3\" />\n          <h3 className=\"font-semibold text-gray-900\">Quick Fixes</h3>\n          <p className=\"text-sm text-gray-600\">Immediate action recommendations</p>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;"
        }
    ]
}