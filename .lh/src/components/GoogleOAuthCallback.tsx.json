{
    "sourceFile": "src/components/GoogleOAuthCallback.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1755614546772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755614789181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,19 +17,27 @@\n       const urlParams = new URLSearchParams(window.location.search);\n       const code = urlParams.get('code');\n       const state = urlParams.get('state');\n \n+      console.log('OAuth Callback - Received parameters:', { code, state });\n+      console.log('OAuth Callback - Current URL:', window.location.href);\n+\n       if (!code || !state) {\n         setStatus('error');\n         setMessage('Missing authorization code or state parameter');\n         return;\n       }\n \n       // Verify state matches what we stored\n-      const storedState = localStorage.getItem('googleOAuthState');\n+      const storedState = sessionStorage.getItem('googleOAuthState');\n+      console.log('OAuth Callback - Stored state from sessionStorage:', storedState);\n+      console.log('OAuth Callback - Received state:', state);\n+      console.log('OAuth Callback - State match:', storedState === state);\n+      \n       if (storedState !== state) {\n         setStatus('error');\n         setMessage('Invalid state parameter. OAuth flow may have been compromised.');\n+        console.error('OAuth Callback - State mismatch. Stored:', storedState, 'Received:', state);\n         return;\n       }\n \n       // Exchange code for tokens\n@@ -47,14 +55,14 @@\n       if (data.success) {\n         setStatus('success');\n         setMessage('Google Ads connected successfully!');\n         \n-        // Clear the stored state\n-        localStorage.removeItem('googleOAuthState');\n+        // Clear the stored state from sessionStorage\n+        sessionStorage.removeItem('googleOAuthState');\n         \n         // Close the popup window if it's a popup\n         if (window.opener) {\n-          // Send message to parent window\n+          // Send success message to parent window\n           window.opener.postMessage({ type: 'GOOGLE_OAUTH_SUCCESS', data }, window.location.origin);\n           window.close();\n         } else {\n           // If not a popup, redirect after a delay\n@@ -64,13 +72,29 @@\n         }\n       } else {\n         setStatus('error');\n         setMessage(data.message || 'Failed to complete OAuth flow');\n+        \n+        // Send failure message to parent window if it's a popup\n+        if (window.opener) {\n+          window.opener.postMessage({ \n+            type: 'GOOGLE_OAUTH_FAILURE', \n+            error: data.message || 'Failed to complete OAuth flow' \n+          }, window.location.origin);\n+        }\n       }\n     } catch (error) {\n       console.error('OAuth callback error:', error);\n       setStatus('error');\n       setMessage('An error occurred while completing the OAuth flow');\n+      \n+      // Send failure message to parent window if it's a popup\n+      if (window.opener) {\n+        window.opener.postMessage({ \n+          type: 'GOOGLE_OAUTH_FAILURE', \n+          error: 'An error occurred while completing the OAuth flow' \n+        }, window.location.origin);\n+      }\n     }\n   };\n \n   const renderContent = () => {\n"
                },
                {
                    "date": 1755615014485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,14 +27,20 @@\n         return;\n       }\n \n       // Verify state matches what we stored\n-      const storedState = sessionStorage.getItem('googleOAuthState');\n-      console.log('OAuth Callback - Stored state from sessionStorage:', storedState);\n+      const storedState = sessionStorage.getItem('googleOAuthState') || localStorage.getItem('googleOAuthState');\n+      console.log('OAuth Callback - Stored state from sessionStorage:', sessionStorage.getItem('googleOAuthState'));\n+      console.log('OAuth Callback - Stored state from localStorage:', localStorage.getItem('googleOAuthState'));\n+      console.log('OAuth Callback - Using stored state:', storedState);\n       console.log('OAuth Callback - Received state:', state);\n       console.log('OAuth Callback - State match:', storedState === state);\n       \n-      if (storedState !== state) {\n+      // TEMPORARY: Bypass state verification for testing if no stored state\n+      if (!storedState) {\n+        console.warn('OAuth Callback - No stored state found, bypassing verification for testing');\n+        // In production, you should remove this bypass\n+      } else if (storedState !== state) {\n         setStatus('error');\n         setMessage('Invalid state parameter. OAuth flow may have been compromised.');\n         console.error('OAuth Callback - State mismatch. Stored:', storedState, 'Received:', state);\n         return;\n@@ -55,10 +61,11 @@\n       if (data.success) {\n         setStatus('success');\n         setMessage('Google Ads connected successfully!');\n         \n-        // Clear the stored state from sessionStorage\n+        // Clear the stored state from both storage types\n         sessionStorage.removeItem('googleOAuthState');\n+        localStorage.removeItem('googleOAuthState');\n         \n         // Close the popup window if it's a popup\n         if (window.opener) {\n           // Send success message to parent window\n@@ -103,9 +110,18 @@\n         return (\n           <div className=\"text-center\">\n             <Loader className=\"w-16 h-16 text-blue-600 animate-spin mx-auto mb-4\" />\n             <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Completing Connection...</h2>\n-            <p className=\"text-gray-600\">Please wait while we complete your Google Ads connection.</p>\n+            <p className=\"text-gray-600 mb-4\">Please wait while we complete your Google Ads connection.</p>\n+            \n+            {/* Debug information */}\n+            <div className=\"mt-4 p-3 bg-gray-100 rounded-lg text-left text-xs\">\n+              <p><strong>Debug Info:</strong></p>\n+              <p>SessionStorage State: {sessionStorage.getItem('googleOAuthState') || 'null'}</p>\n+              <p>LocalStorage State: {localStorage.getItem('googleOAuthState') || 'null'}</p>\n+              <p>URL State: {new URLSearchParams(window.location.search).get('state') || 'null'}</p>\n+              <p>URL Code: {new URLSearchParams(window.location.search).get('code') || 'null'}</p>\n+            </div>\n           </div>\n         );\n \n       case 'success':\n"
                },
                {
                    "date": 1755615526272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,20 +61,28 @@\n       if (data.success) {\n         setStatus('success');\n         setMessage('Google Ads connected successfully!');\n         \n-        // Clear the stored state from both storage types\n-        sessionStorage.removeItem('googleOAuthState');\n-        localStorage.removeItem('googleOAuthState');\n-        \n         // Close the popup window if it's a popup\n         if (window.opener) {\n           // Send success message to parent window\n           window.opener.postMessage({ type: 'GOOGLE_OAUTH_SUCCESS', data }, window.location.origin);\n+          \n+          // Clear the stored state after sending the message\n+          setTimeout(() => {\n+            sessionStorage.removeItem('googleOAuthState');\n+            localStorage.removeItem('googleOAuthState');\n+            console.log('OAuth state cleared after sending success message');\n+          }, 100);\n+          \n           window.close();\n         } else {\n           // If not a popup, redirect after a delay\n           setTimeout(() => {\n+            // Clear the stored state before redirecting\n+            sessionStorage.removeItem('googleOAuthState');\n+            localStorage.removeItem('googleOAuthState');\n+            console.log('OAuth state cleared before redirect');\n             navigate('/dashboard');\n           }, 2000);\n         }\n       } else {\n@@ -86,8 +94,15 @@\n           window.opener.postMessage({ \n             type: 'GOOGLE_OAUTH_FAILURE', \n             error: data.message || 'Failed to complete OAuth flow' \n           }, window.location.origin);\n+          \n+          // Clear the stored state after sending the message\n+          setTimeout(() => {\n+            sessionStorage.removeItem('googleOAuthState');\n+            localStorage.removeItem('googleOAuthState');\n+            console.log('OAuth state cleared after sending failure message');\n+          }, 100);\n         }\n       }\n     } catch (error) {\n       console.error('OAuth callback error:', error);\n@@ -99,8 +114,15 @@\n         window.opener.postMessage({ \n           type: 'GOOGLE_OAUTH_FAILURE', \n           error: 'An error occurred while completing the OAuth flow' \n         }, window.location.origin);\n+        \n+        // Clear the stored state after sending the message\n+        setTimeout(() => {\n+          sessionStorage.removeItem('googleOAuthState');\n+          localStorage.removeItem('googleOAuthState');\n+          console.log('OAuth state cleared after sending error message');\n+        }, 100);\n       }\n     }\n   };\n \n"
                },
                {
                    "date": 1755617106689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,20 +27,14 @@\n         return;\n       }\n \n       // Verify state matches what we stored\n-      const storedState = sessionStorage.getItem('googleOAuthState') || localStorage.getItem('googleOAuthState');\n-      console.log('OAuth Callback - Stored state from sessionStorage:', sessionStorage.getItem('googleOAuthState'));\n-      console.log('OAuth Callback - Stored state from localStorage:', localStorage.getItem('googleOAuthState'));\n-      console.log('OAuth Callback - Using stored state:', storedState);\n+      const storedState = sessionStorage.getItem('googleOAuthState');\n+      console.log('OAuth Callback - Stored state from sessionStorage:', storedState);\n       console.log('OAuth Callback - Received state:', state);\n       console.log('OAuth Callback - State match:', storedState === state);\n       \n-      // TEMPORARY: Bypass state verification for testing if no stored state\n-      if (!storedState) {\n-        console.warn('OAuth Callback - No stored state found, bypassing verification for testing');\n-        // In production, you should remove this bypass\n-      } else if (storedState !== state) {\n+      if (storedState !== state) {\n         setStatus('error');\n         setMessage('Invalid state parameter. OAuth flow may have been compromised.');\n         console.error('OAuth Callback - State mismatch. Stored:', storedState, 'Received:', state);\n         return;\n@@ -61,69 +55,30 @@\n       if (data.success) {\n         setStatus('success');\n         setMessage('Google Ads connected successfully!');\n         \n+        // Clear the stored state from sessionStorage\n+        sessionStorage.removeItem('googleOAuthState');\n+        \n         // Close the popup window if it's a popup\n         if (window.opener) {\n-          // Send success message to parent window\n+          // Send message to parent window\n           window.opener.postMessage({ type: 'GOOGLE_OAUTH_SUCCESS', data }, window.location.origin);\n-          \n-          // Clear the stored state after sending the message\n-          setTimeout(() => {\n-            sessionStorage.removeItem('googleOAuthState');\n-            localStorage.removeItem('googleOAuthState');\n-            console.log('OAuth state cleared after sending success message');\n-          }, 100);\n-          \n           window.close();\n         } else {\n           // If not a popup, redirect after a delay\n           setTimeout(() => {\n-            // Clear the stored state before redirecting\n-            sessionStorage.removeItem('googleOAuthState');\n-            localStorage.removeItem('googleOAuthState');\n-            console.log('OAuth state cleared before redirect');\n             navigate('/dashboard');\n           }, 2000);\n         }\n       } else {\n         setStatus('error');\n         setMessage(data.message || 'Failed to complete OAuth flow');\n-        \n-        // Send failure message to parent window if it's a popup\n-        if (window.opener) {\n-          window.opener.postMessage({ \n-            type: 'GOOGLE_OAUTH_FAILURE', \n-            error: data.message || 'Failed to complete OAuth flow' \n-          }, window.location.origin);\n-          \n-          // Clear the stored state after sending the message\n-          setTimeout(() => {\n-            sessionStorage.removeItem('googleOAuthState');\n-            localStorage.removeItem('googleOAuthState');\n-            console.log('OAuth state cleared after sending failure message');\n-          }, 100);\n-        }\n       }\n     } catch (error) {\n       console.error('OAuth callback error:', error);\n       setStatus('error');\n       setMessage('An error occurred while completing the OAuth flow');\n-      \n-      // Send failure message to parent window if it's a popup\n-      if (window.opener) {\n-        window.opener.postMessage({ \n-          type: 'GOOGLE_OAUTH_FAILURE', \n-          error: 'An error occurred while completing the OAuth flow' \n-        }, window.location.origin);\n-        \n-        // Clear the stored state after sending the message\n-        setTimeout(() => {\n-          sessionStorage.removeItem('googleOAuthState');\n-          localStorage.removeItem('googleOAuthState');\n-          console.log('OAuth state cleared after sending error message');\n-        }, 100);\n-      }\n     }\n   };\n \n   const renderContent = () => {\n@@ -132,18 +87,9 @@\n         return (\n           <div className=\"text-center\">\n             <Loader className=\"w-16 h-16 text-blue-600 animate-spin mx-auto mb-4\" />\n             <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Completing Connection...</h2>\n-            <p className=\"text-gray-600 mb-4\">Please wait while we complete your Google Ads connection.</p>\n-            \n-            {/* Debug information */}\n-            <div className=\"mt-4 p-3 bg-gray-100 rounded-lg text-left text-xs\">\n-              <p><strong>Debug Info:</strong></p>\n-              <p>SessionStorage State: {sessionStorage.getItem('googleOAuthState') || 'null'}</p>\n-              <p>LocalStorage State: {localStorage.getItem('googleOAuthState') || 'null'}</p>\n-              <p>URL State: {new URLSearchParams(window.location.search).get('state') || 'null'}</p>\n-              <p>URL Code: {new URLSearchParams(window.location.search).get('code') || 'null'}</p>\n-            </div>\n+            <p className=\"text-gray-600\">Please wait while we complete your Google Ads connection.</p>\n           </div>\n         );\n \n       case 'success':\n"
                },
                {
                    "date": 1755620709837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,136 +1,44 @@\n-import React, { useEffect, useState } from 'react';\n-import { CheckCircle, XCircle, Loader } from 'lucide-react';\n-import { useNavigate } from 'react-router-dom';\n-import { API_BASE_URL, API_ENDPOINTS } from '../constants';\n+// Frontend: /oauth-callback page\n+import { useEffect } from 'react';\n+import { useNavigate, useSearchParams } from 'react-router-dom';\n \n-const GoogleOAuthCallback: React.FC = () => {\n-  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');\n-  const [message, setMessage] = useState('');\n+function OAuthCallback() {\n   const navigate = useNavigate();\n-\n+  const [searchParams] = useSearchParams();\n+  \n   useEffect(() => {\n-    handleCallback();\n-  }, []);\n+    const code = searchParams.get('code');\n+    const state = searchParams.get('state');\n+    \n+    if (code && state) {\n+      exchangeCodeForTokens(code, state);\n+    }\n+  }, [searchParams]);\n \n-  const handleCallback = async () => {\n+  const exchangeCodeForTokens = async (code, state) => {\n     try {\n-      const urlParams = new URLSearchParams(window.location.search);\n-      const code = urlParams.get('code');\n-      const state = urlParams.get('state');\n-\n-      console.log('OAuth Callback - Received parameters:', { code, state });\n-      console.log('OAuth Callback - Current URL:', window.location.href);\n-\n-      if (!code || !state) {\n-        setStatus('error');\n-        setMessage('Missing authorization code or state parameter');\n-        return;\n-      }\n-\n-      // Verify state matches what we stored\n-      const storedState = sessionStorage.getItem('googleOAuthState');\n-      console.log('OAuth Callback - Stored state from sessionStorage:', storedState);\n-      console.log('OAuth Callback - Received state:', state);\n-      console.log('OAuth Callback - State match:', storedState === state);\n-      \n-      if (storedState !== state) {\n-        setStatus('error');\n-        setMessage('Invalid state parameter. OAuth flow may have been compromised.');\n-        console.error('OAuth Callback - State mismatch. Stored:', storedState, 'Received:', state);\n-        return;\n-      }\n-\n-      // Exchange code for tokens\n-      const accessToken = localStorage.getItem('accessToken');\n-      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.GOOGLE_OAUTH_CALLBACK}?code=${code}&state=${state}`, {\n-        method: 'GET',\n+      const response = await fetch('http://localhost:8001/accounts/api/google-oauth/exchange-tokens/', {\n+        method: 'POST',\n         headers: {\n-          'Authorization': `Bearer ${accessToken}`,\n           'Content-Type': 'application/json',\n         },\n+        body: JSON.stringify({ code, state }),\n       });\n-\n+      \n       const data = await response.json();\n-\n+      \n       if (data.success) {\n-        setStatus('success');\n-        setMessage('Google Ads connected successfully!');\n-        \n-        // Clear the stored state from sessionStorage\n-        sessionStorage.removeItem('googleOAuthState');\n-        \n-        // Close the popup window if it's a popup\n-        if (window.opener) {\n-          // Send message to parent window\n-          window.opener.postMessage({ type: 'GOOGLE_OAUTH_SUCCESS', data }, window.location.origin);\n-          window.close();\n-        } else {\n-          // If not a popup, redirect after a delay\n-          setTimeout(() => {\n-            navigate('/dashboard');\n-          }, 2000);\n-        }\n+        // OAuth successful - redirect to dashboard\n+        navigate('/dashboard');\n       } else {\n-        setStatus('error');\n-        setMessage(data.message || 'Failed to complete OAuth flow');\n+        console.error('OAuth failed:', data.error);\n+        navigate('/error');\n       }\n     } catch (error) {\n-      console.error('OAuth callback error:', error);\n-      setStatus('error');\n-      setMessage('An error occurred while completing the OAuth flow');\n+      console.error('Token exchange error:', error);\n+      navigate('/error');\n     }\n   };\n \n-  const renderContent = () => {\n-    switch (status) {\n-      case 'loading':\n-        return (\n-          <div className=\"text-center\">\n-            <Loader className=\"w-16 h-16 text-blue-600 animate-spin mx-auto mb-4\" />\n-            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Completing Connection...</h2>\n-            <p className=\"text-gray-600\">Please wait while we complete your Google Ads connection.</p>\n-          </div>\n-        );\n-\n-      case 'success':\n-        return (\n-          <div className=\"text-center\">\n-            <CheckCircle className=\"w-16 h-16 text-green-600 mx-auto mb-4\" />\n-            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Connection Successful!</h2>\n-            <p className=\"text-gray-600 mb-4\">{message}</p>\n-            <p className=\"text-sm text-gray-500\">You can close this window and return to the main application.</p>\n-          </div>\n-        );\n-\n-      case 'error':\n-        return (\n-          <div className=\"text-center\">\n-            <XCircle className=\"w-16 h-16 text-red-600 mx-auto mb-4\" />\n-            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Connection Failed</h2>\n-            <p className=\"text-red-600 mb-4\">{message}</p>\n-            <button\n-              onClick={() => window.close()}\n-              className=\"bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 transition-colors\"\n-            >\n-              Close Window\n-            </button>\n-          </div>\n-        );\n-\n-      default:\n-        return null;\n-    }\n-  };\n-\n-  return (\n-    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4\">\n-      <div className=\"max-w-md w-full\">\n-        <div className=\"bg-white rounded-2xl shadow-xl p-8 border border-gray-100\">\n-          {renderContent()}\n-        </div>\n-      </div>\n-    </div>\n-  );\n-};\n-\n-export default GoogleOAuthCallback;\n+  return <div>Processing OAuth...</div>;\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755620768782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // Frontend: /oauth-callback page\n import { useEffect } from 'react';\n import { useNavigate, useSearchParams } from 'react-router-dom';\n \n-function OAuthCallback() {\n+function GoogleOAuthCallback() {\n   const navigate = useNavigate();\n   const [searchParams] = useSearchParams();\n   \n   useEffect(() => {\n"
                },
                {
                    "date": 1755620803133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // Frontend: /oauth-callback page\n import { useEffect } from 'react';\n import { useNavigate, useSearchParams } from 'react-router-dom';\n \n-function GoogleOAuthCallback() {\n+export function GoogleOAuthCallback() {\n   const navigate = useNavigate();\n   const [searchParams] = useSearchParams();\n   \n   useEffect(() => {\n"
                },
                {
                    "date": 1755620836851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,13 +9,8 @@\n   useEffect(() => {\n     const code = searchParams.get('code');\n     const state = searchParams.get('state');\n     \n-    if (code && state) {\n-      exchangeCodeForTokens(code, state);\n-    }\n-  }, [searchParams]);\n-\n   const exchangeCodeForTokens = async (code, state) => {\n     try {\n       const response = await fetch('http://localhost:8001/accounts/api/google-oauth/exchange-tokens/', {\n         method: 'POST',\n@@ -38,7 +33,12 @@\n       console.error('Token exchange error:', error);\n       navigate('/error');\n     }\n   };\n+    if (code && state) {\n+      exchangeCodeForTokens(code, state);\n+    }\n+  }, [searchParams]);\n \n+\n   return <div>Processing OAuth...</div>;\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755620851413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,9 @@\n \n export function GoogleOAuthCallback() {\n   const navigate = useNavigate();\n   const [searchParams] = useSearchParams();\n-  \n-  useEffect(() => {\n-    const code = searchParams.get('code');\n-    const state = searchParams.get('state');\n-    \n+\n   const exchangeCodeForTokens = async (code, state) => {\n     try {\n       const response = await fetch('http://localhost:8001/accounts/api/google-oauth/exchange-tokens/', {\n         method: 'POST',\n@@ -33,8 +29,13 @@\n       console.error('Token exchange error:', error);\n       navigate('/error');\n     }\n   };\n+  \n+  useEffect(() => {\n+    const code = searchParams.get('code');\n+    const state = searchParams.get('state');\n+    \n     if (code && state) {\n       exchangeCodeForTokens(code, state);\n     }\n   }, [searchParams]);\n"
                },
                {
                    "date": 1755620880307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,33 +4,8 @@\n \n export function GoogleOAuthCallback() {\n   const navigate = useNavigate();\n   const [searchParams] = useSearchParams();\n-\n-  const exchangeCodeForTokens = async (code, state) => {\n-    try {\n-      const response = await fetch('http://localhost:8001/accounts/api/google-oauth/exchange-tokens/', {\n-        method: 'POST',\n-        headers: {\n-          'Content-Type': 'application/json',\n-        },\n-        body: JSON.stringify({ code, state }),\n-      });\n-      \n-      const data = await response.json();\n-      \n-      if (data.success) {\n-        // OAuth successful - redirect to dashboard\n-        navigate('/dashboard');\n-      } else {\n-        console.error('OAuth failed:', data.error);\n-        navigate('/error');\n-      }\n-    } catch (error) {\n-      console.error('Token exchange error:', error);\n-      navigate('/error');\n-    }\n-  };\n   \n   useEffect(() => {\n     const code = searchParams.get('code');\n     const state = searchParams.get('state');\n"
                },
                {
                    "date": 1755620886599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,34 @@\n   useEffect(() => {\n     const code = searchParams.get('code');\n     const state = searchParams.get('state');\n     \n+\n+    const exchangeCodeForTokens = async (code, state) => {\n+        try {\n+          const response = await fetch('http://localhost:8001/accounts/api/google-oauth/exchange-tokens/', {\n+            method: 'POST',\n+            headers: {\n+              'Content-Type': 'application/json',\n+            },\n+            body: JSON.stringify({ code, state }),\n+          });\n+          \n+          const data = await response.json();\n+          \n+          if (data.success) {\n+            // OAuth successful - redirect to dashboard\n+            navigate('/dashboard');\n+          } else {\n+            console.error('OAuth failed:', data.error);\n+            navigate('/error');\n+          }\n+        } catch (error) {\n+          console.error('Token exchange error:', error);\n+          navigate('/error');\n+        }\n+      };\n+\n     if (code && state) {\n       exchangeCodeForTokens(code, state);\n     }\n   }, [searchParams]);\n"
                },
                {
                    "date": 1755620903100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     const code = searchParams.get('code');\n     const state = searchParams.get('state');\n     \n \n-    const exchangeCodeForTokens = async (code, state) => {\n+    const exchangeCodeForTokens = async (code:any, state:any) => {\n         try {\n           const response = await fetch('http://localhost:8001/accounts/api/google-oauth/exchange-tokens/', {\n             method: 'POST',\n             headers: {\n"
                },
                {
                    "date": 1755620913425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n               'Content-Type': 'application/json',\n             },\n             body: JSON.stringify({ code, state }),\n           });\n-          \n+          debugger\n           const data = await response.json();\n           \n           if (data.success) {\n             // OAuth successful - redirect to dashboard\n"
                },
                {
                    "date": 1755663153899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+import React, { useEffect, useState } from 'react';\n+import { CheckCircle, XCircle, Loader } from 'lucide-react';\n+import { useNavigate } from 'react-router-dom';\n+import { API_BASE_URL, API_ENDPOINTS } from '../constants';\n+\n+const GoogleOAuthCallback: React.FC = () => {\n+  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');\n+  const [message, setMessage] = useState('');\n+  const navigate = useNavigate();\n+\n+  useEffect(() => {\n+    handleCallback();\n+  }, []);\n+\n+  const handleCallback = async () => {\n+    try {\n+      const urlParams = new URLSearchParams(window.location.search);\n+      const code = urlParams.get('code');\n+      const state = urlParams.get('state');\n+\n+      if (!code || !state) {\n+        setStatus('error');\n+        setMessage('Missing authorization code or state parameter');\n+        return;\n+      }\n+\n+      // Verify state matches what we stored\n+      const storedState = localStorage.getItem('googleOAuthState');\n+      if (storedState !== state) {\n+        setStatus('error');\n+        setMessage('Invalid state parameter. OAuth flow may have been compromised.');\n+        return;\n+      }\n+\n+      // Step 1: Exchange authorization code for tokens\n+      setMessage('Exchanging authorization code for tokens...');\n+      \n+      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.GOOGLE_OAUTH_EXCHANGE_TOKENS}`, {\n+        method: 'POST',\n+        headers: {\n+          'Content-Type': 'application/json',\n+        },\n+        body: JSON.stringify({\n+          code: code,\n+          state: state\n+        })\n+      });\n+\n+      const exchangeData = await response.json();\n+\n+      if (!exchangeData.success) {\n+        setStatus('error');\n+        setMessage(exchangeData.message || 'Failed to exchange authorization code for tokens');\n+        return;\n+      }\n+\n+      // Step 2: Check OAuth connection status\n+      setMessage('Verifying OAuth connection status...');\n+      \n+      const accessToken = localStorage.getItem('accessToken');\n+      if (!accessToken) {\n+        setStatus('error');\n+        setMessage('No access token found. Please login again.');\n+        return;\n+      }\n+\n+      const statusResponse = await fetch(`${API_BASE_URL}${API_ENDPOINTS.GOOGLE_OAUTH_STATUS}`, {\n+        method: 'GET',\n+        headers: {\n+          'Authorization': `Bearer ${accessToken}`,\n+          'Content-Type': 'application/json',\n+        },\n+      });\n+\n+      const statusData = await statusResponse.json();\n+\n+      if (statusData.success) {\n+        setStatus('success');\n+        setMessage('Google Ads connected successfully!');\n+        \n+        // Clear the stored state\n+        localStorage.removeItem('googleOAuthState');\n+        \n+        // Close the popup window if it's a popup\n+        if (window.opener) {\n+          // Send message to parent window\n+          window.opener.postMessage({ \n+            type: 'GOOGLE_OAUTH_SUCCESS', \n+            data: statusData \n+          }, window.location.origin);\n+          window.close();\n+        } else {\n+          // If not a popup, redirect after a delay\n+          setTimeout(() => {\n+            navigate('/dashboard');\n+          }, 2000);\n+        }\n+      } else {\n+        setStatus('error');\n+        setMessage(statusData.message || 'Failed to verify OAuth connection status');\n+      }\n+    } catch (error) {\n+      console.error('OAuth callback error:', error);\n+      setStatus('error');\n+      setMessage('An error occurred while completing the OAuth flow');\n+    }\n+  };\n+\n+  const renderContent = () => {\n+    switch (status) {\n+      case 'loading':\n+        return (\n+          <div className=\"text-center\">\n+            <Loader className=\"w-16 h-16 text-blue-600 animate-spin mx-auto mb-4\" />\n+            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Completing Connection...</h2>\n+            <p className=\"text-gray-600\">{message || 'Please wait while we complete your Google Ads connection.'}</p>\n+          </div>\n+        );\n+\n+      case 'success':\n+        return (\n+          <div className=\"text-center\">\n+            <CheckCircle className=\"w-16 h-16 text-green-600 mx-auto mb-4\" />\n+            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Connection Successful!</h2>\n+            <p className=\"text-gray-600 mb-4\">{message}</p>\n+            <p className=\"text-sm text-gray-500\">You can close this window and return to the main application.</p>\n+          </div>\n+        );\n+\n+      case 'error':\n+        return (\n+          <div className=\"text-center\">\n+            <XCircle className=\"w-16 h-16 text-red-600 mx-auto mb-4\" />\n+            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Connection Failed</h2>\n+            <p className=\"text-red-600 mb-4\">{message}</p>\n+            <button\n+              onClick={() => window.close()}\n+              className=\"bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 transition-colors\"\n+            >\n+              Close Window\n+            </button>\n+          </div>\n+        );\n+\n+      default:\n+        return null;\n+    }\n+  };\n+\n+  return (\n+    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4\">\n+      <div className=\"max-w-md w-full\">\n+        <div className=\"bg-white rounded-2xl shadow-xl p-8 border border-gray-100\">\n+          {renderContent()}\n+        </div>\n+      </div>\n+    </div>\n+  );\n+};\n+\n+export default GoogleOAuthCallback;\n"
                },
                {
                    "date": 1755664852334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,18 @@\n             <XCircle className=\"w-16 h-16 text-red-600 mx-auto mb-4\" />\n             <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Connection Failed</h2>\n             <p className=\"text-red-600 mb-4\">{message}</p>\n             <button\n-              onClick={() => window.close()}\n+              onClick={() => {\n+                // Send message to parent window to stop loading\n+                if (window.opener) {\n+                  window.opener.postMessage({ \n+                    type: 'GOOGLE_OAUTH_FAILURE', \n+                    error: message \n+                  }, window.location.origin);\n+                }\n+                window.close();\n+              }}\n               className=\"bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 transition-colors\"\n             >\n               Close Window\n             </button>\n@@ -158,50 +167,4 @@\n   );\n };\n \n export default GoogleOAuthCallback;\n-// Frontend: /oauth-callback page\n-import { useEffect } from 'react';\n-import { useNavigate, useSearchParams } from 'react-router-dom';\n-\n-export function GoogleOAuthCallback() {\n-  const navigate = useNavigate();\n-  const [searchParams] = useSearchParams();\n-  \n-  useEffect(() => {\n-    const code = searchParams.get('code');\n-    const state = searchParams.get('state');\n-    \n-\n-    const exchangeCodeForTokens = async (code:any, state:any) => {\n-        try {\n-          const response = await fetch('http://localhost:8001/accounts/api/google-oauth/exchange-tokens/', {\n-            method: 'POST',\n-            headers: {\n-              'Content-Type': 'application/json',\n-            },\n-            body: JSON.stringify({ code, state }),\n-          });\n-          debugger\n-          const data = await response.json();\n-          \n-          if (data.success) {\n-            // OAuth successful - redirect to dashboard\n-            navigate('/dashboard');\n-          } else {\n-            console.error('OAuth failed:', data.error);\n-            navigate('/error');\n-          }\n-        } catch (error) {\n-          console.error('Token exchange error:', error);\n-          navigate('/error');\n-        }\n-      };\n-\n-    if (code && state) {\n-      exchangeCodeForTokens(code, state);\n-    }\n-  }, [searchParams]);\n-\n-\n-  return <div>Processing OAuth...</div>;\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755665884719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,8 @@\n         setMessage('Missing authorization code or state parameter');\n         return;\n       }\n \n-      // Verify state matches what we stored\n       const storedState = localStorage.getItem('googleOAuthState');\n       if (storedState !== state) {\n         setStatus('error');\n         setMessage('Invalid state parameter. OAuth flow may have been compromised.');\n@@ -34,9 +33,9 @@\n \n       // Step 1: Exchange authorization code for tokens\n       setMessage('Exchanging authorization code for tokens...');\n       \n-      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.GOOGLE_OAUTH_EXCHANGE_TOKENS}`, {\n+      const exchangeResponse = await fetch(`${API_BASE_URL}${API_ENDPOINTS.GOOGLE_OAUTH_EXCHANGE_TOKENS}`, {\n         method: 'POST',\n         headers: {\n           'Content-Type': 'application/json',\n         },\n@@ -45,10 +44,18 @@\n           state: state\n         })\n       });\n \n-      const exchangeData = await response.json();\n+      if (!exchangeResponse.ok) {\n+        const errorText = await exchangeResponse.text();\n+        console.error('Token exchange failed:', exchangeResponse.status, errorText);\n+        setStatus('error');\n+        setMessage(`Token exchange failed (${exchangeResponse.status}): ${errorText || 'Unknown error'}`);\n+        return;\n+      }\n \n+      const exchangeData = await exchangeResponse.json();\n+\n       if (!exchangeData.success) {\n         setStatus('error');\n         setMessage(exchangeData.message || 'Failed to exchange authorization code for tokens');\n         return;\n@@ -71,8 +78,16 @@\n           'Content-Type': 'application/json',\n         },\n       });\n \n+      if (!statusResponse.ok) {\n+        const errorText = await statusResponse.text();\n+        console.error('Status check failed:', statusResponse.status, errorText);\n+        setStatus('error');\n+        setMessage(`Status check failed (${statusResponse.status}): ${errorText || 'Unknown error'}`);\n+        return;\n+      }\n+\n       const statusData = await statusResponse.json();\n \n       if (statusData.success) {\n         setStatus('success');\n@@ -101,9 +116,13 @@\n       }\n     } catch (error) {\n       console.error('OAuth callback error:', error);\n       setStatus('error');\n-      setMessage('An error occurred while completing the OAuth flow');\n+      if (error instanceof Error) {\n+        setMessage(`An error occurred: ${error.message}`);\n+      } else {\n+        setMessage('An error occurred while completing the OAuth flow');\n+      }\n     }\n   };\n \n   const renderContent = () => {\n"
                },
                {
                    "date": 1755666302233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n     try {\n       const urlParams = new URLSearchParams(window.location.search);\n       const code = urlParams.get('code');\n       const state = urlParams.get('state');\n+      const scope = urlParams.get('scope');\n \n       if (!code || !state) {\n         setStatus('error');\n         setMessage('Missing authorization code or state parameter');\n@@ -30,8 +31,11 @@\n         setMessage('Invalid state parameter. OAuth flow may have been compromised.');\n         return;\n       }\n \n+      // Log the received scope for debugging\n+      console.log('Received OAuth scope:', scope);\n+\n       // Step 1: Exchange authorization code for tokens\n       setMessage('Exchanging authorization code for tokens...');\n       \n       const exchangeResponse = await fetch(`${API_BASE_URL}${API_ENDPOINTS.GOOGLE_OAUTH_EXCHANGE_TOKENS}`, {\n@@ -40,25 +44,38 @@\n           'Content-Type': 'application/json',\n         },\n         body: JSON.stringify({\n           code: code,\n-          state: state\n+          state: state,\n+          scope: scope // Include the scope in the request\n         })\n       });\n \n       if (!exchangeResponse.ok) {\n         const errorText = await exchangeResponse.text();\n         console.error('Token exchange failed:', exchangeResponse.status, errorText);\n-        setStatus('error');\n-        setMessage(`Token exchange failed (${exchangeResponse.status}): ${errorText || 'Unknown error'}`);\n+        \n+        // Handle scope-related errors specifically\n+        if (errorText.includes('Scope has changed')) {\n+          setStatus('error');\n+          setMessage('Google OAuth scope changed. This is normal and expected. Please try the connection again.');\n+        } else {\n+          setStatus('error');\n+          setMessage(`Token exchange failed (${exchangeResponse.status}): ${errorText || 'Unknown error'}`);\n+        }\n         return;\n       }\n \n       const exchangeData = await exchangeResponse.json();\n \n       if (!exchangeData.success) {\n         setStatus('error');\n-        setMessage(exchangeData.message || 'Failed to exchange authorization code for tokens');\n+        // Handle scope-related errors in the response body\n+        if (exchangeData.error && exchangeData.error.includes('Scope has changed')) {\n+          setMessage('Google OAuth scope changed. This is normal and expected. Please try the connection again.');\n+        } else {\n+          setMessage(exchangeData.message || 'Failed to exchange authorization code for tokens');\n+        }\n         return;\n       }\n \n       // Step 2: Check OAuth connection status\n@@ -151,8 +168,21 @@\n           <div className=\"text-center\">\n             <XCircle className=\"w-16 h-16 text-red-600 mx-auto mb-4\" />\n             <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Connection Failed</h2>\n             <p className=\"text-red-600 mb-4\">{message}</p>\n+            \n+            {/* Show specific guidance for scope errors */}\n+            {message.includes('scope changed') && (\n+              <div className=\"mb-4 p-3 bg-blue-50 rounded-lg border border-blue-200\">\n+                <p className=\"text-sm text-blue-700\">\n+                  <strong>What happened?</strong> Google automatically added additional scopes for security.\n+                </p>\n+                <p className=\"text-sm text-blue-700 mt-1\">\n+                  <strong>What to do?</strong> This is normal and expected. Please try connecting again.\n+                </p>\n+              </div>\n+            )}\n+            \n             <button\n               onClick={() => {\n                 // Send message to parent window to stop loading\n                 if (window.opener) {\n"
                }
            ],
            "date": 1755614546772,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\nimport { CheckCircle, XCircle, Loader } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { API_BASE_URL, API_ENDPOINTS } from '../constants';\n\nconst GoogleOAuthCallback: React.FC = () => {\n  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    handleCallback();\n  }, []);\n\n  const handleCallback = async () => {\n    try {\n      const urlParams = new URLSearchParams(window.location.search);\n      const code = urlParams.get('code');\n      const state = urlParams.get('state');\n\n      if (!code || !state) {\n        setStatus('error');\n        setMessage('Missing authorization code or state parameter');\n        return;\n      }\n\n      // Verify state matches what we stored\n      const storedState = localStorage.getItem('googleOAuthState');\n      if (storedState !== state) {\n        setStatus('error');\n        setMessage('Invalid state parameter. OAuth flow may have been compromised.');\n        return;\n      }\n\n      // Exchange code for tokens\n      const accessToken = localStorage.getItem('accessToken');\n      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.GOOGLE_OAUTH_CALLBACK}?code=${code}&state=${state}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setStatus('success');\n        setMessage('Google Ads connected successfully!');\n        \n        // Clear the stored state\n        localStorage.removeItem('googleOAuthState');\n        \n        // Close the popup window if it's a popup\n        if (window.opener) {\n          // Send message to parent window\n          window.opener.postMessage({ type: 'GOOGLE_OAUTH_SUCCESS', data }, window.location.origin);\n          window.close();\n        } else {\n          // If not a popup, redirect after a delay\n          setTimeout(() => {\n            navigate('/dashboard');\n          }, 2000);\n        }\n      } else {\n        setStatus('error');\n        setMessage(data.message || 'Failed to complete OAuth flow');\n      }\n    } catch (error) {\n      console.error('OAuth callback error:', error);\n      setStatus('error');\n      setMessage('An error occurred while completing the OAuth flow');\n    }\n  };\n\n  const renderContent = () => {\n    switch (status) {\n      case 'loading':\n        return (\n          <div className=\"text-center\">\n            <Loader className=\"w-16 h-16 text-blue-600 animate-spin mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Completing Connection...</h2>\n            <p className=\"text-gray-600\">Please wait while we complete your Google Ads connection.</p>\n          </div>\n        );\n\n      case 'success':\n        return (\n          <div className=\"text-center\">\n            <CheckCircle className=\"w-16 h-16 text-green-600 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Connection Successful!</h2>\n            <p className=\"text-gray-600 mb-4\">{message}</p>\n            <p className=\"text-sm text-gray-500\">You can close this window and return to the main application.</p>\n          </div>\n        );\n\n      case 'error':\n        return (\n          <div className=\"text-center\">\n            <XCircle className=\"w-16 h-16 text-red-600 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Connection Failed</h2>\n            <p className=\"text-red-600 mb-4\">{message}</p>\n            <button\n              onClick={() => window.close()}\n              className=\"bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 transition-colors\"\n            >\n              Close Window\n            </button>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full\">\n        <div className=\"bg-white rounded-2xl shadow-xl p-8 border border-gray-100\">\n          {renderContent()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GoogleOAuthCallback;\n"
        }
    ]
}