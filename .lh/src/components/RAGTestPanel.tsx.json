{
    "sourceFile": "src/components/RAGTestPanel.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756108073158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756108073158,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\n\ninterface RAGTestPanelProps {\n  className?: string;\n}\n\nconst RAGTestPanel: React.FC<RAGTestPanelProps> = ({ className = '' }) => {\n  const [testQuery, setTestQuery] = useState('');\n  const [testResults, setTestResults] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const testQueries = [\n    \"What are Google Ads best practices for campaign optimization?\",\n    \"How should I structure my ad groups for better performance?\",\n    \"What bidding strategies work best for e-commerce campaigns?\",\n    \"How can I improve my Quality Score?\",\n    \"What are the latest Google Ads features and updates?\"\n  ];\n\n  const handleTestQuery = async (query: string) => {\n    setTestQuery(query);\n    setIsLoading(true);\n    \n    // Simulate RAG response for testing\n    setTimeout(() => {\n      const mockRAGResponse = {\n        response_type: 'rag',\n        blocks: [\n          {\n            type: 'text',\n            content: `RAG-enhanced response for: \"${query}\"`,\n            style: 'heading'\n          },\n          {\n            type: 'text',\n            content: 'This response was generated using our knowledge base combined with AI analysis.',\n            style: 'paragraph'\n          }\n        ],\n        rag_metadata: {\n          context_used: true,\n          context_sources: ['google_ads_best_practices.md', 'campaign_optimization_guide.md'],\n          selection_reason: 'Query matched knowledge base content for Google Ads optimization'\n        }\n      };\n      \n      setTestResults(mockRAGResponse);\n      setIsLoading(false);\n    }, 2000);\n  };\n\n  return (\n    <div className={`bg-white rounded-lg shadow-lg p-6 ${className}`}>\n      <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">RAG Testing Panel</h2>\n      \n      <div className=\"space-y-4\">\n        <div>\n          <h3 className=\"font-medium text-gray-700 mb-2\">Test Queries</h3>\n          <div className=\"space-y-2\">\n            {testQueries.map((query, index) => (\n              <button\n                key={index}\n                onClick={() => handleTestQuery(query)}\n                className=\"w-full text-left p-3 bg-gray-50 hover:bg-gray-100 rounded-lg text-sm text-gray-700 transition-colors\"\n              >\n                {query}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <h3 className=\"font-medium text-gray-700 mb-2\">Current Query</h3>\n          <div className=\"p-3 bg-blue-50 rounded-lg\">\n            <p className=\"text-sm text-blue-800\">\n              {testQuery || 'No query selected'}\n            </p>\n          </div>\n        </div>\n\n        <div>\n          <h3 className=\"font-medium text-gray-700 mb-2\">RAG Response</h3>\n          {isLoading ? (\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n                <span className=\"text-sm text-gray-600\">Generating RAG response...</span>\n              </div>\n            </div>\n          ) : testResults ? (\n            <div className=\"p-4 bg-purple-50 border border-purple-200 rounded-lg\">\n              <div className=\"mb-3\">\n                <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n                  RAG Enhanced\n                </span>\n                <span className=\"ml-2 text-sm text-purple-600\">\n                  {testResults.response_type === 'rag' ? 'Knowledge Base + AI' : 'Direct AI'}\n                </span>\n              </div>\n              \n              <div className=\"space-y-2\">\n                {testResults.blocks?.map((block: any, index: number) => (\n                  <div key={index} className=\"text-sm text-gray-700\">\n                    <strong>{block.style === 'heading' ? 'Heading: ' : ''}</strong>\n                    {block.content}\n                  </div>\n                ))}\n              </div>\n              \n              {testResults.rag_metadata && (\n                <div className=\"mt-3 p-2 bg-gray-100 rounded text-xs\">\n                  <strong>Context Used:</strong> {testResults.rag_metadata.context_used ? 'Yes' : 'No'}\n                  <br />\n                  <strong>Selection Reason:</strong> {testResults.rag_metadata.selection_reason}\n                  {testResults.rag_metadata.context_sources && (\n                    <>\n                      <br />\n                      <strong>Sources:</strong> {testResults.rag_metadata.context_sources.join(', ')}\n                    </>\n                  )}\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"p-4 bg-gray-50 rounded-lg text-sm text-gray-500\">\n              Select a test query to see RAG response\n            </div>\n          )}\n        </div>\n\n        <div className=\"pt-4 border-t border-gray-200\">\n          <h3 className=\"font-medium text-gray-700 mb-2\">RAG Features</h3>\n          <ul className=\"text-sm text-gray-600 space-y-1\">\n            <li>• Knowledge base integration</li>\n            <li>• Context-aware responses</li>\n            <li>• Source attribution</li>\n            <li>• Selection reasoning</li>\n            <li>• Enhanced accuracy</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RAGTestPanel;\n"
        }
    ]
}