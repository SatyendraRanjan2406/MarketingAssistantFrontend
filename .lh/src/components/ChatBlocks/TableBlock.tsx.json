{
    "sourceFile": "src/components/ChatBlocks/TableBlock.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756092415455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756113047458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,41 +5,64 @@\n   sortable: boolean;\n }\n \n export const TableBlock: React.FC<TableBlockProps> = ({ title, columns, rows, sortable }) => {\n+  // Helper function to check if content is HTML\n+  const isHtmlContent = (content: any): boolean => {\n+    if (typeof content === 'string') {\n+      return content.includes('<') && content.includes('>');\n+    }\n+    return false;\n+  };\n+\n+  // Helper function to safely render cell content\n+  const renderCellContent = (cell: any) => {\n+    if (isHtmlContent(cell)) {\n+      // For HTML content (like images), render it safely\n+      return <div dangerouslySetInnerHTML={{ __html: cell }} className=\"image-cell\" />;\n+    }\n+    // For regular text content, render as is\n+    return cell;\n+  };\n+\n   return (\n     <div className=\"bg-white rounded-lg border overflow-hidden\">\n       {title && (\n         <div className=\"bg-gray-50 px-4 py-3 border-b\">\n           <h3 className=\"font-semibold text-gray-800\">{title}</h3>\n         </div>\n       )}\n       <div className=\"overflow-x-auto\">\n-        <table className=\"min-w-full divide-y divide-gray-200\">\n-          <thead className=\"bg-gray-50\">\n-            <tr>\n-              {columns.map((column, index) => (\n-                <th\n-                  key={index}\n-                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n-                >\n-                  {column}\n-                </th>\n-              ))}\n-            </tr>\n-          </thead>\n-          <tbody className=\"bg-white divide-y divide-gray-200\">\n-            {rows.map((row, rowIndex) => (\n-              <tr key={rowIndex} className=\"hover:bg-gray-50\">\n-                {row.map((cell, cellIndex) => (\n-                  <td key={cellIndex} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n-                    {cell}\n-                  </td>\n+        <div className=\"inline-block min-w-full align-middle\">\n+          <table className=\"min-w-full divide-y divide-gray-200\">\n+            <thead className=\"bg-gray-50\">\n+              <tr>\n+                {columns.map((column, index) => (\n+                  <th\n+                    key={index}\n+                    className={`px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider ${\n+                      column.toLowerCase() === 'image' ? 'w-1/2' : ''\n+                    }`}\n+                  >\n+                    {column}\n+                  </th>\n                 ))}\n               </tr>\n-            ))}\n-          </tbody>\n-        </table>\n+            </thead>\n+            <tbody className=\"bg-white divide-y divide-gray-200\">\n+              {rows.map((row, rowIndex) => (\n+                <tr key={rowIndex} className=\"hover:bg-gray-50\">\n+                  {row.map((cell, cellIndex) => (\n+                    <td key={cellIndex} className=\"px-6 py-4 text-sm text-gray-900\">\n+                      {renderCellContent(cell)}\n+                    </td>\n+                  ))}\n+                </tr>\n+              ))}\n+            </tbody>\n+          </table>\n+        </div>\n       </div>\n     </div>\n   );\n };\n+\n"
                }
            ],
            "date": 1756092415455,
            "name": "Commit-0",
            "content": "interface TableBlockProps {\n  title: string;\n  columns: string[];\n  rows: any[][];\n  sortable: boolean;\n}\n\nexport const TableBlock: React.FC<TableBlockProps> = ({ title, columns, rows, sortable }) => {\n  return (\n    <div className=\"bg-white rounded-lg border overflow-hidden\">\n      {title && (\n        <div className=\"bg-gray-50 px-4 py-3 border-b\">\n          <h3 className=\"font-semibold text-gray-800\">{title}</h3>\n        </div>\n      )}\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              {columns.map((column, index) => (\n                <th\n                  key={index}\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                >\n                  {column}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {rows.map((row, rowIndex) => (\n              <tr key={rowIndex} className=\"hover:bg-gray-50\">\n                {row.map((cell, cellIndex) => (\n                  <td key={cellIndex} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {cell}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n"
        }
    ]
}