{
    "sourceFile": "src/services/authService.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1755587604298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755588676670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,116 +1,1 @@\n-import api from './api';\n-import { SignupRequest, LoginRequest, AuthResponse, User } from '../types';\n-\n-class AuthService {\n-  // Signup user\n-  async signup(userData: SignupRequest): Promise<AuthResponse> {\n-    try {\n-      // Convert to form data format as expected by the backend\n-      const formData = new URLSearchParams();\n-      Object.entries(userData).forEach(([key, value]) => {\n-        if (value !== undefined) {\n-          formData.append(key, value);\n-        }\n-      });\n-\n-      const response = await api.post('/accounts/signup/', formData, {\n-        headers: {\n-          'Content-Type': 'application/x-www-form-urlencoded',\n-        },\n-      });\n-\n-      if (response.data.success) {\n-        // Store user info in localStorage\n-        const user: User = {\n-          id: 'temp-id', // Backend doesn't return user ID in response\n-          name: `${userData.first_name} ${userData.last_name}`,\n-          email: userData.email,\n-        };\n-        localStorage.setItem('user', JSON.stringify(user));\n-      }\n-\n-      return response.data;\n-    } catch (error: any) {\n-      if (error.response?.data) {\n-        return error.response.data;\n-      }\n-      throw new Error('Signup failed');\n-    }\n-  }\n-\n-  // Login user\n-  async login(credentials: LoginRequest): Promise<AuthResponse> {\n-    try {\n-      const formData = new URLSearchParams();\n-      formData.append('username', credentials.username);\n-      formData.append('password', credentials.password);\n-\n-      const response = await api.post('/accounts/signin/', formData, {\n-        headers: {\n-          'Content-Type': 'application/x-www-form-urlencoded',\n-        },\n-      });\n-\n-      if (response.data.success) {\n-        // Store user info in localStorage\n-        // Note: Backend doesn't return user details in login response\n-        // We'll need to fetch user details separately or store them during signup\n-        const user: User = {\n-          id: 'temp-id',\n-          name: credentials.username, // Use username as fallback\n-          email: '', // Will be updated when we get user details\n-        };\n-        localStorage.setItem('user', JSON.stringify(user));\n-        localStorage.setItem('authToken', 'session-token'); // Placeholder for session\n-      }\n-\n-      return response.data;\n-    } catch (error: any) {\n-      if (error.response?.data) {\n-        return error.response.data;\n-      }\n-      throw new Error('Login failed');\n-    }\n-  }\n-\n-  // Logout user\n-  async logout(): Promise<void> {\n-    try {\n-      await api.get('/accounts/signout/');\n-    } catch (error) {\n-      console.error('Logout error:', error);\n-    } finally {\n-      // Clear local storage regardless of API call success\n-      localStorage.removeItem('authToken');\n-      localStorage.removeItem('user');\n-    }\n-  }\n-\n-  // Check if user is authenticated\n-  isAuthenticated(): boolean {\n-    const token = localStorage.getItem('authToken');\n-    const user = localStorage.getItem('user');\n-    return !!(token && user);\n-  }\n-\n-  // Get current user\n-  getCurrentUser(): User | null {\n-    const userStr = localStorage.getItem('user');\n-    if (userStr) {\n-      try {\n-        return JSON.parse(userStr);\n-      } catch {\n-        return null;\n-      }\n-    }\n-    return null;\n-  }\n-\n-  // Clear auth data\n-  clearAuth(): void {\n-    localStorage.removeItem('authToken');\n-    localStorage.removeItem('user');\n-  }\n-}\n-\n-export default new AuthService();\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1755589673443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,205 @@\n- \n\\ No newline at end of file\n+import api from './api';\n+import { API_ENDPOINTS } from '../constants';\n+import { User } from '../types';\n+\n+interface SignupRequest {\n+  username: string;\n+  first_name: string;\n+  last_name: string;\n+  email: string;\n+  password1: string;\n+  password2: string;\n+  company_name: string;\n+}\n+\n+interface LoginRequest {\n+  username: string;\n+  password: string;\n+}\n+\n+interface AuthResponse {\n+  success: boolean;\n+  message: string;\n+  user?: User;\n+  token?: string;\n+  errors?: Record<string, string[]>;\n+}\n+\n+class AuthService {\n+  private readonly TOKEN_KEY = 'authToken';\n+  private readonly USER_KEY = 'user';\n+\n+  // Signup user\n+  async signup(userData: {\n+    firstName: string;\n+    lastName: string;\n+    email: string;\n+    password: string;\n+    company: string;\n+  }): Promise<{ success: boolean; user?: User; error?: string }> {\n+    try {\n+      // Convert to form data format as expected by the backend\n+      const formData = new URLSearchParams();\n+      const username = userData.email.split('@')[0]; // Generate username from email\n+      \n+      formData.append('username', username);\n+      formData.append('first_name', userData.firstName);\n+      formData.append('last_name', userData.lastName);\n+      formData.append('email', userData.email);\n+      formData.append('password1', userData.password);\n+      formData.append('password2', userData.password);\n+      formData.append('company_name', userData.company);\n+\n+      const response = await api.post(API_ENDPOINTS.SIGNUP, formData, {\n+        headers: {\n+          'Content-Type': 'application/x-www-form-urlencoded',\n+        },\n+      });\n+\n+      if (response.data.success) {\n+        // Create user object from response or form data\n+        const user: User = {\n+          id: response.data.user?.id || 'temp-id',\n+          name: `${userData.firstName} ${userData.lastName}`,\n+          email: userData.email\n+        };\n+        \n+        // Store user info in localStorage\n+        this.setUser(user);\n+        \n+        // If token is returned, store it\n+        if (response.data.token) {\n+          this.setToken(response.data.token);\n+        }\n+        \n+        return { success: true, user };\n+      } else {\n+        // Handle validation errors\n+        if (response.data.errors) {\n+          const errorMessages = Object.values(response.data.errors).flat();\n+          return { success: false, error: errorMessages.join(', ') };\n+        }\n+        return { success: false, error: response.data.message || 'Signup failed' };\n+      }\n+    } catch (error: any) {\n+      console.error('Signup error:', error);\n+      if (error.response?.data) {\n+        if (error.response.data.errors) {\n+          const errorMessages = Object.values(error.response.data.errors).flat();\n+          return { success: false, error: errorMessages.join(', ') };\n+        }\n+        return { success: false, error: error.response.data.message || 'Signup failed' };\n+      }\n+      return { success: false, error: 'Signup failed. Please try again.' };\n+    }\n+  }\n+\n+  // Login user\n+  async login(email: string, password: string): Promise<{ success: boolean; user?: User; error?: string }> {\n+    try {\n+      const formData = new URLSearchParams();\n+      const username = email.split('@')[0]; // Use email prefix as username\n+      \n+      formData.append('username', username);\n+      formData.append('password', password);\n+\n+      const response = await api.post(API_ENDPOINTS.SIGNIN, formData, {\n+        headers: {\n+          'Content-Type': 'application/x-www-form-urlencoded',\n+        },\n+      });\n+\n+      if (response.data.success) {\n+        // Create user object from response or use email\n+        const user: User = {\n+          id: response.data.user?.id || 'temp-id',\n+          name: response.data.user?.name || username,\n+          email: email\n+        };\n+        \n+        // Store user info in localStorage\n+        this.setUser(user);\n+        \n+        // If token is returned, store it\n+        if (response.data.token) {\n+          this.setToken(response.data.token);\n+        }\n+        \n+        return { success: true, user };\n+      } else {\n+        return { success: false, error: response.data.message || 'Login failed' };\n+      }\n+    } catch (error: any) {\n+      console.error('Login error:', error);\n+      if (error.response?.data) {\n+        if (error.response.data.errors) {\n+          const errorMessages = Object.values(error.response.data.errors).flat();\n+          return { success: false, error: errorMessages.join(', ') };\n+        }\n+        return { success: false, error: error.response.data.message || 'Login failed' };\n+      }\n+      return { success: false, error: 'Login failed. Please try again.' };\n+    }\n+  }\n+\n+  // Logout user\n+  async logout(): Promise<void> {\n+    try {\n+      await api.get(API_ENDPOINTS.SIGNOUT);\n+    } catch (error) {\n+      console.error('Logout error:', error);\n+    } finally {\n+      // Clear local storage regardless of API call success\n+      this.clearToken();\n+      this.clearUser();\n+    }\n+  }\n+\n+  // Check if user is authenticated\n+  isAuthenticated(): boolean {\n+    const token = this.getToken();\n+    const user = this.getUser();\n+    return !!(token && user);\n+  }\n+\n+  // Get current user\n+  getCurrentUser(): User | null {\n+    return this.getUser();\n+  }\n+\n+  // Get token\n+  getToken(): string | null {\n+    return localStorage.getItem(this.TOKEN_KEY);\n+  }\n+\n+  // Private methods\n+  private setToken(token: string): void {\n+    localStorage.setItem(this.TOKEN_KEY, token);\n+  }\n+\n+  private setUser(user: User): void {\n+    localStorage.setItem(this.USER_KEY, JSON.stringify(user));\n+  }\n+\n+  private clearToken(): void {\n+    localStorage.removeItem(this.TOKEN_KEY);\n+  }\n+\n+  private clearUser(): void {\n+    localStorage.removeItem(this.USER_KEY);\n+  }\n+\n+  private getUser(): User | null {\n+    const userStr = localStorage.getItem(this.USER_KEY);\n+    if (userStr) {\n+      try {\n+        return JSON.parse(userStr);\n+      } catch {\n+        return null;\n+      }\n+    }\n+    return null;\n+  }\n+}\n+\n+export default new AuthService();\n"
                },
                {
                    "date": 1755591297871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,15 +19,24 @@\n \n interface AuthResponse {\n   success: boolean;\n   message: string;\n-  user?: User;\n-  token?: string;\n+  access_token?: string;\n+  refresh_token?: string;\n+  user?: {\n+    id: number;\n+    username: string;\n+    email: string;\n+    first_name: string;\n+    last_name: string;\n+    company_name: string;\n+  };\n   errors?: Record<string, string[]>;\n }\n \n class AuthService {\n-  private readonly TOKEN_KEY = 'authToken';\n+  private readonly ACCESS_TOKEN_KEY = 'accessToken';\n+  private readonly REFRESH_TOKEN_KEY = 'refreshToken';\n   private readonly USER_KEY = 'user';\n \n   // Signup user\n   async signup(userData: {\n@@ -56,23 +65,26 @@\n         },\n       });\n \n       if (response.data.success) {\n-        // Create user object from response or form data\n+        const authData: AuthResponse = response.data;\n+        \n+        // Create user object from API response\n         const user: User = {\n-          id: response.data.user?.id || 'temp-id',\n-          name: `${userData.firstName} ${userData.lastName}`,\n-          email: userData.email\n+          id: authData.user?.id?.toString() || 'temp-id',\n+          name: `${authData.user?.first_name || userData.firstName} ${authData.user?.last_name || userData.lastName}`,\n+          email: authData.user?.email || userData.email\n         };\n         \n-        // Store user info in localStorage\n+        // Store tokens and user info in localStorage\n+        if (authData.access_token) {\n+          this.setAccessToken(authData.access_token);\n+        }\n+        if (authData.refresh_token) {\n+          this.setRefreshToken(authData.refresh_token);\n+        }\n         this.setUser(user);\n         \n-        // If token is returned, store it\n-        if (response.data.token) {\n-          this.setToken(response.data.token);\n-        }\n-        \n         return { success: true, user };\n       } else {\n         // Handle validation errors\n         if (response.data.errors) {\n@@ -109,23 +121,26 @@\n         },\n       });\n \n       if (response.data.success) {\n+        const authData: AuthResponse = response.data;\n+        \n         // Create user object from response or use email\n         const user: User = {\n-          id: response.data.user?.id || 'temp-id',\n-          name: response.data.user?.name || username,\n-          email: email\n+          id: authData.user?.id?.toString() || 'temp-id',\n+          name: `${authData.user?.first_name || ''} ${authData.user?.last_name || ''}`.trim() || username,\n+          email: authData.user?.email || email\n         };\n         \n-        // Store user info in localStorage\n+        // Store tokens and user info in localStorage\n+        if (authData.access_token) {\n+          this.setAccessToken(authData.access_token);\n+        }\n+        if (authData.refresh_token) {\n+          this.setRefreshToken(authData.refresh_token);\n+        }\n         this.setUser(user);\n         \n-        // If token is returned, store it\n-        if (response.data.token) {\n-          this.setToken(response.data.token);\n-        }\n-        \n         return { success: true, user };\n       } else {\n         return { success: false, error: response.data.message || 'Login failed' };\n       }\n@@ -149,41 +164,51 @@\n     } catch (error) {\n       console.error('Logout error:', error);\n     } finally {\n       // Clear local storage regardless of API call success\n-      this.clearToken();\n+      this.clearTokens();\n       this.clearUser();\n     }\n   }\n \n   // Check if user is authenticated\n   isAuthenticated(): boolean {\n-    const token = this.getToken();\n+    const accessToken = this.getAccessToken();\n     const user = this.getUser();\n-    return !!(token && user);\n+    return !!(accessToken && user);\n   }\n \n   // Get current user\n   getCurrentUser(): User | null {\n     return this.getUser();\n   }\n \n-  // Get token\n-  getToken(): string | null {\n-    return localStorage.getItem(this.TOKEN_KEY);\n+  // Get access token\n+  getAccessToken(): string | null {\n+    return localStorage.getItem(this.ACCESS_TOKEN_KEY);\n   }\n \n+  // Get refresh token\n+  getRefreshToken(): string | null {\n+    return localStorage.getItem(this.REFRESH_TOKEN_KEY);\n+  }\n+\n   // Private methods\n-  private setToken(token: string): void {\n-    localStorage.setItem(this.TOKEN_KEY, token);\n+  private setAccessToken(token: string): void {\n+    localStorage.setItem(this.ACCESS_TOKEN_KEY, token);\n   }\n \n+  private setRefreshToken(token: string): void {\n+    localStorage.setItem(this.REFRESH_TOKEN_KEY, token);\n+  }\n+\n   private setUser(user: User): void {\n     localStorage.setItem(this.USER_KEY, JSON.stringify(user));\n   }\n \n-  private clearToken(): void {\n-    localStorage.removeItem(this.TOKEN_KEY);\n+  private clearTokens(): void {\n+    localStorage.removeItem(this.ACCESS_TOKEN_KEY);\n+    localStorage.removeItem(this.REFRESH_TOKEN_KEY);\n   }\n \n   private clearUser(): void {\n     localStorage.removeItem(this.USER_KEY);\n"
                },
                {
                    "date": 1755594235685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,8 +191,76 @@\n   getRefreshToken(): string | null {\n     return localStorage.getItem(this.REFRESH_TOKEN_KEY);\n   }\n \n+  // Initiate Google OAuth flow\n+  async initiateGoogleOAuth(): Promise<{ success: boolean; error?: string }> {\n+    try {\n+      const accessToken = this.getAccessToken();\n+      if (!accessToken) {\n+        return { success: false, error: 'No access token found. Please login again.' };\n+      }\n+\n+      const response = await api.get(API_ENDPOINTS.GOOGLE_OAUTH_INITIATE, {\n+        headers: {\n+          'Authorization': `Bearer ${accessToken}`\n+        }\n+      });\n+\n+      if (response.data.success && response.data.authorization_url) {\n+        // Open Google OAuth consent screen in a new window\n+        const authWindow = window.open(\n+          response.data.authorization_url,\n+          'google-oauth',\n+          'width=500,height=600,scrollbars=yes,resizable=yes'\n+        );\n+\n+        if (authWindow) {\n+          // Store the state for verification later\n+          localStorage.setItem('googleOAuthState', response.data.state);\n+          \n+          // Listen for the OAuth callback (you might need to implement this based on your redirect flow)\n+          const checkClosed = setInterval(() => {\n+            if (authWindow.closed) {\n+              clearInterval(checkClosed);\n+              // You can implement additional logic here when the OAuth window closes\n+              console.log('Google OAuth window closed');\n+            }\n+          }, 1000);\n+\n+          return { success: true };\n+        } else {\n+          return { success: false, error: 'Failed to open OAuth window. Please check your popup blocker.' };\n+        }\n+      } else {\n+        return { success: false, error: 'Failed to get authorization URL from server.' };\n+      }\n+    } catch (error: any) {\n+      console.error('Google OAuth initiation error:', error);\n+      if (error.response?.data) {\n+        return { success: false, error: error.response.data.message || 'Failed to initiate Google OAuth' };\n+      }\n+      return { success: false, error: 'Failed to initiate Google OAuth. Please try again.' };\n+    }\n+  }\n+\n+  // Check Google OAuth connection status\n+  async checkGoogleOAuthStatus(): Promise<{ success: boolean; connected: boolean; error?: string }> {\n+    try {\n+      const accessToken = this.getAccessToken();\n+      if (!accessToken) {\n+        return { success: false, connected: false, error: 'No access token found' };\n+      }\n+\n+      // You would implement an API call here to check the connection status\n+      // For now, we'll return a mock response\n+      return { success: true, connected: false };\n+    } catch (error) {\n+      console.error('Check Google OAuth status error:', error);\n+      return { success: false, connected: false, error: 'Failed to check connection status' };\n+    }\n+  }\n+\n   // Private methods\n   private setAccessToken(token: string): void {\n     localStorage.setItem(this.ACCESS_TOKEN_KEY, token);\n   }\n"
                },
                {
                    "date": 1755615014484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,14 +199,19 @@\n       if (!accessToken) {\n         return { success: false, error: 'No access token found. Please login again.' };\n       }\n \n+      console.log('Initiating Google OAuth with access token:', accessToken);\n+      console.log('API endpoint:', API_ENDPOINTS.GOOGLE_OAUTH_INITIATE);\n+\n       const response = await api.get(API_ENDPOINTS.GOOGLE_OAUTH_INITIATE, {\n         headers: {\n           'Authorization': `Bearer ${accessToken}`\n         }\n       });\n \n+      console.log('Google OAuth API response:', response.data);\n+\n       if (response.data.success && response.data.authorization_url) {\n         // Open Google OAuth consent screen in a new window\n         const authWindow = window.open(\n           response.data.authorization_url,\n@@ -215,24 +220,34 @@\n         );\n \n         if (authWindow) {\n           // Store the state for verification later\n+          // Use sessionStorage to ensure it's available in the same session\n+          sessionStorage.setItem('googleOAuthState', response.data.state);\n+          console.log('Stored OAuth state in sessionStorage:', response.data.state);\n+          console.log('Current sessionStorage googleOAuthState:', sessionStorage.getItem('googleOAuthState'));\n+          \n+          // Also store in localStorage as backup\n           localStorage.setItem('googleOAuthState', response.data.state);\n+          console.log('Also stored OAuth state in localStorage as backup:', response.data.state);\n           \n           // Listen for the OAuth callback (you might need to implement this based on your redirect flow)\n           const checkClosed = setInterval(() => {\n             if (authWindow.closed) {\n               clearInterval(checkClosed);\n               // You can implement additional logic here when the OAuth window closes\n               console.log('Google OAuth window closed');\n+              console.log('OAuth state after window closed (sessionStorage):', sessionStorage.getItem('googleOAuthState'));\n+              console.log('OAuth state after window closed (localStorage):', localStorage.getItem('googleOAuthState'));\n             }\n           }, 1000);\n \n           return { success: true };\n         } else {\n           return { success: false, error: 'Failed to open OAuth window. Please check your popup blocker.' };\n         }\n       } else {\n+        console.error('Google OAuth API response missing required data:', response.data);\n         return { success: false, error: 'Failed to get authorization URL from server.' };\n       }\n     } catch (error: any) {\n       console.error('Google OAuth initiation error:', error);\n"
                },
                {
                    "date": 1755615191901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,18 +229,17 @@\n           // Also store in localStorage as backup\n           localStorage.setItem('googleOAuthState', response.data.state);\n           console.log('Also stored OAuth state in localStorage as backup:', response.data.state);\n           \n-          // Listen for the OAuth callback (you might need to implement this based on your redirect flow)\n-          const checkClosed = setInterval(() => {\n-            if (authWindow.closed) {\n-              clearInterval(checkClosed);\n-              // You can implement additional logic here when the OAuth window closes\n-              console.log('Google OAuth window closed');\n-              console.log('OAuth state after window closed (sessionStorage):', sessionStorage.getItem('googleOAuthState'));\n-              console.log('OAuth state after window closed (localStorage):', localStorage.getItem('googleOAuthState'));\n+          // Set up message listener for OAuth completion\n+          const messageListener = (event: MessageEvent) => {\n+            if (event.data.type === 'GOOGLE_OAUTH_SUCCESS' || event.data.type === 'GOOGLE_OAUTH_FAILURE') {\n+              console.log('Received OAuth completion message:', event.data.type);\n+              window.removeEventListener('message', messageListener);\n             }\n-          }, 1000);\n+          };\n+          \n+          window.addEventListener('message', messageListener);\n \n           return { success: true };\n         } else {\n           return { success: false, error: 'Failed to open OAuth window. Please check your popup blocker.' };\n"
                },
                {
                    "date": 1755615442458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,8 +199,15 @@\n       if (!accessToken) {\n         return { success: false, error: 'No access token found. Please login again.' };\n       }\n \n+      // Check if OAuth is already in progress\n+      const existingState = sessionStorage.getItem('googleOAuthState') || localStorage.getItem('googleOAuthState');\n+      if (existingState) {\n+        console.warn('OAuth already in progress with state:', existingState);\n+        return { success: false, error: 'OAuth flow already in progress. Please wait for completion.' };\n+      }\n+\n       console.log('Initiating Google OAuth with access token:', accessToken);\n       console.log('API endpoint:', API_ENDPOINTS.GOOGLE_OAUTH_INITIATE);\n \n       const response = await api.get(API_ENDPOINTS.GOOGLE_OAUTH_INITIATE, {\n@@ -211,26 +218,31 @@\n \n       console.log('Google OAuth API response:', response.data);\n \n       if (response.data.success && response.data.authorization_url) {\n+        // Clear any existing OAuth state first\n+        sessionStorage.removeItem('googleOAuthState');\n+        localStorage.removeItem('googleOAuthState');\n+        \n+        // Store the new state for verification later\n+        // Use sessionStorage to ensure it's available in the same session\n+        debugger\n+        sessionStorage.setItem('googleOAuthState', response.data.state);\n+        console.log('Stored OAuth state in sessionStorage:', response.data.state);\n+        console.log('Current sessionStorage googleOAuthState:', sessionStorage.getItem('googleOAuthState'));\n+        \n+        // Also store in localStorage as backup\n+        localStorage.setItem('googleOAuthState', response.data.state);\n+        console.log('Also stored OAuth state in localStorage as backup:', response.data.state);\n+        \n         // Open Google OAuth consent screen in a new window\n         const authWindow = window.open(\n           response.data.authorization_url,\n           'google-oauth',\n           'width=500,height=600,scrollbars=yes,resizable=yes'\n         );\n \n         if (authWindow) {\n-          // Store the state for verification later\n-          // Use sessionStorage to ensure it's available in the same session\n-          sessionStorage.setItem('googleOAuthState', response.data.state);\n-          console.log('Stored OAuth state in sessionStorage:', response.data.state);\n-          console.log('Current sessionStorage googleOAuthState:', sessionStorage.getItem('googleOAuthState'));\n-          \n-          // Also store in localStorage as backup\n-          localStorage.setItem('googleOAuthState', response.data.state);\n-          console.log('Also stored OAuth state in localStorage as backup:', response.data.state);\n-          \n           // Set up message listener for OAuth completion\n           const messageListener = (event: MessageEvent) => {\n             if (event.data.type === 'GOOGLE_OAUTH_SUCCESS' || event.data.type === 'GOOGLE_OAUTH_FAILURE') {\n               console.log('Received OAuth completion message:', event.data.type);\n@@ -241,16 +253,22 @@\n           window.addEventListener('message', messageListener);\n \n           return { success: true };\n         } else {\n+          // Clean up state if window failed to open\n+          sessionStorage.removeItem('googleOAuthState');\n+          localStorage.removeItem('googleOAuthState');\n           return { success: false, error: 'Failed to open OAuth window. Please check your popup blocker.' };\n         }\n       } else {\n         console.error('Google OAuth API response missing required data:', response.data);\n         return { success: false, error: 'Failed to get authorization URL from server.' };\n       }\n     } catch (error: any) {\n       console.error('Google OAuth initiation error:', error);\n+      // Clean up any partial state\n+      sessionStorage.removeItem('googleOAuthState');\n+      localStorage.removeItem('googleOAuthState');\n       if (error.response?.data) {\n         return { success: false, error: error.response.data.message || 'Failed to initiate Google OAuth' };\n       }\n       return { success: false, error: 'Failed to initiate Google OAuth. Please try again.' };\n"
                },
                {
                    "date": 1755615516502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,14 +224,14 @@\n         localStorage.removeItem('googleOAuthState');\n         \n         // Store the new state for verification later\n         // Use sessionStorage to ensure it's available in the same session\n-        debugger\n         sessionStorage.setItem('googleOAuthState', response.data.state);\n         console.log('Stored OAuth state in sessionStorage:', response.data.state);\n         console.log('Current sessionStorage googleOAuthState:', sessionStorage.getItem('googleOAuthState'));\n         \n         // Also store in localStorage as backup\n+        debugger;\n         localStorage.setItem('googleOAuthState', response.data.state);\n         console.log('Also stored OAuth state in localStorage as backup:', response.data.state);\n         \n         // Open Google OAuth consent screen in a new window\n"
                },
                {
                    "date": 1755617106688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,76 +199,48 @@\n       if (!accessToken) {\n         return { success: false, error: 'No access token found. Please login again.' };\n       }\n \n-      // Check if OAuth is already in progress\n-      const existingState = sessionStorage.getItem('googleOAuthState') || localStorage.getItem('googleOAuthState');\n-      if (existingState) {\n-        console.warn('OAuth already in progress with state:', existingState);\n-        return { success: false, error: 'OAuth flow already in progress. Please wait for completion.' };\n-      }\n-\n-      console.log('Initiating Google OAuth with access token:', accessToken);\n-      console.log('API endpoint:', API_ENDPOINTS.GOOGLE_OAUTH_INITIATE);\n-\n       const response = await api.get(API_ENDPOINTS.GOOGLE_OAUTH_INITIATE, {\n         headers: {\n           'Authorization': `Bearer ${accessToken}`\n         }\n       });\n \n-      console.log('Google OAuth API response:', response.data);\n-\n       if (response.data.success && response.data.authorization_url) {\n-        // Clear any existing OAuth state first\n-        sessionStorage.removeItem('googleOAuthState');\n-        localStorage.removeItem('googleOAuthState');\n-        \n-        // Store the new state for verification later\n-        // Use sessionStorage to ensure it's available in the same session\n-        sessionStorage.setItem('googleOAuthState', response.data.state);\n-        console.log('Stored OAuth state in sessionStorage:', response.data.state);\n-        console.log('Current sessionStorage googleOAuthState:', sessionStorage.getItem('googleOAuthState'));\n-        \n-        // Also store in localStorage as backup\n-        debugger;\n-        localStorage.setItem('googleOAuthState', response.data.state);\n-        console.log('Also stored OAuth state in localStorage as backup:', response.data.state);\n-        \n         // Open Google OAuth consent screen in a new window\n         const authWindow = window.open(\n           response.data.authorization_url,\n           'google-oauth',\n           'width=500,height=600,scrollbars=yes,resizable=yes'\n         );\n \n         if (authWindow) {\n-          // Set up message listener for OAuth completion\n-          const messageListener = (event: MessageEvent) => {\n-            if (event.data.type === 'GOOGLE_OAUTH_SUCCESS' || event.data.type === 'GOOGLE_OAUTH_FAILURE') {\n-              console.log('Received OAuth completion message:', event.data.type);\n-              window.removeEventListener('message', messageListener);\n+          // Store the state for verification later\n+          // Use sessionStorage to ensure it's available in the same session\n+          sessionStorage.setItem('googleOAuthState', response.data.state);\n+          console.log('Stored OAuth state in sessionStorage:', response.data.state);\n+          console.log('Current sessionStorage googleOAuthState:', sessionStorage.getItem('googleOAuthState'));\n+          \n+          // Listen for the OAuth callback (you might need to implement this based on your redirect flow)\n+          const checkClosed = setInterval(() => {\n+            if (authWindow.closed) {\n+              clearInterval(checkClosed);\n+              // You can implement additional logic here when the OAuth window closes\n+              console.log('Google OAuth window closed');\n+              console.log('OAuth state after window closed:', sessionStorage.getItem('googleOAuthState'));\n             }\n-          };\n-          \n-          window.addEventListener('message', messageListener);\n+          }, 1000);\n \n           return { success: true };\n         } else {\n-          // Clean up state if window failed to open\n-          sessionStorage.removeItem('googleOAuthState');\n-          localStorage.removeItem('googleOAuthState');\n           return { success: false, error: 'Failed to open OAuth window. Please check your popup blocker.' };\n         }\n       } else {\n-        console.error('Google OAuth API response missing required data:', response.data);\n         return { success: false, error: 'Failed to get authorization URL from server.' };\n       }\n     } catch (error: any) {\n       console.error('Google OAuth initiation error:', error);\n-      // Clean up any partial state\n-      sessionStorage.removeItem('googleOAuthState');\n-      localStorage.removeItem('googleOAuthState');\n       if (error.response?.data) {\n         return { success: false, error: error.response.data.message || 'Failed to initiate Google OAuth' };\n       }\n       return { success: false, error: 'Failed to initiate Google OAuth. Please try again.' };\n"
                },
                {
                    "date": 1755662238491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import api from './api';\n import { API_ENDPOINTS } from '../constants';\n import { User } from '../types';\n+import { clearCSRFTokenCache } from './api';\n \n interface SignupRequest {\n   username: string;\n   first_name: string;\n@@ -65,23 +66,21 @@\n         },\n       });\n \n       if (response.data.success) {\n-        const authData: AuthResponse = response.data;\n-        \n         // Create user object from API response\n         const user: User = {\n-          id: authData.user?.id?.toString() || 'temp-id',\n-          name: `${authData.user?.first_name || userData.firstName} ${authData.user?.last_name || userData.lastName}`,\n-          email: authData.user?.email || userData.email\n+          id: response.data.user?.id?.toString() || 'temp-id',\n+          name: `${response.data.user?.first_name || userData.firstName} ${response.data.user?.last_name || userData.lastName}`,\n+          email: response.data.user?.email || userData.email\n         };\n         \n         // Store tokens and user info in localStorage\n-        if (authData.access_token) {\n-          this.setAccessToken(authData.access_token);\n+        if (response.data.access_token) {\n+          this.setAccessToken(response.data.access_token);\n         }\n-        if (authData.refresh_token) {\n-          this.setRefreshToken(authData.refresh_token);\n+        if (response.data.refresh_token) {\n+          this.setRefreshToken(response.data.refresh_token);\n         }\n         this.setUser(user);\n         \n         return { success: true, user };\n@@ -108,36 +107,39 @@\n \n   // Login user\n   async login(email: string, password: string): Promise<{ success: boolean; user?: User; error?: string }> {\n     try {\n+      console.log('Attempting login for:', email);\n+      \n       const formData = new URLSearchParams();\n       const username = email.split('@')[0]; // Use email prefix as username\n       \n       formData.append('username', username);\n       formData.append('password', password);\n \n+      console.log('Making login request to:', API_ENDPOINTS.SIGNIN);\n       const response = await api.post(API_ENDPOINTS.SIGNIN, formData, {\n         headers: {\n           'Content-Type': 'application/x-www-form-urlencoded',\n         },\n       });\n \n+      console.log('Login response:', response.data);\n+\n       if (response.data.success) {\n-        const authData: AuthResponse = response.data;\n-        \n         // Create user object from response or use email\n         const user: User = {\n-          id: authData.user?.id?.toString() || 'temp-id',\n-          name: `${authData.user?.first_name || ''} ${authData.user?.last_name || ''}`.trim() || username,\n-          email: authData.user?.email || email\n+          id: response.data.user?.id?.toString() || 'temp-id',\n+          name: response.data.user?.name || response.data.user?.first_name || username,\n+          email: response.data.user?.email || email\n         };\n         \n         // Store tokens and user info in localStorage\n-        if (authData.access_token) {\n-          this.setAccessToken(authData.access_token);\n+        if (response.data.access_token) {\n+          this.setAccessToken(response.data.access_token);\n         }\n-        if (authData.refresh_token) {\n-          this.setRefreshToken(authData.refresh_token);\n+        if (response.data.refresh_token) {\n+          this.setRefreshToken(response.data.refresh_token);\n         }\n         this.setUser(user);\n         \n         return { success: true, user };\n@@ -166,8 +168,9 @@\n     } finally {\n       // Clear local storage regardless of API call success\n       this.clearTokens();\n       this.clearUser();\n+      clearCSRFTokenCache();\n     }\n   }\n \n   // Check if user is authenticated\n@@ -215,20 +218,16 @@\n         );\n \n         if (authWindow) {\n           // Store the state for verification later\n-          // Use sessionStorage to ensure it's available in the same session\n-          sessionStorage.setItem('googleOAuthState', response.data.state);\n-          console.log('Stored OAuth state in sessionStorage:', response.data.state);\n-          console.log('Current sessionStorage googleOAuthState:', sessionStorage.getItem('googleOAuthState'));\n+          localStorage.setItem('googleOAuthState', response.data.state);\n           \n           // Listen for the OAuth callback (you might need to implement this based on your redirect flow)\n           const checkClosed = setInterval(() => {\n             if (authWindow.closed) {\n               clearInterval(checkClosed);\n               // You can implement additional logic here when the OAuth window closes\n               console.log('Google OAuth window closed');\n-              console.log('OAuth state after window closed:', sessionStorage.getItem('googleOAuthState'));\n             }\n           }, 1000);\n \n           return { success: true };\n"
                },
                {
                    "date": 1755663153897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import api from './api';\n import { API_ENDPOINTS } from '../constants';\n import { User } from '../types';\n-import { clearCSRFTokenCache } from './api';\n \n interface SignupRequest {\n   username: string;\n   first_name: string;\n@@ -66,21 +65,23 @@\n         },\n       });\n \n       if (response.data.success) {\n+        const authData: AuthResponse = response.data;\n+        \n         // Create user object from API response\n         const user: User = {\n-          id: response.data.user?.id?.toString() || 'temp-id',\n-          name: `${response.data.user?.first_name || userData.firstName} ${response.data.user?.last_name || userData.lastName}`,\n-          email: response.data.user?.email || userData.email\n+          id: authData.user?.id?.toString() || 'temp-id',\n+          name: `${authData.user?.first_name || userData.firstName} ${authData.user?.last_name || userData.lastName}`,\n+          email: authData.user?.email || userData.email\n         };\n         \n         // Store tokens and user info in localStorage\n-        if (response.data.access_token) {\n-          this.setAccessToken(response.data.access_token);\n+        if (authData.access_token) {\n+          this.setAccessToken(authData.access_token);\n         }\n-        if (response.data.refresh_token) {\n-          this.setRefreshToken(response.data.refresh_token);\n+        if (authData.refresh_token) {\n+          this.setRefreshToken(authData.refresh_token);\n         }\n         this.setUser(user);\n         \n         return { success: true, user };\n@@ -107,39 +108,36 @@\n \n   // Login user\n   async login(email: string, password: string): Promise<{ success: boolean; user?: User; error?: string }> {\n     try {\n-      console.log('Attempting login for:', email);\n-      \n       const formData = new URLSearchParams();\n       const username = email.split('@')[0]; // Use email prefix as username\n       \n       formData.append('username', username);\n       formData.append('password', password);\n \n-      console.log('Making login request to:', API_ENDPOINTS.SIGNIN);\n       const response = await api.post(API_ENDPOINTS.SIGNIN, formData, {\n         headers: {\n           'Content-Type': 'application/x-www-form-urlencoded',\n         },\n       });\n \n-      console.log('Login response:', response.data);\n-\n       if (response.data.success) {\n+        const authData: AuthResponse = response.data;\n+        \n         // Create user object from response or use email\n         const user: User = {\n-          id: response.data.user?.id?.toString() || 'temp-id',\n-          name: response.data.user?.name || response.data.user?.first_name || username,\n-          email: response.data.user?.email || email\n+          id: authData.user?.id?.toString() || 'temp-id',\n+          name: `${authData.user?.first_name || ''} ${authData.user?.last_name || ''}`.trim() || username,\n+          email: authData.user?.email || email\n         };\n         \n         // Store tokens and user info in localStorage\n-        if (response.data.access_token) {\n-          this.setAccessToken(response.data.access_token);\n+        if (authData.access_token) {\n+          this.setAccessToken(authData.access_token);\n         }\n-        if (response.data.refresh_token) {\n-          this.setRefreshToken(response.data.refresh_token);\n+        if (authData.refresh_token) {\n+          this.setRefreshToken(authData.refresh_token);\n         }\n         this.setUser(user);\n         \n         return { success: true, user };\n@@ -168,9 +166,8 @@\n     } finally {\n       // Clear local storage regardless of API call success\n       this.clearTokens();\n       this.clearUser();\n-      clearCSRFTokenCache();\n     }\n   }\n \n   // Check if user is authenticated\n@@ -253,13 +250,37 @@\n       if (!accessToken) {\n         return { success: false, connected: false, error: 'No access token found' };\n       }\n \n-      // You would implement an API call here to check the connection status\n-      // For now, we'll return a mock response\n-      return { success: true, connected: false };\n-    } catch (error) {\n+      const response = await api.get(API_ENDPOINTS.GOOGLE_OAUTH_STATUS, {\n+        headers: {\n+          'Authorization': `Bearer ${accessToken}`,\n+          'Content-Type': 'application/json',\n+        }\n+      });\n+\n+      if (response.data.success) {\n+        return { \n+          success: true, \n+          connected: response.data.connected || false,\n+          error: response.data.message\n+        };\n+      } else {\n+        return { \n+          success: false, \n+          connected: false, \n+          error: response.data.message || 'Failed to check connection status' \n+        };\n+      }\n+    } catch (error: any) {\n       console.error('Check Google OAuth status error:', error);\n+      if (error.response?.data) {\n+        return { \n+          success: false, \n+          connected: false, \n+          error: error.response.data.message || 'Failed to check connection status' \n+        };\n+      }\n       return { success: false, connected: false, error: 'Failed to check connection status' };\n     }\n   }\n \n"
                },
                {
                    "date": 1755665884739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,17 +217,11 @@\n         if (authWindow) {\n           // Store the state for verification later\n           localStorage.setItem('googleOAuthState', response.data.state);\n           \n-          // Listen for the OAuth callback (you might need to implement this based on your redirect flow)\n-          const checkClosed = setInterval(() => {\n-            if (authWindow.closed) {\n-              clearInterval(checkClosed);\n-              // You can implement additional logic here when the OAuth window closes\n-              console.log('Google OAuth window closed');\n-            }\n-          }, 1000);\n-\n+          // Focus the popup window\n+          authWindow.focus();\n+          \n           return { success: true };\n         } else {\n           return { success: false, error: 'Failed to open OAuth window. Please check your popup blocker.' };\n         }\n"
                },
                {
                    "date": 1755670382200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,8 +277,46 @@\n       return { success: false, connected: false, error: 'Failed to check connection status' };\n     }\n   }\n \n+  // Get Google Ads account summary\n+  async getGoogleAdsAccountSummary(): Promise<{ success: boolean; data?: any; error?: string }> {\n+    try {\n+      const accessToken = this.getAccessToken();\n+      if (!accessToken) {\n+        return { success: false, error: 'No access token found' };\n+      }\n+\n+      const response = await api.get(API_ENDPOINTS.GOOGLE_ADS_ACCOUNT_SUMMARY, {\n+        headers: {\n+          'Authorization': `Bearer ${accessToken}`,\n+          'Content-Type': 'application/json',\n+        }\n+      });\n+\n+      if (response.data.success) {\n+        return { \n+          success: true, \n+          data: response.data.data || response.data\n+        };\n+      } else {\n+        return { \n+          success: false, \n+          error: response.data.message || 'Failed to get account summary' \n+        };\n+      }\n+    } catch (error: any) {\n+      console.error('Get Google Ads account summary error:', error);\n+      if (error.response?.data) {\n+        return { \n+          success: false, \n+          error: error.response.data.message || 'Failed to get account summary' \n+        };\n+      }\n+      return { success: false, error: 'Failed to get account summary' };\n+    }\n+  }\n+\n   // Private methods\n   private setAccessToken(token: string): void {\n     localStorage.setItem(this.ACCESS_TOKEN_KEY, token);\n   }\n"
                },
                {
                    "date": 1755670728626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n+import { API_BASE_URL, API_ENDPOINTS } from '../constants';\n import api from './api';\n-import { API_ENDPOINTS } from '../constants';\n import { User } from '../types';\n \n interface SignupRequest {\n   username: string;\n@@ -315,8 +315,87 @@\n       return { success: false, error: 'Failed to get account summary' };\n     }\n   }\n \n+  // Refresh access token using refresh token\n+  async refreshAccessToken(): Promise<{ success: boolean; accessToken?: string; error?: string }> {\n+    try {\n+      const refreshToken = this.getRefreshToken();\n+      if (!refreshToken) {\n+        return { success: false, error: 'No refresh token found' };\n+      }\n+\n+      console.log('Refreshing access token...');\n+      \n+      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.TOKEN_REFRESH}`, {\n+        method: 'POST',\n+        headers: {\n+          'Content-Type': 'application/json',\n+        },\n+        body: JSON.stringify({\n+          refresh: refreshToken\n+        })\n+      });\n+\n+      if (!response.ok) {\n+        const errorText = await response.text();\n+        console.error('Token refresh failed:', response.status, errorText);\n+        return { success: false, error: `Token refresh failed: ${errorText}` };\n+      }\n+\n+      const data = await response.json();\n+      \n+      if (data.access) {\n+        // Store the new access token\n+        this.setAccessToken(data.access);\n+        console.log('Access token refreshed successfully');\n+        return { success: true, accessToken: data.access };\n+      } else {\n+        return { success: false, error: 'No access token in refresh response' };\n+      }\n+    } catch (error: any) {\n+      console.error('Token refresh error:', error);\n+      return { success: false, error: 'Failed to refresh access token' };\n+    }\n+  }\n+\n+  // Check if token refresh is needed and handle it proactively\n+  async ensureValidToken(): Promise<{ success: boolean; accessToken?: string; error?: string }> {\n+    const accessToken = this.getAccessToken();\n+    if (!accessToken) {\n+      return { success: false, error: 'No access token found' };\n+    }\n+\n+    // For now, we'll let the API interceptor handle token refresh\n+    // This method can be used for proactive token refresh if needed\n+    return { success: true, accessToken };\n+  }\n+\n+  // Global error handler for authentication issues\n+  async handleAuthError(error: any): Promise<{ shouldRetry: boolean; error?: string }> {\n+    if (error?.response?.status === 401) {\n+      console.log('Handling 401 authentication error...');\n+      \n+      try {\n+        const refreshResult = await this.refreshAccessToken();\n+        if (refreshResult.success) {\n+          console.log('Token refreshed successfully, request can be retried');\n+          return { shouldRetry: true };\n+        } else {\n+          console.log('Token refresh failed, user needs to login again');\n+          this.logout();\n+          return { shouldRetry: false, error: 'Authentication expired. Please login again.' };\n+        }\n+      } catch (refreshError) {\n+        console.error('Error during token refresh:', refreshError);\n+        this.logout();\n+        return { shouldRetry: false, error: 'Authentication failed. Please login again.' };\n+      }\n+    }\n+    \n+    return { shouldRetry: false, error: error?.message || 'An error occurred' };\n+  }\n+\n   // Private methods\n   private setAccessToken(token: string): void {\n     localStorage.setItem(this.ACCESS_TOKEN_KEY, token);\n   }\n"
                },
                {
                    "date": 1755671351054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,8 +315,59 @@\n       return { success: false, error: 'Failed to get account summary' };\n     }\n   }\n \n+  // Sync Google Ads data\n+  async syncGoogleAdsData(syncType: string = 'weekly', weeksBack: number = 1): Promise<{ success: boolean; data?: any; error?: string }> {\n+    try {\n+      const accessToken = this.getAccessToken();\n+      if (!accessToken) {\n+        return { success: false, error: 'No access token found' };\n+      }\n+\n+      console.log(`Starting Google Ads data sync: ${syncType}, ${weeksBack} weeks back`);\n+\n+      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.GOOGLE_ADS_SYNC_DATA}`, {\n+        method: 'POST',\n+        headers: {\n+          'Authorization': `Bearer ${accessToken}`,\n+          'Content-Type': 'application/json',\n+        },\n+        body: JSON.stringify({\n+          sync_type: syncType,\n+          weeks_back: weeksBack\n+        })\n+      });\n+\n+      if (!response.ok) {\n+        const errorText = await response.text();\n+        console.error('Google Ads sync failed:', response.status, errorText);\n+        return { \n+          success: false, \n+          error: `Sync failed (${response.status}): ${errorText || 'Unknown error'}` \n+        };\n+      }\n+\n+      const data = await response.json();\n+      \n+      if (data.success) {\n+        console.log('Google Ads data sync completed successfully');\n+        return { \n+          success: true, \n+          data: data.data || data\n+        };\n+      } else {\n+        return { \n+          success: false, \n+          error: data.message || 'Failed to sync Google Ads data' \n+        };\n+      }\n+    } catch (error: any) {\n+      console.error('Google Ads sync error:', error);\n+      return { success: false, error: 'Failed to sync Google Ads data' };\n+    }\n+  }\n+\n   // Refresh access token using refresh token\n   async refreshAccessToken(): Promise<{ success: boolean; accessToken?: string; error?: string }> {\n     try {\n       const refreshToken = this.getRefreshToken();\n"
                },
                {
                    "date": 1755673594202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,527 @@\n+import { API_BASE_URL, API_ENDPOINTS } from '../constants';\n+import api from './api';\n+import { User } from '../types';\n+\n+interface SignupRequest {\n+  username: string;\n+  first_name: string;\n+  last_name: string;\n+  email: string;\n+  password1: string;\n+  password2: string;\n+  company_name: string;\n+}\n+\n+interface LoginRequest {\n+  username: string;\n+  password: string;\n+}\n+\n+interface AuthResponse {\n+  success: boolean;\n+  message: string;\n+  access_token?: string;\n+  refresh_token?: string;\n+  user?: {\n+    id: number;\n+    username: string;\n+    email: string;\n+    first_name: string;\n+    last_name: string;\n+    company_name: string;\n+  };\n+  errors?: Record<string, string[]>;\n+}\n+\n+class AuthService {\n+  private readonly ACCESS_TOKEN_KEY = 'accessToken';\n+  private readonly REFRESH_TOKEN_KEY = 'refreshToken';\n+  private readonly USER_KEY = 'user';\n+\n+  // Signup user\n+  async signup(userData: {\n+    firstName: string;\n+    lastName: string;\n+    email: string;\n+    password: string;\n+    company: string;\n+  }): Promise<{ success: boolean; user?: User; error?: string }> {\n+    try {\n+      // Convert to form data format as expected by the backend\n+      const formData = new URLSearchParams();\n+      const username = userData.email.split('@')[0]; // Generate username from email\n+      \n+      formData.append('username', username);\n+      formData.append('first_name', userData.firstName);\n+      formData.append('last_name', userData.lastName);\n+      formData.append('email', userData.email);\n+      formData.append('password1', userData.password);\n+      formData.append('password2', userData.password);\n+      formData.append('company_name', userData.company);\n+\n+      const response = await api.post(API_ENDPOINTS.SIGNUP, formData, {\n+        headers: {\n+          'Content-Type': 'application/x-www-form-urlencoded',\n+        },\n+      });\n+\n+      if (response.data.success) {\n+        const authData: AuthResponse = response.data;\n+        \n+        // Create user object from API response\n+        const user: User = {\n+          id: authData.user?.id?.toString() || 'temp-id',\n+          name: `${authData.user?.first_name || userData.firstName} ${authData.user?.last_name || userData.lastName}`,\n+          email: authData.user?.email || userData.email\n+        };\n+        \n+        // Store tokens and user info in localStorage\n+        if (authData.access_token) {\n+          this.setAccessToken(authData.access_token);\n+        }\n+        if (authData.refresh_token) {\n+          this.setRefreshToken(authData.refresh_token);\n+        }\n+        this.setUser(user);\n+        \n+        return { success: true, user };\n+      } else {\n+        // Handle validation errors\n+        if (response.data.errors) {\n+          const errorMessages = Object.values(response.data.errors).flat();\n+          return { success: false, error: errorMessages.join(', ') };\n+        }\n+        return { success: false, error: response.data.message || 'Signup failed' };\n+      }\n+    } catch (error: any) {\n+      console.error('Signup error:', error);\n+      if (error.response?.data) {\n+        if (error.response.data.errors) {\n+          const errorMessages = Object.values(error.response.data.errors).flat();\n+          return { success: false, error: errorMessages.join(', ') };\n+        }\n+        return { success: false, error: error.response.data.message || 'Signup failed' };\n+      }\n+      return { success: false, error: 'Signup failed. Please try again.' };\n+    }\n+  }\n+\n+  // Login user\n+  async login(email: string, password: string): Promise<{ success: boolean; user?: User; error?: string }> {\n+    try {\n+      const formData = new URLSearchParams();\n+      const username = email.split('@')[0]; // Use email prefix as username\n+      \n+      formData.append('username', username);\n+      formData.append('password', password);\n+\n+      const response = await api.post(API_ENDPOINTS.SIGNIN, formData, {\n+        headers: {\n+          'Content-Type': 'application/x-www-form-urlencoded',\n+        },\n+      });\n+\n+      if (response.data.success) {\n+        const authData: AuthResponse = response.data;\n+        \n+        // Create user object from response or use email\n+        const user: User = {\n+          id: authData.user?.id?.toString() || 'temp-id',\n+          name: `${authData.user?.first_name || ''} ${authData.user?.last_name || ''}`.trim() || username,\n+          email: authData.user?.email || email\n+        };\n+        \n+        // Store tokens and user info in localStorage\n+        if (authData.access_token) {\n+          this.setAccessToken(authData.access_token);\n+        }\n+        if (authData.refresh_token) {\n+          this.setRefreshToken(authData.refresh_token);\n+        }\n+        this.setUser(user);\n+        \n+        return { success: true, user };\n+      } else {\n+        return { success: false, error: response.data.message || 'Login failed' };\n+      }\n+    } catch (error: any) {\n+      console.error('Login error:', error);\n+      if (error.response?.data) {\n+        if (error.response.data.errors) {\n+          const errorMessages = Object.values(error.response.data.errors).flat();\n+          return { success: false, error: errorMessages.join(', ') };\n+        }\n+        return { success: false, error: error.response.data.message || 'Login failed' };\n+      }\n+      return { success: false, error: 'Login failed. Please try again.' };\n+    }\n+  }\n+\n+  // Logout user\n+  async logout(): Promise<{ success: boolean; error?: string }> {\n+    try {\n+      const accessToken = this.getAccessToken();\n+      if (accessToken) {\n+        const response = await api.post(API_ENDPOINTS.SIGNOUT, {}, {\n+          headers: {\n+            'Authorization': `Bearer ${accessToken}`\n+          }\n+        });\n+        \n+        if (!response.data.success) {\n+          console.warn('Logout API call failed, but clearing local data anyway');\n+        }\n+      }\n+      \n+      // Clear all local data\n+      this.clearTokens();\n+      this.clearUser();\n+      this.clearGoogleOAuthStatus(); // Clear Google OAuth connection status\n+      \n+      return { success: true };\n+    } catch (error: any) {\n+      console.error('Logout error:', error);\n+      \n+      // Even if API call fails, clear local data\n+      this.clearTokens();\n+      this.clearUser();\n+      this.clearGoogleOAuthStatus(); // Clear Google OAuth connection status\n+      \n+      return { success: true };\n+    }\n+  }\n+\n+  // Check if user is authenticated\n+  isAuthenticated(): boolean {\n+    const accessToken = this.getAccessToken();\n+    const user = this.getUser();\n+    return !!(accessToken && user);\n+  }\n+\n+  // Get current user\n+  getCurrentUser(): User | null {\n+    return this.getUser();\n+  }\n+\n+  // Get access token\n+  getAccessToken(): string | null {\n+    return localStorage.getItem(this.ACCESS_TOKEN_KEY);\n+  }\n+\n+  // Get refresh token\n+  getRefreshToken(): string | null {\n+    return localStorage.getItem(this.REFRESH_TOKEN_KEY);\n+  }\n+\n+  // Initiate Google OAuth flow\n+  async initiateGoogleOAuth(): Promise<{ success: boolean; error?: string }> {\n+    try {\n+      const accessToken = this.getAccessToken();\n+      if (!accessToken) {\n+        return { success: false, error: 'No access token found. Please login again.' };\n+      }\n+\n+      const response = await api.get(API_ENDPOINTS.GOOGLE_OAUTH_INITIATE, {\n+        headers: {\n+          'Authorization': `Bearer ${accessToken}`\n+        }\n+      });\n+\n+      if (response.data.success && response.data.authorization_url) {\n+        // Open Google OAuth consent screen in a new window\n+        const authWindow = window.open(\n+          response.data.authorization_url,\n+          'google-oauth',\n+          'width=500,height=600,scrollbars=yes,resizable=yes'\n+        );\n+\n+        if (authWindow) {\n+          // Store the state for verification later\n+          localStorage.setItem('googleOAuthState', response.data.state);\n+          \n+          // Focus the popup window\n+          authWindow.focus();\n+          \n+          return { success: true };\n+        } else {\n+          return { success: false, error: 'Failed to open OAuth window. Please check your popup blocker.' };\n+        }\n+      } else {\n+        return { success: false, error: 'Failed to get authorization URL from server.' };\n+      }\n+    } catch (error: any) {\n+      console.error('Google OAuth initiation error:', error);\n+      if (error.response?.data) {\n+        return { success: false, error: error.response.data.message || 'Failed to initiate Google OAuth' };\n+      }\n+      return { success: false, error: 'Failed to initiate Google OAuth. Please try again.' };\n+    }\n+  }\n+\n+  // Check Google OAuth connection status\n+  async checkGoogleOAuthStatus(): Promise<{ success: boolean; connected: boolean; error?: string }> {\n+    try {\n+      const accessToken = this.getAccessToken();\n+      if (!accessToken) {\n+        return { success: false, connected: false, error: 'No access token found' };\n+      }\n+\n+      const response = await api.get(API_ENDPOINTS.GOOGLE_OAUTH_STATUS, {\n+        headers: {\n+          'Authorization': `Bearer ${accessToken}`,\n+          'Content-Type': 'application/json',\n+        }\n+      });\n+\n+      if (response.data.success) {\n+        return { \n+          success: true, \n+          connected: response.data.connected || false,\n+          error: response.data.message\n+        };\n+      } else {\n+        return { \n+          success: false, \n+          connected: false, \n+          error: response.data.message || 'Failed to check connection status' \n+        };\n+      }\n+    } catch (error: any) {\n+      console.error('Check Google OAuth status error:', error);\n+      if (error.response?.data) {\n+        return { \n+          success: false, \n+          connected: false, \n+          error: error.response.data.message || 'Failed to check connection status' \n+        };\n+      }\n+      return { success: false, connected: false, error: 'Failed to check connection status' };\n+    }\n+  }\n+\n+  // Get Google Ads account summary\n+  async getGoogleAdsAccountSummary(): Promise<{ success: boolean; data?: any; error?: string }> {\n+    try {\n+      const accessToken = this.getAccessToken();\n+      if (!accessToken) {\n+        return { success: false, error: 'No access token found' };\n+      }\n+\n+      const response = await api.get(API_ENDPOINTS.GOOGLE_ADS_ACCOUNT_SUMMARY, {\n+        headers: {\n+          'Authorization': `Bearer ${accessToken}`,\n+          'Content-Type': 'application/json',\n+        }\n+      });\n+\n+      if (response.data.success) {\n+        return { \n+          success: true, \n+          data: response.data.data || response.data\n+        };\n+      } else {\n+        return { \n+          success: false, \n+          error: response.data.message || 'Failed to get account summary' \n+        };\n+      }\n+    } catch (error: any) {\n+      console.error('Get Google Ads account summary error:', error);\n+      if (error.response?.data) {\n+        return { \n+          success: false, \n+          error: error.response.data.message || 'Failed to get account summary' \n+        };\n+      }\n+      return { success: false, error: 'Failed to get account summary' };\n+    }\n+  }\n+\n+  // Sync Google Ads data\n+  async syncGoogleAdsData(syncType: string = 'weekly', weeksBack: number = 1): Promise<{ success: boolean; data?: any; error?: string }> {\n+    try {\n+      const accessToken = this.getAccessToken();\n+      if (!accessToken) {\n+        return { success: false, error: 'No access token found' };\n+      }\n+\n+      console.log(`Starting Google Ads data sync: ${syncType}, ${weeksBack} weeks back`);\n+\n+      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.GOOGLE_ADS_SYNC_DATA}`, {\n+        method: 'POST',\n+        headers: {\n+          'Authorization': `Bearer ${accessToken}`,\n+          'Content-Type': 'application/json',\n+        },\n+        body: JSON.stringify({\n+          sync_type: syncType,\n+          weeks_back: weeksBack\n+        })\n+      });\n+\n+      if (!response.ok) {\n+        const errorText = await response.text();\n+        console.error('Google Ads sync failed:', response.status, errorText);\n+        return { \n+          success: false, \n+          error: `Sync failed (${response.status}): ${errorText || 'Unknown error'}` \n+        };\n+      }\n+\n+      const data = await response.json();\n+      \n+      if (data.success) {\n+        console.log('Google Ads data sync completed successfully');\n+        return { \n+          success: true, \n+          data: data.data || data\n+        };\n+      } else {\n+        return { \n+          success: false, \n+          error: data.message || 'Failed to sync Google Ads data' \n+        };\n+      }\n+    } catch (error: any) {\n+      console.error('Google Ads sync error:', error);\n+      return { success: false, error: 'Failed to sync Google Ads data' };\n+    }\n+  }\n+\n+  // Refresh access token using refresh token\n+  async refreshAccessToken(): Promise<{ success: boolean; accessToken?: string; error?: string }> {\n+    try {\n+      const refreshToken = this.getRefreshToken();\n+      if (!refreshToken) {\n+        return { success: false, error: 'No refresh token found' };\n+      }\n+\n+      console.log('Refreshing access token...');\n+      \n+      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.TOKEN_REFRESH}`, {\n+        method: 'POST',\n+        headers: {\n+          'Content-Type': 'application/json',\n+        },\n+        body: JSON.stringify({\n+          refresh: refreshToken\n+        })\n+      });\n+\n+      if (!response.ok) {\n+        const errorText = await response.text();\n+        console.error('Token refresh failed:', response.status, errorText);\n+        return { success: false, error: `Token refresh failed: ${errorText}` };\n+      }\n+\n+      const data = await response.json();\n+      \n+      if (data.access) {\n+        // Store the new access token\n+        this.setAccessToken(data.access);\n+        console.log('Access token refreshed successfully');\n+        return { success: true, accessToken: data.access };\n+      } else {\n+        return { success: false, error: 'No access token in refresh response' };\n+      }\n+    } catch (error: any) {\n+      console.error('Token refresh error:', error);\n+      return { success: false, error: 'Failed to refresh access token' };\n+    }\n+  }\n+\n+  // Check if token refresh is needed and handle it proactively\n+  async ensureValidToken(): Promise<{ success: boolean; accessToken?: string; error?: string }> {\n+    const accessToken = this.getAccessToken();\n+    if (!accessToken) {\n+      return { success: false, error: 'No access token found' };\n+    }\n+\n+    // For now, we'll let the API interceptor handle token refresh\n+    // This method can be used for proactive token refresh if needed\n+    return { success: true, accessToken };\n+  }\n+\n+  // Global error handler for authentication issues\n+  async handleAuthError(error: any): Promise<{ shouldRetry: boolean; error?: string }> {\n+    if (error?.response?.status === 401) {\n+      console.log('Handling 401 authentication error...');\n+      \n+      try {\n+        const refreshResult = await this.refreshAccessToken();\n+        if (refreshResult.success) {\n+          console.log('Token refreshed successfully, request can be retried');\n+          return { shouldRetry: true };\n+        } else {\n+          console.log('Token refresh failed, user needs to login again');\n+          this.logout();\n+          return { shouldRetry: false, error: 'Authentication expired. Please login again.' };\n+        }\n+      } catch (refreshError) {\n+        console.error('Error during token refresh:', refreshError);\n+        this.logout();\n+        return { shouldRetry: false, error: 'Authentication failed. Please login again.' };\n+      }\n+    }\n+    \n+    return { shouldRetry: false, error: error?.message || 'An error occurred' };\n+  }\n+\n+  // Store Google OAuth connection status\n+  setGoogleOAuthConnected(connected: boolean): void {\n+    localStorage.setItem('googleOAuthConnected', connected.toString());\n+  }\n+\n+  // Check if Google OAuth is already connected\n+  isGoogleOAuthConnected(): boolean {\n+    const connected = localStorage.getItem('googleOAuthConnected');\n+    return connected === 'true';\n+  }\n+\n+  // Clear Google OAuth connection status\n+  clearGoogleOAuthStatus(): void {\n+    localStorage.removeItem('googleOAuthConnected');\n+  }\n+\n+  // Disconnect Google Ads (clear connection status)\n+  disconnectGoogleAds(): void {\n+    this.clearGoogleOAuthStatus();\n+    console.log('Google Ads disconnected');\n+  }\n+\n+  // Private methods\n+  private setAccessToken(token: string): void {\n+    localStorage.setItem(this.ACCESS_TOKEN_KEY, token);\n+  }\n+\n+  private setRefreshToken(token: string): void {\n+    localStorage.setItem(this.REFRESH_TOKEN_KEY, token);\n+  }\n+\n+  private setUser(user: User): void {\n+    localStorage.setItem(this.USER_KEY, JSON.stringify(user));\n+  }\n+\n+  private clearTokens(): void {\n+    localStorage.removeItem(this.ACCESS_TOKEN_KEY);\n+    localStorage.removeItem(this.REFRESH_TOKEN_KEY);\n+  }\n+\n+  private clearUser(): void {\n+    localStorage.removeItem(this.USER_KEY);\n+  }\n+\n+  private getUser(): User | null {\n+    const userStr = localStorage.getItem(this.USER_KEY);\n+    if (userStr) {\n+      try {\n+        return JSON.parse(userStr);\n+      } catch {\n+        return null;\n+      }\n+    }\n+    return null;\n+  }\n+}\n+\n+export default new AuthService();\n"
                },
                {
                    "date": 1755675971145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -353,9 +353,9 @@\n           'Authorization': `Bearer ${accessToken}`,\n           'Content-Type': 'application/json',\n         },\n         body: JSON.stringify({\n-          sync_type: syncType,\n+          sync_type: \"google_ads_api\",\n           weeks_back: weeksBack\n         })\n       });\n \n@@ -524,488 +524,4 @@\n   }\n }\n \n export default new AuthService();\n-import { API_BASE_URL, API_ENDPOINTS } from '../constants';\n-import api from './api';\n-import { User } from '../types';\n-\n-interface SignupRequest {\n-  username: string;\n-  first_name: string;\n-  last_name: string;\n-  email: string;\n-  password1: string;\n-  password2: string;\n-  company_name: string;\n-}\n-\n-interface LoginRequest {\n-  username: string;\n-  password: string;\n-}\n-\n-interface AuthResponse {\n-  success: boolean;\n-  message: string;\n-  access_token?: string;\n-  refresh_token?: string;\n-  user?: {\n-    id: number;\n-    username: string;\n-    email: string;\n-    first_name: string;\n-    last_name: string;\n-    company_name: string;\n-  };\n-  errors?: Record<string, string[]>;\n-}\n-\n-class AuthService {\n-  private readonly ACCESS_TOKEN_KEY = 'accessToken';\n-  private readonly REFRESH_TOKEN_KEY = 'refreshToken';\n-  private readonly USER_KEY = 'user';\n-\n-  // Signup user\n-  async signup(userData: {\n-    firstName: string;\n-    lastName: string;\n-    email: string;\n-    password: string;\n-    company: string;\n-  }): Promise<{ success: boolean; user?: User; error?: string }> {\n-    try {\n-      // Convert to form data format as expected by the backend\n-      const formData = new URLSearchParams();\n-      const username = userData.email.split('@')[0]; // Generate username from email\n-      \n-      formData.append('username', username);\n-      formData.append('first_name', userData.firstName);\n-      formData.append('last_name', userData.lastName);\n-      formData.append('email', userData.email);\n-      formData.append('password1', userData.password);\n-      formData.append('password2', userData.password);\n-      formData.append('company_name', userData.company);\n-\n-      const response = await api.post(API_ENDPOINTS.SIGNUP, formData, {\n-        headers: {\n-          'Content-Type': 'application/x-www-form-urlencoded',\n-        },\n-      });\n-\n-      if (response.data.success) {\n-        const authData: AuthResponse = response.data;\n-        \n-        // Create user object from API response\n-        const user: User = {\n-          id: authData.user?.id?.toString() || 'temp-id',\n-          name: `${authData.user?.first_name || userData.firstName} ${authData.user?.last_name || userData.lastName}`,\n-          email: authData.user?.email || userData.email\n-        };\n-        \n-        // Store tokens and user info in localStorage\n-        if (authData.access_token) {\n-          this.setAccessToken(authData.access_token);\n-        }\n-        if (authData.refresh_token) {\n-          this.setRefreshToken(authData.refresh_token);\n-        }\n-        this.setUser(user);\n-        \n-        return { success: true, user };\n-      } else {\n-        // Handle validation errors\n-        if (response.data.errors) {\n-          const errorMessages = Object.values(response.data.errors).flat();\n-          return { success: false, error: errorMessages.join(', ') };\n-        }\n-        return { success: false, error: response.data.message || 'Signup failed' };\n-      }\n-    } catch (error: any) {\n-      console.error('Signup error:', error);\n-      if (error.response?.data) {\n-        if (error.response.data.errors) {\n-          const errorMessages = Object.values(error.response.data.errors).flat();\n-          return { success: false, error: errorMessages.join(', ') };\n-        }\n-        return { success: false, error: error.response.data.message || 'Signup failed' };\n-      }\n-      return { success: false, error: 'Signup failed. Please try again.' };\n-    }\n-  }\n-\n-  // Login user\n-  async login(email: string, password: string): Promise<{ success: boolean; user?: User; error?: string }> {\n-    try {\n-      const formData = new URLSearchParams();\n-      const username = email.split('@')[0]; // Use email prefix as username\n-      \n-      formData.append('username', username);\n-      formData.append('password', password);\n-\n-      const response = await api.post(API_ENDPOINTS.SIGNIN, formData, {\n-        headers: {\n-          'Content-Type': 'application/x-www-form-urlencoded',\n-        },\n-      });\n-\n-      if (response.data.success) {\n-        const authData: AuthResponse = response.data;\n-        \n-        // Create user object from response or use email\n-        const user: User = {\n-          id: authData.user?.id?.toString() || 'temp-id',\n-          name: `${authData.user?.first_name || ''} ${authData.user?.last_name || ''}`.trim() || username,\n-          email: authData.user?.email || email\n-        };\n-        \n-        // Store tokens and user info in localStorage\n-        if (authData.access_token) {\n-          this.setAccessToken(authData.access_token);\n-        }\n-        if (authData.refresh_token) {\n-          this.setRefreshToken(authData.refresh_token);\n-        }\n-        this.setUser(user);\n-        \n-        return { success: true, user };\n-      } else {\n-        return { success: false, error: response.data.message || 'Login failed' };\n-      }\n-    } catch (error: any) {\n-      console.error('Login error:', error);\n-      if (error.response?.data) {\n-        if (error.response.data.errors) {\n-          const errorMessages = Object.values(error.response.data.errors).flat();\n-          return { success: false, error: errorMessages.join(', ') };\n-        }\n-        return { success: false, error: error.response.data.message || 'Login failed' };\n-      }\n-      return { success: false, error: 'Login failed. Please try again.' };\n-    }\n-  }\n-\n-  // Logout user\n-  async logout(): Promise<void> {\n-    try {\n-      await api.get(API_ENDPOINTS.SIGNOUT);\n-    } catch (error) {\n-      console.error('Logout error:', error);\n-    } finally {\n-      // Clear local storage regardless of API call success\n-      this.clearTokens();\n-      this.clearUser();\n-    }\n-  }\n-\n-  // Check if user is authenticated\n-  isAuthenticated(): boolean {\n-    const accessToken = this.getAccessToken();\n-    const user = this.getUser();\n-    return !!(accessToken && user);\n-  }\n-\n-  // Get current user\n-  getCurrentUser(): User | null {\n-    return this.getUser();\n-  }\n-\n-  // Get access token\n-  getAccessToken(): string | null {\n-    return localStorage.getItem(this.ACCESS_TOKEN_KEY);\n-  }\n-\n-  // Get refresh token\n-  getRefreshToken(): string | null {\n-    return localStorage.getItem(this.REFRESH_TOKEN_KEY);\n-  }\n-\n-  // Initiate Google OAuth flow\n-  async initiateGoogleOAuth(): Promise<{ success: boolean; error?: string }> {\n-    try {\n-      const accessToken = this.getAccessToken();\n-      if (!accessToken) {\n-        return { success: false, error: 'No access token found. Please login again.' };\n-      }\n-\n-      const response = await api.get(API_ENDPOINTS.GOOGLE_OAUTH_INITIATE, {\n-        headers: {\n-          'Authorization': `Bearer ${accessToken}`\n-        }\n-      });\n-\n-      if (response.data.success && response.data.authorization_url) {\n-        // Open Google OAuth consent screen in a new window\n-        const authWindow = window.open(\n-          response.data.authorization_url,\n-          'google-oauth',\n-          'width=500,height=600,scrollbars=yes,resizable=yes'\n-        );\n-\n-        if (authWindow) {\n-          // Store the state for verification later\n-          localStorage.setItem('googleOAuthState', response.data.state);\n-          \n-          // Focus the popup window\n-          authWindow.focus();\n-          \n-          return { success: true };\n-        } else {\n-          return { success: false, error: 'Failed to open OAuth window. Please check your popup blocker.' };\n-        }\n-      } else {\n-        return { success: false, error: 'Failed to get authorization URL from server.' };\n-      }\n-    } catch (error: any) {\n-      console.error('Google OAuth initiation error:', error);\n-      if (error.response?.data) {\n-        return { success: false, error: error.response.data.message || 'Failed to initiate Google OAuth' };\n-      }\n-      return { success: false, error: 'Failed to initiate Google OAuth. Please try again.' };\n-    }\n-  }\n-\n-  // Check Google OAuth connection status\n-  async checkGoogleOAuthStatus(): Promise<{ success: boolean; connected: boolean; error?: string }> {\n-    try {\n-      const accessToken = this.getAccessToken();\n-      if (!accessToken) {\n-        return { success: false, connected: false, error: 'No access token found' };\n-      }\n-\n-      const response = await api.get(API_ENDPOINTS.GOOGLE_OAUTH_STATUS, {\n-        headers: {\n-          'Authorization': `Bearer ${accessToken}`,\n-          'Content-Type': 'application/json',\n-        }\n-      });\n-\n-      if (response.data.success) {\n-        return { \n-          success: true, \n-          connected: response.data.connected || false,\n-          error: response.data.message\n-        };\n-      } else {\n-        return { \n-          success: false, \n-          connected: false, \n-          error: response.data.message || 'Failed to check connection status' \n-        };\n-      }\n-    } catch (error: any) {\n-      console.error('Check Google OAuth status error:', error);\n-      if (error.response?.data) {\n-        return { \n-          success: false, \n-          connected: false, \n-          error: error.response.data.message || 'Failed to check connection status' \n-        };\n-      }\n-      return { success: false, connected: false, error: 'Failed to check connection status' };\n-    }\n-  }\n-\n-  // Get Google Ads account summary\n-  async getGoogleAdsAccountSummary(): Promise<{ success: boolean; data?: any; error?: string }> {\n-    try {\n-      const accessToken = this.getAccessToken();\n-      if (!accessToken) {\n-        return { success: false, error: 'No access token found' };\n-      }\n-\n-      const response = await api.get(API_ENDPOINTS.GOOGLE_ADS_ACCOUNT_SUMMARY, {\n-        headers: {\n-          'Authorization': `Bearer ${accessToken}`,\n-          'Content-Type': 'application/json',\n-        }\n-      });\n-\n-      if (response.data.success) {\n-        return { \n-          success: true, \n-          data: response.data.data || response.data\n-        };\n-      } else {\n-        return { \n-          success: false, \n-          error: response.data.message || 'Failed to get account summary' \n-        };\n-      }\n-    } catch (error: any) {\n-      console.error('Get Google Ads account summary error:', error);\n-      if (error.response?.data) {\n-        return { \n-          success: false, \n-          error: error.response.data.message || 'Failed to get account summary' \n-        };\n-      }\n-      return { success: false, error: 'Failed to get account summary' };\n-    }\n-  }\n-\n-  // Sync Google Ads data\n-  async syncGoogleAdsData(syncType: string = 'weekly', weeksBack: number = 1): Promise<{ success: boolean; data?: any; error?: string }> {\n-    try {\n-      const accessToken = this.getAccessToken();\n-      if (!accessToken) {\n-        return { success: false, error: 'No access token found' };\n-      }\n-\n-      console.log(`Starting Google Ads data sync: ${syncType}, ${weeksBack} weeks back`);\n-\n-      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.GOOGLE_ADS_SYNC_DATA}`, {\n-        method: 'POST',\n-        headers: {\n-          'Authorization': `Bearer ${accessToken}`,\n-          'Content-Type': 'application/json',\n-        },\n-        body: JSON.stringify({\n-          sync_type: syncType,\n-          weeks_back: weeksBack\n-        })\n-      });\n-\n-      if (!response.ok) {\n-        const errorText = await response.text();\n-        console.error('Google Ads sync failed:', response.status, errorText);\n-        return { \n-          success: false, \n-          error: `Sync failed (${response.status}): ${errorText || 'Unknown error'}` \n-        };\n-      }\n-\n-      const data = await response.json();\n-      \n-      if (data.success) {\n-        console.log('Google Ads data sync completed successfully');\n-        return { \n-          success: true, \n-          data: data.data || data\n-        };\n-      } else {\n-        return { \n-          success: false, \n-          error: data.message || 'Failed to sync Google Ads data' \n-        };\n-      }\n-    } catch (error: any) {\n-      console.error('Google Ads sync error:', error);\n-      return { success: false, error: 'Failed to sync Google Ads data' };\n-    }\n-  }\n-\n-  // Refresh access token using refresh token\n-  async refreshAccessToken(): Promise<{ success: boolean; accessToken?: string; error?: string }> {\n-    try {\n-      const refreshToken = this.getRefreshToken();\n-      if (!refreshToken) {\n-        return { success: false, error: 'No refresh token found' };\n-      }\n-\n-      console.log('Refreshing access token...');\n-      \n-      const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.TOKEN_REFRESH}`, {\n-        method: 'POST',\n-        headers: {\n-          'Content-Type': 'application/json',\n-        },\n-        body: JSON.stringify({\n-          refresh: refreshToken\n-        })\n-      });\n-\n-      if (!response.ok) {\n-        const errorText = await response.text();\n-        console.error('Token refresh failed:', response.status, errorText);\n-        return { success: false, error: `Token refresh failed: ${errorText}` };\n-      }\n-\n-      const data = await response.json();\n-      \n-      if (data.access) {\n-        // Store the new access token\n-        this.setAccessToken(data.access);\n-        console.log('Access token refreshed successfully');\n-        return { success: true, accessToken: data.access };\n-      } else {\n-        return { success: false, error: 'No access token in refresh response' };\n-      }\n-    } catch (error: any) {\n-      console.error('Token refresh error:', error);\n-      return { success: false, error: 'Failed to refresh access token' };\n-    }\n-  }\n-\n-  // Check if token refresh is needed and handle it proactively\n-  async ensureValidToken(): Promise<{ success: boolean; accessToken?: string; error?: string }> {\n-    const accessToken = this.getAccessToken();\n-    if (!accessToken) {\n-      return { success: false, error: 'No access token found' };\n-    }\n-\n-    // For now, we'll let the API interceptor handle token refresh\n-    // This method can be used for proactive token refresh if needed\n-    return { success: true, accessToken };\n-  }\n-\n-  // Global error handler for authentication issues\n-  async handleAuthError(error: any): Promise<{ shouldRetry: boolean; error?: string }> {\n-    if (error?.response?.status === 401) {\n-      console.log('Handling 401 authentication error...');\n-      \n-      try {\n-        const refreshResult = await this.refreshAccessToken();\n-        if (refreshResult.success) {\n-          console.log('Token refreshed successfully, request can be retried');\n-          return { shouldRetry: true };\n-        } else {\n-          console.log('Token refresh failed, user needs to login again');\n-          this.logout();\n-          return { shouldRetry: false, error: 'Authentication expired. Please login again.' };\n-        }\n-      } catch (refreshError) {\n-        console.error('Error during token refresh:', refreshError);\n-        this.logout();\n-        return { shouldRetry: false, error: 'Authentication failed. Please login again.' };\n-      }\n-    }\n-    \n-    return { shouldRetry: false, error: error?.message || 'An error occurred' };\n-  }\n-\n-  // Private methods\n-  private setAccessToken(token: string): void {\n-    localStorage.setItem(this.ACCESS_TOKEN_KEY, token);\n-  }\n-\n-  private setRefreshToken(token: string): void {\n-    localStorage.setItem(this.REFRESH_TOKEN_KEY, token);\n-  }\n-\n-  private setUser(user: User): void {\n-    localStorage.setItem(this.USER_KEY, JSON.stringify(user));\n-  }\n-\n-  private clearTokens(): void {\n-    localStorage.removeItem(this.ACCESS_TOKEN_KEY);\n-    localStorage.removeItem(this.REFRESH_TOKEN_KEY);\n-  }\n-\n-  private clearUser(): void {\n-    localStorage.removeItem(this.USER_KEY);\n-  }\n-\n-  private getUser(): User | null {\n-    const userStr = localStorage.getItem(this.USER_KEY);\n-    if (userStr) {\n-      try {\n-        return JSON.parse(userStr);\n-      } catch {\n-        return null;\n-      }\n-    }\n-    return null;\n-  }\n-}\n-\n-export default new AuthService();\n"
                },
                {
                    "date": 1755676924075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -468,28 +468,78 @@\n   }\n \n   // Store Google OAuth connection status\n   setGoogleOAuthConnected(connected: boolean): void {\n-    localStorage.setItem('googleOAuthConnected', connected.toString());\n+    sessionStorage.setItem('googleOAuthConnected', connected.toString());\n   }\n \n   // Check if Google OAuth is already connected\n   isGoogleOAuthConnected(): boolean {\n-    const connected = localStorage.getItem('googleOAuthConnected');\n+    const connected = sessionStorage.getItem('googleOAuthConnected');\n     return connected === 'true';\n   }\n \n   // Clear Google OAuth connection status\n   clearGoogleOAuthStatus(): void {\n-    localStorage.removeItem('googleOAuthConnected');\n+    sessionStorage.removeItem('googleOAuthConnected');\n   }\n \n   // Disconnect Google Ads (clear connection status)\n   disconnectGoogleAds(): void {\n     this.clearGoogleOAuthStatus();\n     console.log('Google Ads disconnected');\n   }\n \n+  // Validate Google OAuth connection with backend (always fresh check)\n+  async validateGoogleOAuthConnection(): Promise<{ connected: boolean; error?: string }> {\n+    try {\n+      const accessToken = this.getAccessToken();\n+      if (!accessToken) {\n+        return { connected: false, error: 'No access token found' };\n+      }\n+\n+      console.log('Validating Google OAuth connection with backend...');\n+      \n+      const response = await api.get(API_ENDPOINTS.GOOGLE_OAUTH_STATUS, {\n+        headers: {\n+          'Authorization': `Bearer ${accessToken}`,\n+          'Content-Type': 'application/json',\n+        }\n+      });\n+\n+      if (response.data.success) {\n+        const isConnected = response.data.connected || false;\n+        console.log('Google OAuth connection validation result:', isConnected);\n+        \n+        // Update session storage based on backend response\n+        this.setGoogleOAuthConnected(isConnected);\n+        \n+        return { \n+          connected: isConnected,\n+          error: response.data.message\n+        };\n+      } else {\n+        console.log('Google OAuth connection validation failed:', response.data.message);\n+        this.setGoogleOAuthConnected(false);\n+        return { \n+          connected: false, \n+          error: response.data.message || 'Failed to validate connection' \n+        };\n+      }\n+    } catch (error: any) {\n+      console.error('Google OAuth connection validation error:', error);\n+      \n+      // On any error, assume not connected\n+      this.setGoogleOAuthConnected(false);\n+      \n+      if (error.response?.status === 401) {\n+        return { connected: false, error: 'Authentication expired' };\n+      }\n+      \n+      return { connected: false, error: 'Failed to validate connection' };\n+    }\n+  }\n+\n   // Private methods\n   private setAccessToken(token: string): void {\n     localStorage.setItem(this.ACCESS_TOKEN_KEY, token);\n   }\n"
                },
                {
                    "date": 1755677344743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,34 +220,41 @@\n       if (!accessToken) {\n         return { success: false, error: 'No access token found. Please login again.' };\n       }\n \n+      console.log('Initiating Google OAuth with access token...');\n+      \n       const response = await api.get(API_ENDPOINTS.GOOGLE_OAUTH_INITIATE, {\n         headers: {\n           'Authorization': `Bearer ${accessToken}`\n         }\n       });\n \n+      console.log('OAuth initiation response:', response.data);\n+\n       if (response.data.success && response.data.authorization_url) {\n-        // Open Google OAuth consent screen in a new window\n-        const authWindow = window.open(\n-          response.data.authorization_url,\n-          'google-oauth',\n-          'width=500,height=600,scrollbars=yes,resizable=yes'\n-        );\n-\n+        console.log('Opening OAuth popup window...');\n+        console.log('Authorization URL:', response.data.authorization_url);\n+        \n+        // Try multiple popup opening strategies\n+        const authWindow = this.tryOpenPopup(response.data.authorization_url);\n+        \n         if (authWindow) {\n           // Store the state for verification later\n           localStorage.setItem('googleOAuthState', response.data.state);\n+          console.log('OAuth state stored:', response.data.state);\n           \n           // Focus the popup window\n           authWindow.focus();\n+          console.log('Popup window focused successfully');\n           \n           return { success: true };\n         } else {\n-          return { success: false, error: 'Failed to open OAuth window. Please check your popup blocker.' };\n+          console.error('All popup opening strategies failed');\n+          return { success: false, error: 'Failed to open OAuth window. Please check your popup blocker and try again.' };\n         }\n       } else {\n+        console.error('OAuth initiation failed - invalid response:', response.data);\n         return { success: false, error: 'Failed to get authorization URL from server.' };\n       }\n     } catch (error: any) {\n       console.error('Google OAuth initiation error:', error);\n@@ -257,8 +264,56 @@\n       return { success: false, error: 'Failed to initiate Google OAuth. Please try again.' };\n     }\n   }\n \n+  // Try multiple strategies to open popup window\n+  private tryOpenPopup(url: string): Window | null {\n+    const popupFeatures = [\n+      'width=500,height=600,scrollbars=yes,resizable=yes,menubar=no,toolbar=no,location=no,status=no',\n+      'width=600,height=700,scrollbars=yes,resizable=yes',\n+      'width=800,height=600,scrollbars=yes,resizable=yes'\n+    ];\n+\n+    for (let i = 0; i < popupFeatures.length; i++) {\n+      try {\n+        console.log(`Trying popup strategy ${i + 1} with features:`, popupFeatures[i]);\n+        \n+        const authWindow = window.open(url, 'google-oauth', popupFeatures[i]);\n+        \n+        if (authWindow) {\n+          console.log(`Popup strategy ${i + 1} successful`);\n+          \n+          // Test if the window is actually accessible\n+          try {\n+            // This will throw an error if the popup is blocked\n+            authWindow.document;\n+            console.log('Popup window is accessible');\n+            return authWindow;\n+          } catch (popupError) {\n+            console.error(`Popup strategy ${i + 1} failed - window blocked:`, popupError);\n+            authWindow.close();\n+            continue; // Try next strategy\n+          }\n+        } else {\n+          console.log(`Popup strategy ${i + 1} failed - window.open returned null`);\n+        }\n+      } catch (error) {\n+        console.error(`Popup strategy ${i + 1} error:`, error);\n+        continue; // Try next strategy\n+      }\n+    }\n+\n+    // If all strategies fail, try opening in same window as last resort\n+    console.log('All popup strategies failed, trying to open in same window...');\n+    try {\n+      window.location.href = url;\n+      return null; // Return null since we're redirecting\n+    } catch (error) {\n+      console.error('Failed to open in same window:', error);\n+      return null;\n+    }\n+  }\n+\n   // Check Google OAuth connection status\n   async checkGoogleOAuthStatus(): Promise<{ success: boolean; connected: boolean; error?: string }> {\n     try {\n       const accessToken = this.getAccessToken();\n"
                }
            ],
            "date": 1755587604298,
            "name": "Commit-0",
            "content": "import api from './api';\nimport { SignupRequest, LoginRequest, AuthResponse, User } from '../types';\n\nclass AuthService {\n  // Signup user\n  async signup(userData: SignupRequest): Promise<AuthResponse> {\n    try {\n      // Convert to form data format as expected by the backend\n      const formData = new URLSearchParams();\n      Object.entries(userData).forEach(([key, value]) => {\n        if (value !== undefined) {\n          formData.append(key, value);\n        }\n      });\n\n      const response = await api.post('/accounts/signup/', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n\n      if (response.data.success) {\n        // Store user info in localStorage\n        const user: User = {\n          id: 'temp-id', // Backend doesn't return user ID in response\n          name: `${userData.first_name} ${userData.last_name}`,\n          email: userData.email,\n        };\n        localStorage.setItem('user', JSON.stringify(user));\n      }\n\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.data) {\n        return error.response.data;\n      }\n      throw new Error('Signup failed');\n    }\n  }\n\n  // Login user\n  async login(credentials: LoginRequest): Promise<AuthResponse> {\n    try {\n      const formData = new URLSearchParams();\n      formData.append('username', credentials.username);\n      formData.append('password', credentials.password);\n\n      const response = await api.post('/accounts/signin/', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n\n      if (response.data.success) {\n        // Store user info in localStorage\n        // Note: Backend doesn't return user details in login response\n        // We'll need to fetch user details separately or store them during signup\n        const user: User = {\n          id: 'temp-id',\n          name: credentials.username, // Use username as fallback\n          email: '', // Will be updated when we get user details\n        };\n        localStorage.setItem('user', JSON.stringify(user));\n        localStorage.setItem('authToken', 'session-token'); // Placeholder for session\n      }\n\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.data) {\n        return error.response.data;\n      }\n      throw new Error('Login failed');\n    }\n  }\n\n  // Logout user\n  async logout(): Promise<void> {\n    try {\n      await api.get('/accounts/signout/');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear local storage regardless of API call success\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n    }\n  }\n\n  // Check if user is authenticated\n  isAuthenticated(): boolean {\n    const token = localStorage.getItem('authToken');\n    const user = localStorage.getItem('user');\n    return !!(token && user);\n  }\n\n  // Get current user\n  getCurrentUser(): User | null {\n    const userStr = localStorage.getItem('user');\n    if (userStr) {\n      try {\n        return JSON.parse(userStr);\n      } catch {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  // Clear auth data\n  clearAuth(): void {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n  }\n}\n\nexport default new AuthService();\n"
        }
    ]
}