{
    "sourceFile": "src/services/api.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1755587604305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755588676600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,1 @@\n-import axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios';\n-\n-// Create axios instance\n-const api: AxiosInstance = axios.create({\n-  baseURL: 'http://localhost:8000',\n-  timeout: 10000,\n-  withCredentials: true, // Important for cookies/sessions\n-});\n-\n-// Request interceptor\n-api.interceptors.request.use(\n-  (config) => {\n-    // Add any auth headers if needed\n-    const token = localStorage.getItem('authToken');\n-    if (token) {\n-      config.headers.Authorization = `Bearer ${token}`;\n-    }\n-    return config;\n-  },\n-  (error) => {\n-    return Promise.reject(error);\n-  }\n-);\n-\n-// Response interceptor\n-api.interceptors.response.use(\n-  (response: AxiosResponse) => {\n-    return response;\n-  },\n-  (error: AxiosError) => {\n-    if (error.response?.status === 401) {\n-      // Unauthorized - clear auth state and redirect to login\n-      localStorage.removeItem('authToken');\n-      localStorage.removeItem('user');\n-      window.location.href = '/';\n-    }\n-    return Promise.reject(error);\n-  }\n-);\n-\n-export default api;\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1755589673451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,42 @@\n- \n\\ No newline at end of file\n+import axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios';\n+import { API_BASE_URL } from '../constants';\n+\n+// Create axios instance\n+const api: AxiosInstance = axios.create({\n+  baseURL: API_BASE_URL,\n+  timeout: 10000,\n+  withCredentials: true, // Important for cookies/sessions\n+});\n+\n+// Request interceptor\n+api.interceptors.request.use(\n+  (config) => {\n+    // Add any auth headers if needed\n+    const token = localStorage.getItem('authToken');\n+    if (token) {\n+      config.headers.Authorization = `Bearer ${token}`;\n+    }\n+    return config;\n+  },\n+  (error) => {\n+    return Promise.reject(error);\n+  }\n+);\n+\n+// Response interceptor\n+api.interceptors.response.use(\n+  (response: AxiosResponse) => {\n+    return response;\n+  },\n+  (error: AxiosError) => {\n+    if (error.response?.status === 401) {\n+      // Unauthorized - clear auth state and redirect to login\n+      localStorage.removeItem('authToken');\n+      localStorage.removeItem('user');\n+      window.location.href = '/';\n+    }\n+    return Promise.reject(error);\n+  }\n+);\n+\n+export default api;\n"
                },
                {
                    "date": 1755591297872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,12 +10,12 @@\n \n // Request interceptor\n api.interceptors.request.use(\n   (config) => {\n-    // Add any auth headers if needed\n-    const token = localStorage.getItem('authToken');\n-    if (token) {\n-      config.headers.Authorization = `Bearer ${token}`;\n+    // Add access token to Authorization header\n+    const accessToken = localStorage.getItem('accessToken');\n+    if (accessToken) {\n+      config.headers.Authorization = `Bearer ${accessToken}`;\n     }\n     return config;\n   },\n   (error) => {\n@@ -30,9 +30,10 @@\n   },\n   (error: AxiosError) => {\n     if (error.response?.status === 401) {\n       // Unauthorized - clear auth state and redirect to login\n-      localStorage.removeItem('authToken');\n+      localStorage.removeItem('accessToken');\n+      localStorage.removeItem('refreshToken');\n       localStorage.removeItem('user');\n       window.location.href = '/';\n     }\n     return Promise.reject(error);\n"
                },
                {
                    "date": 1755662238489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,76 @@\n import axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios';\n-import { API_BASE_URL } from '../constants';\n+import { API_BASE_URL, API_ENDPOINTS } from '../constants';\n \n+// CSRF token cache\n+let csrfTokenCache: string | null = null;\n+let csrfTokenExpiry: number = 0;\n+\n // Create axios instance\n const api: AxiosInstance = axios.create({\n   baseURL: API_BASE_URL,\n   timeout: 10000,\n   withCredentials: true, // Important for cookies/sessions\n });\n \n+// Function to get CSRF token from Django\n+const getCSRFToken = async (): Promise<string | null> => {\n+  // Check if we have a cached token that's still valid\n+  if (csrfTokenCache && Date.now() < csrfTokenExpiry) {\n+    return csrfTokenCache;\n+  }\n+\n+  try {\n+    // Get CSRF token from cookie or make a request to get it\n+    const response = await axios.get(`${API_BASE_URL}${API_ENDPOINTS.CSRF}`, {\n+      withCredentials: true,\n+    });\n+    \n+    if (response.data.csrfToken) {\n+      csrfTokenCache = response.data.csrfToken;\n+      csrfTokenExpiry = Date.now() + (60 * 60 * 1000); // Cache for 1 hour\n+      return csrfTokenCache;\n+    }\n+    \n+    // Fallback: try to get from cookie\n+    const cookies = document.cookie.split(';');\n+    const csrfCookie = cookies.find(cookie => cookie.trim().startsWith('csrftoken='));\n+    if (csrfCookie) {\n+      csrfTokenCache = csrfCookie.split('=')[1];\n+      csrfTokenExpiry = Date.now() + (60 * 60 * 1000); // Cache for 1 hour\n+      return csrfTokenCache;\n+    }\n+    \n+    return null;\n+  } catch (error) {\n+    console.error('Failed to get CSRF token:', error);\n+    return null;\n+  }\n+};\n+\n+// Function to clear CSRF token cache\n+export const clearCSRFTokenCache = () => {\n+  csrfTokenCache = null;\n+  csrfTokenExpiry = 0;\n+};\n+\n // Request interceptor\n api.interceptors.request.use(\n-  (config) => {\n+  async (config) => {\n     // Add access token to Authorization header\n     const accessToken = localStorage.getItem('accessToken');\n     if (accessToken) {\n       config.headers.Authorization = `Bearer ${accessToken}`;\n     }\n+    \n+    // Add CSRF token for non-GET requests\n+    if (config.method && config.method !== 'get' && config.method !== 'GET') {\n+      const csrfToken = await getCSRFToken();\n+      if (csrfToken) {\n+        config.headers['X-CSRFToken'] = csrfToken;\n+      }\n+    }\n+    \n     return config;\n   },\n   (error) => {\n     return Promise.reject(error);\n@@ -27,15 +81,38 @@\n api.interceptors.response.use(\n   (response: AxiosResponse) => {\n     return response;\n   },\n-  (error: AxiosError) => {\n+  async (error: AxiosError) => {\n     if (error.response?.status === 401) {\n       // Unauthorized - clear auth state and redirect to login\n       localStorage.removeItem('accessToken');\n       localStorage.removeItem('refreshToken');\n       localStorage.removeItem('user');\n+      clearCSRFTokenCache();\n       window.location.href = '/';\n+    } else if (error.response?.status === 403 && \n+               error.response?.data && \n+               typeof error.response.data === 'object' && \n+               'detail' in error.response.data && \n+               typeof error.response.data.detail === 'string' && \n+               error.response.data.detail.includes('CSRF')) {\n+      // CSRF token error - clear cache and retry\n+      console.warn('CSRF token error, clearing cache and retrying...');\n+      clearCSRFTokenCache();\n+      \n+      // Retry the request once\n+      if (error.config) {\n+        try {\n+          const csrfToken = await getCSRFToken();\n+          if (csrfToken && error.config.headers) {\n+            error.config.headers['X-CSRFToken'] = csrfToken;\n+            return api.request(error.config);\n+          }\n+        } catch (retryError) {\n+          console.error('Failed to retry request with new CSRF token:', retryError);\n+        }\n+      }\n     }\n     return Promise.reject(error);\n   }\n );\n"
                },
                {
                    "date": 1755665884717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,74 +1,26 @@\n import axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios';\n-import { API_BASE_URL, API_ENDPOINTS } from '../constants';\n+import { API_BASE_URL } from '../constants';\n \n-// CSRF token cache\n-let csrfTokenCache: string | null = null;\n-let csrfTokenExpiry: number = 0;\n-\n-// Create axios instance\n+// Create axios instance with longer timeout for OAuth operations\n const api: AxiosInstance = axios.create({\n   baseURL: API_BASE_URL,\n-  timeout: 10000,\n+  timeout: 30000, // Increased from 10000ms to 30000ms for OAuth operations\n   withCredentials: true, // Important for cookies/sessions\n });\n \n-// Function to get CSRF token from Django\n-const getCSRFToken = async (): Promise<string | null> => {\n-  // Check if we have a cached token that's still valid\n-  if (csrfTokenCache && Date.now() < csrfTokenExpiry) {\n-    return csrfTokenCache;\n-  }\n-\n-  try {\n-    // Get CSRF token from cookie or make a request to get it\n-    const response = await axios.get(`${API_BASE_URL}${API_ENDPOINTS.CSRF}`, {\n-      withCredentials: true,\n-    });\n-    \n-    if (response.data.csrfToken) {\n-      csrfTokenCache = response.data.csrfToken;\n-      csrfTokenExpiry = Date.now() + (60 * 60 * 1000); // Cache for 1 hour\n-      return csrfTokenCache;\n-    }\n-    \n-    // Fallback: try to get from cookie\n-    const cookies = document.cookie.split(';');\n-    const csrfCookie = cookies.find(cookie => cookie.trim().startsWith('csrftoken='));\n-    if (csrfCookie) {\n-      csrfTokenCache = csrfCookie.split('=')[1];\n-      csrfTokenExpiry = Date.now() + (60 * 60 * 1000); // Cache for 1 hour\n-      return csrfTokenCache;\n-    }\n-    \n-    return null;\n-  } catch (error) {\n-    console.error('Failed to get CSRF token:', error);\n-    return null;\n-  }\n-};\n-\n-// Function to clear CSRF token cache\n-export const clearCSRFTokenCache = () => {\n-  csrfTokenCache = null;\n-  csrfTokenExpiry = 0;\n-};\n-\n // Request interceptor\n api.interceptors.request.use(\n-  async (config) => {\n+  (config) => {\n     // Add access token to Authorization header\n     const accessToken = localStorage.getItem('accessToken');\n     if (accessToken) {\n       config.headers.Authorization = `Bearer ${accessToken}`;\n     }\n     \n-    // Add CSRF token for non-GET requests\n-    if (config.method && config.method !== 'get' && config.method !== 'GET') {\n-      const csrfToken = await getCSRFToken();\n-      if (csrfToken) {\n-        config.headers['X-CSRFToken'] = csrfToken;\n-      }\n+    // Set longer timeout for OAuth endpoints\n+    if (config.url?.includes('google-oauth') || config.url?.includes('oauth')) {\n+      config.timeout = 60000; // 60 seconds for OAuth operations\n     }\n     \n     return config;\n   },\n@@ -81,38 +33,15 @@\n api.interceptors.response.use(\n   (response: AxiosResponse) => {\n     return response;\n   },\n-  async (error: AxiosError) => {\n+  (error: AxiosError) => {\n     if (error.response?.status === 401) {\n       // Unauthorized - clear auth state and redirect to login\n       localStorage.removeItem('accessToken');\n       localStorage.removeItem('refreshToken');\n       localStorage.removeItem('user');\n-      clearCSRFTokenCache();\n       window.location.href = '/';\n-    } else if (error.response?.status === 403 && \n-               error.response?.data && \n-               typeof error.response.data === 'object' && \n-               'detail' in error.response.data && \n-               typeof error.response.data.detail === 'string' && \n-               error.response.data.detail.includes('CSRF')) {\n-      // CSRF token error - clear cache and retry\n-      console.warn('CSRF token error, clearing cache and retrying...');\n-      clearCSRFTokenCache();\n-      \n-      // Retry the request once\n-      if (error.config) {\n-        try {\n-          const csrfToken = await getCSRFToken();\n-          if (csrfToken && error.config.headers) {\n-            error.config.headers['X-CSRFToken'] = csrfToken;\n-            return api.request(error.config);\n-          }\n-        } catch (retryError) {\n-          console.error('Failed to retry request with new CSRF token:', retryError);\n-        }\n-      }\n     }\n     return Promise.reject(error);\n   }\n );\n"
                },
                {
                    "date": 1755670728623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,21 +28,78 @@\n     return Promise.reject(error);\n   }\n );\n \n-// Response interceptor\n+// Response interceptor with automatic token refresh\n api.interceptors.response.use(\n   (response: AxiosResponse) => {\n     return response;\n   },\n-  (error: AxiosError) => {\n-    if (error.response?.status === 401) {\n-      // Unauthorized - clear auth state and redirect to login\n-      localStorage.removeItem('accessToken');\n-      localStorage.removeItem('refreshToken');\n-      localStorage.removeItem('user');\n-      window.location.href = '/';\n+  async (error: AxiosError) => {\n+    const originalRequest = error.config as any;\n+    \n+    if (error.response?.status === 401 && !originalRequest._retry) {\n+      originalRequest._retry = true;\n+      \n+      try {\n+        // Try to refresh the access token\n+        const refreshToken = localStorage.getItem('refreshToken');\n+        if (!refreshToken) {\n+          // No refresh token, redirect to login\n+          localStorage.removeItem('accessToken');\n+          localStorage.removeItem('refreshToken');\n+          localStorage.removeItem('user');\n+          window.location.href = '/';\n+          return Promise.reject(error);\n+        }\n+        \n+        console.log('Attempting to refresh access token...');\n+        \n+        const refreshResponse = await fetch(`${API_BASE_URL}/accounts/api/token/refresh/`, {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+          body: JSON.stringify({\n+            refresh: refreshToken\n+          })\n+        });\n+        \n+        if (refreshResponse.ok) {\n+          const refreshData = await refreshResponse.json();\n+          \n+          if (refreshData.access) {\n+            // Store the new access token\n+            localStorage.setItem('accessToken', refreshData.access);\n+            \n+            // Update the original request with new token\n+            originalRequest.headers.Authorization = `Bearer ${refreshData.access}`;\n+            \n+            // Retry the original request\n+            console.log('Token refreshed, retrying original request...');\n+            return axios(originalRequest);\n+          }\n+        }\n+        \n+        // Refresh failed, redirect to login\n+        console.log('Token refresh failed, redirecting to login...');\n+        localStorage.removeItem('accessToken');\n+        localStorage.removeItem('refreshToken');\n+        localStorage.removeItem('user');\n+        window.location.href = '/';\n+        return Promise.reject(error);\n+        \n+      } catch (refreshError) {\n+        console.error('Error during token refresh:', refreshError);\n+        // Refresh failed, redirect to login\n+        localStorage.removeItem('accessToken');\n+        localStorage.removeItem('refreshToken');\n+        localStorage.removeItem('user');\n+        window.location.href = '/';\n+        return Promise.reject(error);\n+      }\n     }\n+    \n     return Promise.reject(error);\n   }\n );\n \n"
                }
            ],
            "date": 1755587604305,
            "name": "Commit-0",
            "content": "import axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios';\n\n// Create axios instance\nconst api: AxiosInstance = axios.create({\n  baseURL: 'http://localhost:8000',\n  timeout: 10000,\n  withCredentials: true, // Important for cookies/sessions\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    // Add any auth headers if needed\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response: AxiosResponse) => {\n    return response;\n  },\n  (error: AxiosError) => {\n    if (error.response?.status === 401) {\n      // Unauthorized - clear auth state and redirect to login\n      localStorage.removeItem('authToken');\n      localStorage.removeItem('user');\n      window.location.href = '/';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n"
        }
    ]
}